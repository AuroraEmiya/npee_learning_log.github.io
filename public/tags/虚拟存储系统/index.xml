<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>虚拟存储系统 on Shyの考研日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/tags/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</link>
        <description>Recent content in 虚拟存储系统 on Shyの考研日志</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 26 Jul 2025 11:19:57 +0800</lastBuildDate><atom:link href="https://auroraemiya.github.io/npee_learning_log.github.io/tags/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>0726学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0726/</link>
        <pubDate>Sat, 26 Jul 2025 11:19:57 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0726/</guid>
        <description>&lt;h2 id=&#34;操作系统-一些易错知识点&#34;&gt;操作系统-一些易错知识点
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在计算平均访存时间时要注意快表TLB和页表的访问是&lt;strong&gt;串行&lt;/strong&gt;还是并行的，也要注意页表是&lt;strong&gt;单级&lt;/strong&gt;还是多级的&lt;/li&gt;
&lt;li&gt;虚拟存储器的&lt;strong&gt;最大容量&lt;/strong&gt;只和计算机的地址结构决定，&lt;strong&gt;实际容量&lt;/strong&gt;和内存和外存有关&lt;/li&gt;
&lt;li&gt;工作集不是驻留集的子集，只是数量要小于（不大于）驻留集的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一些你需要搞明白的概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;链接，包括静态和动态&lt;/p&gt;
&lt;p&gt;链接是将不同编译单元及其依赖库整合到一个统一逻辑地址空间的过程。根据发生时间不同，链接分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;静态链接&lt;/strong&gt;：在编译阶段将所有代码打包进可执行文件中；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态链接&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加载时链接（Load-Time Linking）&lt;/strong&gt;：程序加载时操作系统自动加载依赖库；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时链接（Run-Time Linking）&lt;/strong&gt;：程序运行过程中手动加载库，例如通过 &lt;code&gt;dlopen()&lt;/code&gt; 等函数调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类别&lt;/th&gt;
          &lt;th&gt;链接时间&lt;/th&gt;
          &lt;th&gt;控制方式&lt;/th&gt;
          &lt;th&gt;示例函数&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;静态链接&lt;/td&gt;
          &lt;td&gt;编译/链接阶段&lt;/td&gt;
          &lt;td&gt;编译器自动处理&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;动态链接（加载时）&lt;/td&gt;
          &lt;td&gt;程序加载阶段&lt;/td&gt;
          &lt;td&gt;操作系统自动处理&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;动态链接（运行时）&lt;/td&gt;
          &lt;td&gt;程序运行阶段&lt;/td&gt;
          &lt;td&gt;程序员手动调用&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;dlopen&lt;/code&gt;, &lt;code&gt;dlsym&lt;/code&gt; 等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;$&amp;gt;dive into the procedure of linking of a C code program(Gemini 2.5 pro)&lt;/p&gt;
&lt;h3 id=&#34;the-final-step-unraveling-the-linking-process-of-a-c-program&#34;&gt;The Final Step: Unraveling the Linking Process of a C Program
&lt;/h3&gt;&lt;p&gt;The journey from human-readable C code to an executable program culminates in a crucial, often-overlooked stage: linking. This final step in the compilation process is where all the disparate pieces of your program are brought together to create a single, functional executable file. The linker, a key component of the C toolchain, orchestrates this assembly, resolving references between different parts of your code and incorporating necessary library functions.&lt;/p&gt;
&lt;p&gt;The compilation of a C program is a multi-stage process. First, the preprocessor handles directives like &lt;code&gt;#include&lt;/code&gt; and &lt;code&gt;#define&lt;/code&gt;. The preprocessed code is then compiled into assembly language, which is subsequently converted into machine-readable object files. These object files, however, are not yet ready to run. They are incomplete pieces of a larger puzzle, and it is the linker&amp;rsquo;s job to put them together.&lt;/p&gt;
&lt;p&gt;The primary role of the linker is to take one or more object files, along with any necessary libraries, and combine them into a single executable file. A key function of the linker is &lt;strong&gt;symbol resolution&lt;/strong&gt;. When you call a function in one C file that is defined in another, the compiler leaves a placeholder, or a reference, in the object file. The linker&amp;rsquo;s job is to find the actual memory address of that function in the other object file and replace the placeholder with this address. This ensures that when the program runs, the function call correctly jumps to the right location in memory.&lt;/p&gt;
&lt;h3 id=&#34;static-vs-dynamic-linking-two-approaches-to-integration&#34;&gt;Static vs. Dynamic Linking: Two Approaches to Integration
&lt;/h3&gt;&lt;p&gt;There are two fundamental ways a linker can incorporate external code into your program: static linking and dynamic linking.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Static Linking:&lt;/strong&gt; In this approach, all the required library code is copied directly into the final executable file. This creates a self-contained program that does not rely on external libraries to be present on the system where it is run.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Advantages of Static Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Portability:&lt;/strong&gt; The executable can be run on systems that do not have the required libraries installed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Potentially Faster Execution:&lt;/strong&gt; Since all the code is in one place, it can sometimes lead to faster execution as there is no need to load external libraries at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages of Static Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Larger Executable Size:&lt;/strong&gt; Because all library code is included, the resulting executable file is larger.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inefficient Memory and Disk Space Usage:&lt;/strong&gt; If multiple programs on a system use the same statically linked library, each will have its own copy, leading to redundant use of disk space and memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Difficult to Update:&lt;/strong&gt; To update a library, every program that uses it must be re-linked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Linking:&lt;/strong&gt; In contrast, dynamic linking does not copy the library code into the executable. Instead, it only includes the names of the shared libraries that the program needs. The actual linking of the library code happens at runtime when the program is loaded into memory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Advantages of Dynamic Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Smaller Executable Size:&lt;/strong&gt; The executables are smaller as they only contain references to the shared libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient Memory and Disk Space Usage:&lt;/strong&gt; A single copy of a shared library in memory can be used by multiple programs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easier Updates:&lt;/strong&gt; To update a library, you only need to replace the shared library file; all programs that use it will automatically benefit from the update without needing to be re-linked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages of Dynamic Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dependencies:&lt;/strong&gt; The program will not run if the required shared libraries are not present on the system or if the version is incompatible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slightly Slower Startup:&lt;/strong&gt; There can be a minor performance overhead at startup as the dynamic linker needs to find and load the necessary shared libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-linking-process-in-action-with-gcc&#34;&gt;The Linking Process in Action with GCC
&lt;/h3&gt;&lt;p&gt;The GNU Compiler Collection (GCC) is a popular toolchain for compiling and linking C programs. The linking process can be performed as a separate step or combined with compilation.&lt;/p&gt;
&lt;p&gt;To compile a C source file (&lt;code&gt;.c&lt;/code&gt;) into an object file (&lt;code&gt;.o&lt;/code&gt;), you can use the &lt;code&gt;-c&lt;/code&gt; flag with &lt;code&gt;gcc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -c my_program.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create an object file named &lt;code&gt;my_program.o&lt;/code&gt;. If your program is split across multiple source files, you would compile each one into an object file.&lt;/p&gt;
&lt;p&gt;Once you have all the necessary object files, you can link them together to create an executable file using the &lt;code&gt;-o&lt;/code&gt; flag to specify the output file name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -o my_executable my_program.o another_file.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command tells &lt;code&gt;gcc&lt;/code&gt; to link &lt;code&gt;my_program.o&lt;/code&gt; and &lt;code&gt;another_file.o&lt;/code&gt; and create an executable file named &lt;code&gt;my_executable&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;common-linker-errors&#34;&gt;Common Linker Errors
&lt;/h3&gt;&lt;p&gt;Errors that occur during the linking phase are known as linker errors. Some of the most common linker errors include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Undefined Symbol/Undefined Reference:&lt;/strong&gt; This is the most frequent linker error. It occurs when the linker cannot find the definition for a function or variable that has been declared and used in the code. This often happens when you forget to link an object file that contains the definition or mistype a function name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Definitions:&lt;/strong&gt; This error arises when the linker finds more than one definition for the same function or variable. This can happen if you define a function in a header file that gets included in multiple source files or if you link the same object file multiple times.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, the linking process is the essential final act in the creation of a C program. By understanding how the linker works, the differences between static and dynamic linking, and how to use tools like &lt;code&gt;gcc&lt;/code&gt; to control the linking process, developers can gain a deeper insight into how their code is transformed into a runnable application and more effectively troubleshoot common errors.&lt;/p&gt;
&lt;p&gt;$&amp;gt;are there different categories of dynamic linking technique?(Gemini 2.5 pro)&lt;/p&gt;
&lt;p&gt;Yes, there are different categories of dynamic linking techniques, each with its own timing and mechanism for connecting a program to the shared libraries it needs. The main distinctions lie in &lt;em&gt;when&lt;/em&gt; the linking happens and &lt;em&gt;who&lt;/em&gt; initiates it.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a breakdown of the primary categories of dynamic linking:&lt;/p&gt;
&lt;h3 id=&#34;1-load-time-dynamic-linking-implicit-linking&#34;&gt;1. Load-Time Dynamic Linking (Implicit Linking)
&lt;/h3&gt;&lt;p&gt;This is the most common form of dynamic linking. When you compile and link your program against a shared library, the linker embeds references to that library directly into the executable file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;At compile time:&lt;/strong&gt; The linker records the names of the shared libraries the program depends on and the symbols (functions and variables) it uses from them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At load time:&lt;/strong&gt; When you run the executable, the operating system&amp;rsquo;s program loader (also known as the dynamic linker or runtime linker) reads this dependency information. It then locates the necessary shared libraries on the system, loads them into the process&amp;rsquo;s address space, and resolves all the symbol references before the program&amp;rsquo;s main function begins to execute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automatic:&lt;/strong&gt; The entire process is handled automatically by the operating system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependencies are required at startup:&lt;/strong&gt; If any of the required shared libraries are missing or incompatible, the program will fail to start.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slight startup overhead:&lt;/strong&gt; There is a small performance cost at program launch while the dynamic linker does its work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-run-time-dynamic-linking-explicit-linking-or-dynamic-loading&#34;&gt;2. Run-Time Dynamic Linking (Explicit Linking or Dynamic Loading)
&lt;/h3&gt;&lt;p&gt;This technique gives the programmer more control over the linking process. Instead of the operating system automatically loading libraries at startup, the program itself can explicitly load and unload libraries at any point during its execution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programmatic Control:&lt;/strong&gt; The program uses specific API calls (like &lt;code&gt;dlopen()&lt;/code&gt;, &lt;code&gt;dlsym()&lt;/code&gt;, and &lt;code&gt;dlclose()&lt;/code&gt; on POSIX systems, or &lt;code&gt;LoadLibrary()&lt;/code&gt;, &lt;code&gt;GetProcAddress()&lt;/code&gt;, and &lt;code&gt;FreeLibrary()&lt;/code&gt; on Windows) to manage shared libraries.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dlopen()&lt;/code&gt; or &lt;code&gt;LoadLibrary()&lt;/code&gt;: Loads a specified library into memory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dlsym()&lt;/code&gt; or &lt;code&gt;GetProcAddress()&lt;/code&gt;: Retrieves the address of a specific function or variable within the loaded library.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dlclose()&lt;/code&gt; or &lt;code&gt;FreeLibrary()&lt;/code&gt;: Unloads the library from memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; Programs can decide which libraries to load based on runtime conditions. This is the foundation for a &amp;ldquo;plugin&amp;rdquo; architecture, where new functionality can be added to a running application by loading new shared libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No startup dependency:&lt;/strong&gt; The program can start even if the optional libraries are not present. It can then check for their availability and load them if needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More complex to implement:&lt;/strong&gt; The programmer is responsible for managing the loading, symbol lookup, and unloading of libraries, which requires more code and error handling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a-special-case-lazy-linking&#34;&gt;A Special Case: Lazy Linking
&lt;/h3&gt;&lt;p&gt;Lazy linking is an optimization often used with load-time dynamic linking to improve program startup time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of resolving all function addresses when the program is first loaded, the dynamic linker defers the resolution of each function until it is actually called for the first time.&lt;/li&gt;
&lt;li&gt;The first time a function in a shared library is called, a small piece of code (a &amp;ldquo;trampoline&amp;rdquo; or &amp;ldquo;stub&amp;rdquo;) in the program&amp;rsquo;s Procedure Linkage Table (PLT) transfers control to the dynamic linker. The dynamic linker then looks up the real address of the function, patches the PLT entry to point directly to it, and then calls the function.&lt;/li&gt;
&lt;li&gt;Subsequent calls to that same function will then go directly to the function&amp;rsquo;s address without involving the dynamic linker, resulting in minimal overhead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Faster startup:&lt;/strong&gt; By avoiding the upfront cost of resolving every single function, the program can start executing more quickly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimal overhead on first call:&lt;/strong&gt; There is a small performance penalty the very first time each dynamically linked function is called.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transparent to the developer:&lt;/strong&gt; This is typically a default behavior of the dynamic linker and doesn&amp;rsquo;t require any special coding by the programmer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In essence, while &lt;strong&gt;load-time&lt;/strong&gt; and &lt;strong&gt;run-time&lt;/strong&gt; dynamic linking are the two main strategies, &lt;strong&gt;lazy linking&lt;/strong&gt; is a common optimization that fine-tunes the performance of load-time linking. The choice between these techniques depends on the specific needs of the application, balancing ease of use, startup performance, and the flexibility to load code on demand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卡特兰数，用于计算给定输入栈序列，所有可能的输出排列
&lt;/p&gt;
$$
   \frac{1}{n+1}\binom{2n}{n}=\frac{2n!}{(n+1)!n!}
   $$&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;英语-单词词根词缀分开&#34;&gt;英语-单词（词根词缀分开）
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;a vail&lt;/li&gt;
&lt;li&gt;mock&lt;/li&gt;
&lt;li&gt;gigantic&lt;/li&gt;
&lt;li&gt;zoom&lt;/li&gt;
&lt;li&gt;speci fication&lt;/li&gt;
&lt;li&gt;pa nel&lt;/li&gt;
&lt;li&gt;pre mise&lt;/li&gt;
&lt;li&gt;sovereign&lt;/li&gt;
&lt;li&gt;utter&lt;/li&gt;
&lt;li&gt;deem&lt;/li&gt;
&lt;li&gt;mono poly&lt;/li&gt;
&lt;li&gt;spec ulate&lt;/li&gt;
&lt;li&gt;con form&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
