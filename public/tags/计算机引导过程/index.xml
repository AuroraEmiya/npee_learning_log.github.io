<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>计算机引导过程 on shyの考研日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BC%95%E5%AF%BC%E8%BF%87%E7%A8%8B/</link>
        <description>Recent content in 计算机引导过程 on shyの考研日志</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 04 Aug 2025 20:51:06 +0800</lastBuildDate><atom:link href="http://localhost:1313/npee_learning_log.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BC%95%E5%AF%BC%E8%BF%87%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>0804学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0804/</link>
        <pubDate>Mon, 04 Aug 2025 20:51:06 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0804/</guid>
        <description>&lt;h2 id=&#34;操作系统-io管理&#34;&gt;操作系统-IO管理
&lt;/h2&gt;&lt;h3 id=&#34;io层次结构&#34;&gt;IO层次结构
&lt;/h3&gt;&lt;p&gt;计算机的外部设备（I/O 设备）种类繁多，特性千差万别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;速度差异巨大：&lt;/strong&gt; CPU 的速度比键盘快上亿倍，但比高速的 NVMe SSD 又慢一些。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能各异：&lt;/strong&gt; 打印机是输出设备，键盘是输入设备，硬盘既是输入也是输出设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制方式复杂：&lt;/strong&gt; 每个设备都有自己独特的指令集、寄存器和工作协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果让每个应用程序都去直接和这些具体的硬件打交道，那将是一场灾难。因此，操作系统设计了一个分层的结构来管理 I/O，其主要目标是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;设备独立性（Device Independence）：&lt;/strong&gt; 应用程序的编写不应依赖于具体的物理设备。例如，一个程序向一个文件写入数据，它不应该关心这个文件是存在于机械硬盘、U盘还是网络存储上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统一接口（Uniform Interface）：&lt;/strong&gt; 为应用程序提供一个简洁、一致的访问接口。在类 Unix 系统中，这个思想的极致体现就是“一切皆文件”，无论是访问硬盘、键盘还是打印机，都可以使用类似 &lt;code&gt;read()&lt;/code&gt; 和 &lt;code&gt;write()&lt;/code&gt; 的函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误处理（Error Handling）：&lt;/strong&gt; 在尽可能低的层次处理设备错误，只将无法解决的严重错误向上层报告，简化上层软件的逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率与性能（Efficiency and Performance）：&lt;/strong&gt; 通过缓冲（Buffering）、缓存（Caching）和异步操作等技术，协调高速 CPU 与低速设备之间的矛盾，提高系统整体吞吐量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I/O 软件通常被组织成一个四到五层的结构。一个 I/O 请求会从顶层逐级向下传递，直到硬件；而操作完成的信号和数据则会从底层逐级向上传递。&lt;/p&gt;
&lt;p&gt;下面是从上到下（从用户到硬件）的层次结构：&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;第-1-层用户层-io-软件-user-level-io-software&#34;&gt;&lt;strong&gt;第 1 层：用户层 I/O 软件 (User-Level I/O Software)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;这是最靠近应用程序的一层，它不是操作系统内核的一部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能：&lt;/strong&gt; 为应用程序员提供方便的接口库（Library），这些库函数最终会通过**系统调用（System Call）**请求内核的服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;C语言中的标准 I/O 库函数，如 &lt;code&gt;printf()&lt;/code&gt;, &lt;code&gt;scanf()&lt;/code&gt;, &lt;code&gt;fopen()&lt;/code&gt;, &lt;code&gt;fread()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;各种编程语言提供的 I/O 库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作流程：&lt;/strong&gt; 比如，当你在程序中调用 &lt;code&gt;printf(&amp;quot;Hello&amp;quot;)&lt;/code&gt; 时，&lt;code&gt;printf&lt;/code&gt; 函数会格式化字符串，然后调用底层的 &lt;code&gt;write()&lt;/code&gt; 系统调用，请求内核将数据输出到屏幕。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;第-2-层设备无关的操作系统软件-device-independent-os-software&#34;&gt;&lt;strong&gt;第 2 层：设备无关的操作系统软件 (Device-Independent OS Software)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;这是 I/O 结构的核心，它实现了设备独立性的主要逻辑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能：&lt;/strong&gt; 提供一个对所有设备都统一的框架。它负责处理所有设备共有的功能。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;统一接口：&lt;/strong&gt; 向用户层提供统一的系统调用接口（如 &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备命名：&lt;/strong&gt; 将设备映射到文件系统中的名字（例如 Linux 中的 &lt;code&gt;/dev/sda1&lt;/code&gt; 代表第一个硬盘的第一个分区）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备保护：&lt;/strong&gt; 检查用户是否有权限访问某个设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提供缓冲（Buffering）：&lt;/strong&gt; 在用户空间和设备之间提供数据缓冲区，以协调速度差异。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配与释放：&lt;/strong&gt; 管理设备的分配和释放，例如独占设备（如打印机）的使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子：&lt;/strong&gt; Linux 中的虚拟文件系统（VFS）层就扮演了这个角色。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;第-3-层设备驱动程序-device-drivers&#34;&gt;&lt;strong&gt;第 3 层：设备驱动程序 (Device Drivers)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;这是操作系统内核中与特定设备直接相关的部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能：&lt;/strong&gt; 充当“翻译官”的角色。它接收来自上层（设备无关层）的抽象命令（如“从这个设备读取 512 字节”），并将其翻译成设备控制器能够理解的具体指令（如向设备的某个寄存器写入特定的值）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;设备特定：&lt;/strong&gt; 每种类型的设备（或一个设备家族）都有一个专门的驱动程序。例如，NVIDIA 显卡有其驱动，Intel 的网卡有它的驱动。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可加载模块：&lt;/strong&gt; 现代操作系统通常将驱动程序实现为内核模块，可以在系统运行时动态加载或卸载，而无需重新编译整个内核。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作流程：&lt;/strong&gt; 驱动程序设置好设备寄存器，命令设备开始工作后，它通常会阻塞（等待）直到设备完成操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;第-4-层中断处理程序-interrupt-handlers&#34;&gt;&lt;strong&gt;第 4 层：中断处理程序 (Interrupt Handlers)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;这是处理硬件与软件交互最底层、最直接的部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能：&lt;/strong&gt; 当 I/O 设备完成一项任务（例如，硬盘读完一个数据块）或者发生错误时，它会向 CPU 发送一个&lt;strong&gt;中断信号（Interrupt）&lt;/strong&gt;。中断处理程序就是被这个信号触发而运行的一段代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作流程：&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;CPU 暂停当前正在执行的任何任务。&lt;/li&gt;
&lt;li&gt;保存当前任务的上下文（寄存器状态等）。&lt;/li&gt;
&lt;li&gt;跳转到预设的中断处理程序地址并开始执行。&lt;/li&gt;
&lt;li&gt;中断处理程序分析中断原因，进行相应处理（例如，将从设备读取的数据放入缓冲区，并唤醒正在等待这个数据的设备驱动程序）。&lt;/li&gt;
&lt;li&gt;处理完毕后，恢复之前被暂停任务的上下文，让它继续运行。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心作用：&lt;/strong&gt; 实现了真正的异步操作，让 CPU 在等待 I/O 时可以去做别的事情，而不是空闲等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;第-5-层硬件-hardware&#34;&gt;&lt;strong&gt;第 5 层：硬件 (Hardware)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;这是层次结构的最底层，包含了物理设备本身及其控制器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;组成：&lt;/strong&gt; 设备本身（如磁盘盘片、打印机喷头）和设备控制器（一块包含寄存器和逻辑电路的芯片，负责与 CPU 通信）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能：&lt;/strong&gt; 真正执行 I/O 操作的物理实体。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;一次-io-请求的完整流程以读文件为例&#34;&gt;一次 I/O 请求的完整流程（以读文件为例）
&lt;/h4&gt;&lt;p&gt;假设一个用户程序执行 &lt;code&gt;read(fd, buffer, nbytes)&lt;/code&gt; 来读取文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户层：&lt;/strong&gt; &lt;code&gt;read()&lt;/code&gt; 库函数打包参数，并发起一个&lt;strong&gt;系统调用&lt;/strong&gt;陷入内核。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备无关层：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;内核的设备无关软件接收到请求。&lt;/li&gt;
&lt;li&gt;它首先检查内核的&lt;strong&gt;缓冲区缓存（Buffer Cache）&lt;/strong&gt;，看请求的数据是否已经存在。如果命中，则直接从缓存复制数据到用户 &lt;code&gt;buffer&lt;/code&gt;，请求结束。&lt;/li&gt;
&lt;li&gt;如果未命中，它会计算出需要从哪个设备的哪个物理位置读取数据。&lt;/li&gt;
&lt;li&gt;然后调用该设备的&lt;strong&gt;驱动程序&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备驱动层：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;设备驱动程序接收到请求（例如，“读取硬盘的第 12345 号逻辑块”）。&lt;/li&gt;
&lt;li&gt;它将这个抽象请求翻译成设备控制器能懂的命令，并把这些命令写入设备控制器的寄存器中。&lt;/li&gt;
&lt;li&gt;驱动程序随后&lt;strong&gt;阻塞&lt;/strong&gt;当前进程（将其放入等待队列），并让出 CPU。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件层：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;设备控制器开始工作，驱动硬盘马达，移动磁头，读取数据到其内部缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断处理层（返回过程）：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;当硬件完成数据读取后，它向 CPU 发送一个&lt;strong&gt;中断&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;CPU 捕获中断，并执行对应的&lt;strong&gt;中断处理程序&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;中断处理程序从设备控制器的缓冲区取出数据，放入内核的缓冲区缓存中。&lt;/li&gt;
&lt;li&gt;然后，它唤醒之前被阻塞的设备驱动进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回上层：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;被唤醒的设备驱动程序得知操作已完成。&lt;/li&gt;
&lt;li&gt;设备无关层将数据从内核的缓冲区缓存复制到用户程序指定的 &lt;code&gt;buffer&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;系统调用返回，用户程序从 &lt;code&gt;read()&lt;/code&gt; 调用处继续执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;层次&lt;/th&gt;
          &lt;th&gt;主要功能&lt;/th&gt;
          &lt;th&gt;例子&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;用户层软件&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;提供方便的编程接口，发起系统调用&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;printf()&lt;/code&gt;, &lt;code&gt;fopen()&lt;/code&gt; 等库函数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;设备无关OS软件&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;提供统一接口，设备命名，缓冲，错误报告，分配与释放&lt;/td&gt;
          &lt;td&gt;虚拟文件系统(VFS)，缓冲区缓存管理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;设备驱动程序&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;设置设备寄存器，检查设备状态，将抽象命令翻译为具体指令&lt;/td&gt;
          &lt;td&gt;显卡驱动，网卡驱动，磁盘驱动&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;中断处理程序&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;响应硬件中断，保存CPU状态，唤醒驱动程序&lt;/td&gt;
          &lt;td&gt;I/O 完成中断，时钟中断&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;硬件&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;执行具体的I/O操作&lt;/td&gt;
          &lt;td&gt;磁盘控制器，键盘控制器，物理设备本身&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;(Output by Gemini2.5pro)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;dma&#34;&gt;DMA
&lt;/h3&gt;&lt;p&gt;（DMA工作流程）&lt;/p&gt;
&lt;p&gt;DMA的出现就是为了将CPU从这种繁琐的搬运工作中解放出来。下面是DMA的工作流程，以及各层次扮演的角色：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;步骤&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;动作&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;负责的层次/组件&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;用户程序发起一个读操作（例如 &lt;code&gt;read()&lt;/code&gt; 系统调用）。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;用户层软件&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;系统调用陷入内核，请求被&lt;strong&gt;设备无关的OS软件&lt;/strong&gt;接收。它可能会检查缓存，如果未命中，则确定需要调用哪个驱动。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;设备无关的OS软件&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;设备驱动程序&lt;/strong&gt;被调用。这是最关键的一步，驱动程序开始&lt;strong&gt;配置DMA&lt;/strong&gt;：&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;1. 在内存中分配一个缓冲区（Buffer）。&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;2. 告诉&lt;strong&gt;DMA控制器&lt;/strong&gt;四件事：&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;   - &lt;strong&gt;源地址&lt;/strong&gt;：要从哪个设备寄存器读取数据。&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;   - &lt;strong&gt;目标地址&lt;/strong&gt;：数据要存放到内存的哪个位置（即缓冲区地址）。&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;   - &lt;strong&gt;传输长度&lt;/strong&gt;：要传输多少字节的数据。&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;   - &lt;strong&gt;传输方向&lt;/strong&gt;：是从设备读到内存，还是从内存写到设备。&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;3. 驱动程序向&lt;strong&gt;设备控制器&lt;/strong&gt;发出“开始传输数据给DMA”的命令。&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;4. 驱动程序将当前进程&lt;strong&gt;阻塞&lt;/strong&gt;，并让出CPU给其他进程使用。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;设备驱动程序&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;DMA控制器&lt;/strong&gt;完全接管数据传输。它直接与&lt;strong&gt;设备控制器&lt;/strong&gt;和&lt;strong&gt;内存总线&lt;/strong&gt;交互，将数据块从设备搬运到内存缓冲区，整个过程&lt;strong&gt;无需CPU干预&lt;/strong&gt;。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;硬件层 (DMA控制器 &amp;amp; 设备控制器)&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;数据传输完成后，&lt;strong&gt;DMA控制器&lt;/strong&gt;会向CPU发送一个&lt;strong&gt;中断信号&lt;/strong&gt;，通知任务已完成。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;硬件层 (DMA控制器)&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CPU捕获中断，并跳转到&lt;strong&gt;中断处理程序&lt;/strong&gt;执行。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;中断处理程序&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;中断处理程序分析中断来源，发现是DMA完成中断。于是它&lt;strong&gt;唤醒&lt;/strong&gt;之前被阻塞的&lt;strong&gt;设备驱动程序&lt;/strong&gt;对应的进程。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;中断处理程序&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;驱动程序被唤醒后，知道数据已经安全地存放在内存缓冲区里了。它进行一些清理工作，并将结果报告给上层。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;设备驱动程序&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;设备无关的OS软件&lt;/strong&gt;将数据从内核的缓冲区复制到用户程序的缓冲区，然后系统调用返回。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;设备无关的OS软件&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spooling&#34;&gt;SPOOLing
&lt;/h3&gt;&lt;h3 id=&#34;引导过程&#34;&gt;引导过程
&lt;/h3&gt;&lt;p&gt;好的，我们来详细、系统地讲解一下计算机的&lt;strong&gt;引导过程（Booting Process 或 Bootstrap）&lt;/strong&gt;。这个过程是指从按下电源按钮开始，到操作系统完全加载并准备好与用户交互为止的一系列复杂而有序的步骤。&lt;/p&gt;
&lt;p&gt;“Bootstrap”这个词源于一个古老的说法“pull oneself up by one&amp;rsquo;s bootstraps”（靠自己鞋带把自己拉起来），形象地比喻了计算机在没有任何外部帮助的情况下，如何一步步地“唤醒”自己。&lt;/p&gt;
&lt;p&gt;计算机的引导过程主要可以分为两种主流方式：传统的 &lt;strong&gt;BIOS-MBR&lt;/strong&gt; 方式和现代的 &lt;strong&gt;UEFI-GPT&lt;/strong&gt; 方式。我们分别来介绍。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;1-传统的-bios-mbr-引导过程&#34;&gt;1. 传统的 BIOS-MBR 引导过程
&lt;/h4&gt;&lt;p&gt;这是在2010年之前个人电脑最常见的引导方式。&lt;/p&gt;
&lt;h5 id=&#34;阶段一bios-阶段-固件执行&#34;&gt;&lt;strong&gt;阶段一：BIOS 阶段 (固件执行)&lt;/strong&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上电 (Power On)：&lt;/strong&gt; 当你按下电源键，主板上的电源管理单元（PSU）向CPU发送一个“Power Good”信号。CPU接收到信号后，开始执行存储在主板上一个ROM芯片（通常是EEPROM或Flash）中的程序。这个程序就是 &lt;strong&gt;BIOS (Basic Input/Output System)&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST (Power-On Self-Test - 开机自检)：&lt;/strong&gt; BIOS 首先会运行开机自检程序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;任务：&lt;/strong&gt; 检查计算机最核心的硬件是否工作正常，包括 CPU、内存（RAM）、显卡、键盘等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反馈：&lt;/strong&gt; 如果自检通过，通常会发出一声短促的“嘀”声。如果发现严重故障（如内存没插好），它会通过不同的蜂鸣声组合来报警。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始化硬件 (Initialization)：&lt;/strong&gt; BIOS 初始化一些关键的硬件设备，为后续加载操作系统做准备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择引导设备 (Boot Device Selection)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BIOS会根据预设的启动顺序（Boot Order，可在BIOS设置中修改），依次检查可引导的存储设备，如硬盘、U盘、光驱、网络等。&lt;/li&gt;
&lt;li&gt;它会检查每个设备的&lt;strong&gt;第一个扇区（512字节）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;加载 MBR (Master Boot Record - 主引导记录)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当BIOS找到一个可引导的硬盘时，它会检查这个硬盘的第一个扇区（也称为0号扇区）的最后两个字节是否为 &lt;code&gt;0x55AA&lt;/code&gt;（称为&lt;strong&gt;引导签名&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;如果签名正确，BIOS就会将这整个512字节的&lt;strong&gt;主引导记录（MBR）&lt;strong&gt;加载到内存的一个固定地址（通常是 &lt;code&gt;0x7C00&lt;/code&gt;）处，然后将CPU的控制权&lt;/strong&gt;转交&lt;/strong&gt;给这段刚刚加载的代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;到此，BIOS的任务彻底完成。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;阶段二mbr-与-bootloader-阶段-硬盘代码执行&#34;&gt;&lt;strong&gt;阶段二：MBR 与 Bootloader 阶段 (硬盘代码执行)&lt;/strong&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MBR 执行：&lt;/strong&gt; CPU 开始执行内存中 &lt;code&gt;0x7C00&lt;/code&gt; 地址处的MBR代码。MBR非常小，只有不到446字节的代码空间。它的任务很简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在MBR内部的分区表中，找到被标记为“&lt;strong&gt;活动&lt;/strong&gt;”的那个分区（只有一个）。&lt;/li&gt;
&lt;li&gt;将该活动分区的&lt;strong&gt;第一个扇区&lt;/strong&gt;——称为**分区引导记录（PBR - Partition Boot Record）**或卷引导记录（VBR）——加载到内存中。&lt;/li&gt;
&lt;li&gt;将CPU控制权转交给这段PBR代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bootloader 执行：&lt;/strong&gt; PBR中的代码通常是**操作系统加载器（Bootloader）**的第一部分。例如，Windows的 &lt;code&gt;bootmgr&lt;/code&gt; 或 Linux 的 &lt;code&gt;GRUB (GRand Unified Bootloader)&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于一个扇区太小，Bootloader通常会分为多个阶段。第一阶段的代码（在PBR中）非常简单，其唯一任务就是从文件系统中加载Bootloader的后续、更复杂的阶段代码。&lt;/li&gt;
&lt;li&gt;Bootloader的功能要强大得多，它能够识别和解析文件系统（如NTFS, ext4），因为它需要找到并加载操作系统的核心文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;阶段三操作系统内核加载&#34;&gt;&lt;strong&gt;阶段三：操作系统内核加载&lt;/strong&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;加载内核 (Kernel Loading)：&lt;/strong&gt; Bootloader（如GRUB）会根据其配置文件（如 &lt;code&gt;grub.cfg&lt;/code&gt;）中的指令，找到操作系统内核文件（如Windows的 &lt;code&gt;ntoskrnl.exe&lt;/code&gt; 或Linux的 &lt;code&gt;vmlinuz&lt;/code&gt;）和初始内存盘（&lt;code&gt;initrd.img&lt;/code&gt;）等，并将它们加载到内存中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启动内核 (Kernel Initialization)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bootloader将CPU控制权最终交给加载到内存中的&lt;strong&gt;操作系统内核&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;内核开始执行，它会：
&lt;ul&gt;
&lt;li&gt;初始化更高级的硬件驱动程序。&lt;/li&gt;
&lt;li&gt;启动核心的系统进程（如Windows的 &lt;code&gt;System&lt;/code&gt;进程，Linux的 &lt;code&gt;systemd&lt;/code&gt;或 &lt;code&gt;init&lt;/code&gt;进程）。&lt;/li&gt;
&lt;li&gt;挂载根文件系统。&lt;/li&gt;
&lt;li&gt;启动用户界面的相关服务，最终显示登录界面或桌面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;至此，整个引导过程完成。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-现代的-uefi-gpt-引导过程&#34;&gt;2. 现代的 UEFI-GPT 引导过程
&lt;/h4&gt;&lt;p&gt;UEFI (Unified Extensible Firmware Interface) 是BIOS的现代替代品，它克服了BIOS的许多限制。GPT (GUID Partition Table) 是MBR的替代分区方案。&lt;/p&gt;
&lt;p&gt;UEFI的引导过程更直接、更灵活、更安全。&lt;/p&gt;
&lt;h5 id=&#34;阶段一uefi-固件执行&#34;&gt;&lt;strong&gt;阶段一：UEFI 固件执行&lt;/strong&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上电与 SEC (Security) 阶段：&lt;/strong&gt; 与BIOS类似，系统上电，CPU开始执行UEFI固件代码。首先是安全验证阶段，为后续执行建立一个可信的环境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PEI (Pre-EFI Initialization) 阶段：&lt;/strong&gt; 类似于POST，进行核心硬件（CPU、芯片组、内存）的初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DXE (Driver Execution Environment) 阶段：&lt;/strong&gt; 这是UEFI的核心。UEFI固件会加载和执行大量的&lt;strong&gt;UEFI驱动程序&lt;/strong&gt;。这使得UEFI在引导阶段就能识别复杂硬件，并能识别GPT分区表和FAT32等文件系统。&lt;strong&gt;这是UEFI与BIOS最本质的区别&lt;/strong&gt;——BIOS不懂文件系统，而UEFI懂。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BDS (Boot Device Select) 阶段：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UEFI固件会读取存储在&lt;strong&gt;NVRAM&lt;/strong&gt;（一种非易失性RAM）中的启动项配置。&lt;/li&gt;
&lt;li&gt;它不再是盲目地去读设备的第一个扇区。相反，它直接去访问硬盘上一个特殊的、必需的、格式为FAT32的小分区，称为 &lt;strong&gt;EFI系统分区 (ESP - EFI System Partition)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;UEFI会根据启动项配置，在ESP分区中查找并执行指定的&lt;strong&gt;引导加载程序文件&lt;/strong&gt;。这个文件是一个标准的 &lt;code&gt;.efi&lt;/code&gt; 可执行文件，例如 &lt;code&gt;\EFI\Microsoft\Boot\bootmgfw.efi&lt;/code&gt; (Windows) 或 &lt;code&gt;\EFI\ubuntu\shimx64.efi&lt;/code&gt; (Ubuntu)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;阶段二操作系统加载&#34;&gt;&lt;strong&gt;阶段二：操作系统加载&lt;/strong&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;执行EFI引导程序：&lt;/strong&gt; UEFI固件直接将CPU控制权交给从ESP分区加载的 &lt;code&gt;.efi&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加载操作系统：&lt;/strong&gt; 这个 &lt;code&gt;.efi&lt;/code&gt;引导程序（如Windows Boot Manager或GRUB2）接下来负责加载操作系统的内核和相关文件，并将控制权交给内核。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核初始化：&lt;/strong&gt; 后续步骤与BIOS-MBR方式基本相同，内核接管系统，完成初始化，并启动用户界面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;bios-mbr-vs-uefi-gpt-对比&#34;&gt;BIOS-MBR vs. UEFI-GPT 对比
&lt;/h4&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特性&lt;/th&gt;
          &lt;th&gt;BIOS-MBR&lt;/th&gt;
          &lt;th&gt;UEFI-GPT&lt;/th&gt;
          &lt;th&gt;优势&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;分区方案&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;MBR (Master Boot Record)&lt;/td&gt;
          &lt;td&gt;GPT (GUID Partition Table)&lt;/td&gt;
          &lt;td&gt;GPT支持超过2TB的硬盘和最多128个主分区，更可靠。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;引导方式&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;读设备第一个扇区，链式加载&lt;/td&gt;
          &lt;td&gt;直接从ESP分区加载 &lt;code&gt;.efi&lt;/code&gt; 文件&lt;/td&gt;
          &lt;td&gt;UEFI更直接、更快速，因为它认识文件系统，无需链式跳转。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;代码架构&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;16位汇编，实模式&lt;/td&gt;
          &lt;td&gt;32/64位C语言，保护模式&lt;/td&gt;
          &lt;td&gt;UEFI像一个微型操作系统，功能强大，界面友好（支持鼠标）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;无原生安全机制&lt;/td&gt;
          &lt;td&gt;支持&lt;strong&gt;安全启动 (Secure Boot)&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Secure Boot可以防止未经签名的恶意引导程序（如Bootkit）加载。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;兼容性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;兼容性好，但技术老旧&lt;/td&gt;
          &lt;td&gt;现代主流标准，但老旧系统可能不支持&lt;/td&gt;
          &lt;td&gt;UEFI是未来趋势。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总而言之，计算机的引导过程是一个从固化在硬件中的最简单代码开始，一步步加载更复杂软件，最终将整个庞大的操作系统“唤醒”并交出控制权的接力过程。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
