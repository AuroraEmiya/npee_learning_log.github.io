<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>数学 on shyの考研日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/tags/%E6%95%B0%E5%AD%A6/</link>
        <description>Recent content in 数学 on shyの考研日志</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 28 Jul 2025 19:40:10 +0800</lastBuildDate><atom:link href="http://localhost:1313/npee_learning_log.github.io/tags/%E6%95%B0%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>0728学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0728/</link>
        <pubDate>Mon, 28 Jul 2025 19:40:10 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0728/</guid>
        <description>&lt;h2 id=&#34;数学-微分学习题&#34;&gt;数学-微分学习题
&lt;/h2&gt;&lt;h3 id=&#34;错题必刷榜&#34;&gt;错题必刷榜
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设函数$f(x)$连续，给出下列条件&lt;/p&gt;
&lt;p&gt;(A) $\lim\limits_{x\to 0}{\dfrac{|f(x)|-f(0)}{x}}$存在&lt;/p&gt;
&lt;p&gt;(B) $\lim\limits_{x\to 0}{\dfrac{f(x)-|f(0)|}{x}}$存在&lt;/p&gt;
&lt;p&gt;(C) $\lim\limits_{x\to 0}{\dfrac{|f(x)|}{x}}$存在&lt;/p&gt;
&lt;p&gt;(D) $\lim\limits_{x\to 0}{\dfrac{|f(x)|-|f(0)|}{x}}$存在&lt;/p&gt;
&lt;p&gt;其中能得到&amp;quot;$f(x)$在$x=0$处可导&amp;quot;的条件为&lt;/p&gt;
&lt;p&gt;(C)$\lim\limits_{x\to0}\dfrac{|f(x)|}{x}=0\Rightarrow\forall \epsilon&amp;gt;0,\left|\dfrac{|f(x)|}{x}-0\right|&amp;lt;\epsilon\Rightarrow\lim\limits_{x\to0}\left|\dfrac{f(x)}{x}\right|=0\Rightarrow f&amp;rsquo;(0)=0$&lt;/p&gt;
&lt;p&gt;(A)$f(0)=\lim\limits_{x\to0}{|f(x)|}\geq0\Rightarrow$if $f(0)=0$,the same as (C);else if $f(0)&amp;gt;0$，保号性使得$\exists \delta&amp;gt;0,f(x)&amp;gt;0,x\in(-\delta,\delta)$&lt;/p&gt;
&lt;p&gt;(B)$f(0)=\lim\limits_{x\to0}{f(x)}=|f(0)|\geq0\Rightarrow$if $f(0)=0$,显然成立;else if $f(0)&amp;gt;0$，也显然成立。&lt;/p&gt;
&lt;p&gt;(D)if $f(0)=0$,the same as (C);else 保号性使得两个绝对值内部同号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;故四个全符合。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;一些重要的泰勒展开式&#34;&gt;一些重要的泰勒展开式
&lt;/h3&gt;$$
\begin{align*}
\text{e}^x &amp;= \sum_{n=0}^{\infty} \frac{x^n}{n!} 
            = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \cdots \\[1ex]
\sin x     &amp;= \sum_{n=0}^{\infty} (-1)^n \frac{x^{2n+1}}{(2n+1)!} 
            = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + \cdots \\[1ex]
\cos x     &amp;= \sum_{n=0}^{\infty} (-1)^n \frac{x^{2n}}{(2n)!} 
            = 1 - \frac{x^2}{2!} + \frac{x^4}{4!} - \frac{x^6}{6!} + \cdots \\[1ex]
\ln(1+x)   &amp;= \sum_{n=1}^{\infty} (-1)^{n+1} \frac{x^n}{n} 
            = x - \frac{x^2}{2} + \frac{x^3}{3} - \frac{x^4}{4} + \cdots \quad (|x| &lt; 1) \\[1ex]
\frac{1}{1 - x} &amp;= \sum_{n=0}^{\infty} x^n 
                 = 1 + x + x^2 + x^3 + \cdots \quad (|x| &lt; 1) \\[1ex]
\frac{1}{1 + x} &amp;= \sum_{n=0}^{\infty} (-1)^n x^n 
                 = 1 - x + x^2 - x^3 + \cdots \quad (|x| &lt; 1) \\[1ex]
\arctan x  &amp;= \sum_{n=0}^{\infty} (-1)^n \frac{x^{2n+1}}{2n+1} 
            = x - \frac{x^3}{3} + \frac{x^5}{5} - \frac{x^7}{7} + \cdots \quad (|x| \leq 1)
\end{align*}
$$&lt;h3 id=&#34;常用高阶导数&#34;&gt;常用高阶导数
&lt;/h3&gt;$$
\begin{align*}
\left(e^{ax+b}\right)^{(n)}&amp;=a^ne^{ax+b}\\
[\sin{(ax+b)}]^{(n)}&amp;=a^n\sin{\left(ax+b+\dfrac{n\pi}{2}\right)}\\
[\cos{(ax+b)}]^{(n)}&amp;=a^n\cos{\left(ax+b+\dfrac{n\pi}{2}\right)}\\
[\ln(ax+b)]^{(n)}&amp;=(-1)^{n-1}a^n\frac{(n-1)!}{(ax+b)^{n}}\\
(\frac{1}{ax+b})^{(n)}&amp;=(-1)^na^n\frac{n!}{(ax+b)^{n+1}}
\end{align*}
$$</description>
        </item>
        <item>
        <title>0727学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0727/</link>
        <pubDate>Sun, 27 Jul 2025 18:55:08 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0727/</guid>
        <description>&lt;h2 id=&#34;数学-一元函数微分学&#34;&gt;数学-一元函数微分学
&lt;/h2&gt;&lt;h3 id=&#34;一元函数微分学的概念&#34;&gt;一元函数微分学的概念
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;导数&lt;/p&gt;
$$
   f&#39;(x_0) = \lim\limits_{x\to x_0}\frac{\Delta y}{\Delta x} = \lim\limits_{\Delta x\to 0}\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导数的几何意义&lt;/p&gt;
$$
   \begin{align*}
   	\text{切线方程：}y-y_0&amp;=f&#39;(x_0)(x-x_0) \\
   	\text{法线方程：}y-y_0&amp;=-\frac{1}{f&#39;(x_0)}(x-x_0),(f&#39;(x_0)\neq0)
   \end{align*}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高阶导数&lt;/p&gt;
$$
   f^{(n)}(x_0) = \lim\limits_{\Delta x\to x_0}\frac{f^{(n-1)}(x)-f^{(n-1)}(x_0)}{x-x_0}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微分概念&lt;/p&gt;
&lt;p&gt;设函数$y=f(x)$在点$x_0$的某邻域内有定义，且$x_0+\Delta x$在该邻域内，对于函数增量&lt;/p&gt;
$$
   \Delta y = f(x_0+\Delta x)- f(x_0)
   $$&lt;p&gt;若存在与$\Delta x$无关的常数$A$，使得&lt;/p&gt;
$$
   \Delta y = A\Delta x + o(\Delta x)
   $$&lt;p&gt;则称$f(x)$在$x=x_0$处可微，且$A\Delta x$为线性主部也叫做$f(x) $在点$x_0$处的微分，记为&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
$$
\left.dy\right|_{x=x_0}A\Delta x = f&#39;(x_0)\mathbf{d}x
$$&lt;h3 id=&#34;一元函数微分学的计算&#34;&gt;一元函数微分学的计算
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本求导公式&lt;/p&gt;
$$
   \begin{align*}
   	\left(x^{\alpha}\right)&#39; &amp;= \alpha x^{\alpha-1}\\
   	\left(a^x\right)&#39; &amp;= a^x\ln{a},(a&gt;0,a\neq 1)\\
   	\left(e^x\right)&#39; &amp;=e^x\\
   		\left(\log_ax\right)&#39; &amp;=\frac{1}{x\ln a},(a&gt;0,a\neq 1)\\
   	\left(\ln|x|\right)&#39; &amp;=\frac{1}{x}\\
   	\left(\sin x \right)&#39; &amp;=\cos x \\
   	\left(\cos x\right)&#39; &amp;=-\sin x \\
   	\left(\arcsin x\right)&#39; &amp;=\frac{1}{\sqrt{1-x^2}}\\
   	\left(\arccos x\right)&#39; &amp;=-\frac{1}{\sqrt{1-x^2}}\\
   	\left(\tan x\right)&#39; &amp;=\sec^2 x\\
   	\left(\cot x \right)&#39; &amp;=-\csc^2 x\\
   	\left(\arctan x\right)&#39; &amp;=\frac{1}{1+x^2}\\
   	\left(\text{arccot} x\right)&#39; &amp;=-\frac{1}{1+x^2}\\
   	\left(\sec x\right)&#39; &amp;=\sec x\tan x\\
   	\left(\csc x\right)&#39; &amp;=-\csc x \cot x\\
   	\left(\ln(x+\sqrt{x^2+1})\right)&#39; &amp;=\frac{1}{x^2+1}\\
   	\left(\ln(x+\sqrt{x^2-1})\right)&#39; &amp;=\frac{1}{x^2-1}\\
   \end{align*}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四则运算&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;和差&lt;/li&gt;
&lt;li&gt;积&lt;/li&gt;
&lt;li&gt;商&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复合函数的导数与微分形式的不变性&lt;/p&gt;
$$
   \mathbf{d}f(u)=f&#39;(u)\mathbf{d}u
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分段函数的导数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在分段点使用导数的定义&lt;/li&gt;
&lt;li&gt;在非分段点使用导数公式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反函数的导数&lt;/p&gt;
&lt;p&gt;设$y=f(x)$单调、可导函数，且$f&amp;rsquo;(x)\neq 0$,则存在反函数$x=\varphi(y)$，且$\frac{dx}{dy} = \frac{1}{\frac{dy}{dx}}$&lt;/p&gt;
$$
   \varphi&#39;(x) =\dfrac{1}{ \dfrac{\mathbf{d} arc\varphi(\varphi(x)) }{\mathbf{d}\varphi(x)}}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐函数求导法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数方程所确定的函数的导数&lt;/p&gt;
$$
   \begin{align}
   \begin{cases}
   x&amp;= \varphi(t)\\
   y&amp;= \omega(t)\\
   \end{cases}\\
   \frac{dy}{dx} = \dfrac{\frac{dy}{dt}}{\frac{dx}{dt}} = \dfrac{\omega&#39;(t)}{\varphi&#39;(t)}
   \end{align}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对数求导法
&lt;/p&gt;
$$
   \begin{align*}
   \ln y &amp;= \ln f(x)\\
   y&#39; &amp;= \frac{yf&#39;(x)}{f(x)}\\
   \end{align*}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;幂指数求导法
&lt;/p&gt;
$$
   u(x)^{v(x)} = e^{v(x)\ln u(x)}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高阶导数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;归纳法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;莱布尼茨公式
&lt;/p&gt;
$$
       \begin{align*}
       (u\pm v)^{(n)}&amp;= u^{(n)}\pm v^{(n)}\\
       (u v)^{(n)}&amp;= \sum\limits_{k=0}^{n}C_{n}^{k}u^{(k)}v^{(n-k)}
       \end{align*}
       $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;泰勒展开式，利用展开唯一性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号：第三、四讲&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0723学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0723/</link>
        <pubDate>Wed, 23 Jul 2025 23:53:15 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0723/</guid>
        <description>&lt;h2 id=&#34;数学-1000题&#34;&gt;数学-1000题
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;对于$x_{n+1}=f(x_n)$的数列极限的判定的过程
&lt;ol&gt;
&lt;li&gt;单调有界&lt;/li&gt;
&lt;li&gt;拉格朗日中值定理&lt;/li&gt;
&lt;li&gt;放缩&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;对于行列式的计算的方法
&lt;ol&gt;
&lt;li&gt;上下三角行列式&lt;/li&gt;
&lt;li&gt;反三角行列式&lt;/li&gt;
&lt;li&gt;范德蒙德行列式&lt;/li&gt;
&lt;li&gt;递推&lt;/li&gt;
&lt;li&gt;归纳&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;英语-不背单词&#34;&gt;英语-不背单词
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;twist&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ultimate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strike&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;crucial&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;subordinate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;anguish&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;subtle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;constitute&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;suffice&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eminent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prudent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;courtesy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;harsh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indispensable&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0722学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0722/</link>
        <pubDate>Tue, 22 Jul 2025 23:31:50 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0722/</guid>
        <description>&lt;h2 id=&#34;操作系统--la-pa-ca&#34;&gt;操作系统- (LA-PA-CA)
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;带快表的两级系统的地址翻译过程
&lt;ol&gt;
&lt;li&gt;从逻辑地址映射到物理地址（虚拟存储器）&lt;/li&gt;
&lt;li&gt;从物理地址映射到Cache地址（主存-Cache系统）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文件和文件系统
&lt;ol&gt;
&lt;li&gt;构成文件的基本单位&lt;/li&gt;
&lt;li&gt;文件的定义&lt;/li&gt;
&lt;li&gt;文件属性&lt;/li&gt;
&lt;li&gt;文件的基本操作&lt;/li&gt;
&lt;li&gt;文件的打开和关闭的操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文件的逻辑结构&lt;/li&gt;
&lt;li&gt;目录管理
&lt;ol&gt;
&lt;li&gt;目录的概念&lt;/li&gt;
&lt;li&gt;文件控制块和索引节点&lt;/li&gt;
&lt;li&gt;目录结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;英语-vocabularybuilder&#34;&gt;英语-VocabularyBuilder
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;CRIM,comes from the Latin words for &amp;ldquo;fault or crime&amp;rdquo; or &amp;ldquo;accusation.&amp;rdquo;
&lt;ol&gt;
&lt;li&gt;criminology&lt;/li&gt;
&lt;li&gt;decriminalize&lt;/li&gt;
&lt;li&gt;incriminate&lt;/li&gt;
&lt;li&gt;recrimination&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;PROB,comes from the Latin words for  &amp;ldquo;prove or proof &amp;ldquo;and &amp;ldquo;honesy or integrity.&amp;rdquo;
&lt;ol&gt;
&lt;li&gt;approbation&lt;/li&gt;
&lt;li&gt;probate&lt;/li&gt;
&lt;li&gt;probity&lt;/li&gt;
&lt;li&gt;reprobate&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;GRAV, comes from the Latin word meaning &amp;ldquo;heavy ,weighty ,serious&amp;rdquo;
&lt;ol&gt;
&lt;li&gt;grave&lt;/li&gt;
&lt;li&gt;gravitas&lt;/li&gt;
&lt;li&gt;gravitate&lt;/li&gt;
&lt;li&gt;aggravate&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;LEV,comes from the Latin adjective $levis$,meaning &amp;ldquo;light&amp;rdquo;,and the verb $levare$,meaning &amp;ldquo;to raise or lighten.&amp;rdquo;
&lt;ol&gt;
&lt;li&gt;alleviate&lt;/li&gt;
&lt;li&gt;elevation&lt;/li&gt;
&lt;li&gt;contilever&lt;/li&gt;
&lt;li&gt;levity&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数学-行列式&#34;&gt;数学-行列式
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;行列式的本质定义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式的性质&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h6 id=&#34;aat&#34;&gt;$|A|=|A^T|$
&lt;/h6&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若行列式中某行(列)元素全为零，则行列式为零&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若行列式中某行(列) 元素有公因子$k\neq0$，则$k$可提到行列式外面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式中某行(列)元素均是两个数之和，则可拆成两个行列式之和&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式中两行(列)互换，行列式变号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式中的两行(列)元素相等或对应成比例，则行列式为零&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式的逆序法定义
&lt;/p&gt;
$$
   \begin{vmatrix}
   a_{11} &amp; a_{12} &amp; \cdots&amp;a_{1n}\\
   a_{21} &amp; a_{22} &amp; \cdots&amp;a_{2n}\\
   \vdots &amp; \vdots &amp; &amp;\vdots\\
   a_{n1} &amp; a_{n2} &amp; \cdots&amp;a_{nn}\\
   \end{vmatrix}=\sum\limits_{j_1j_2\cdots j_n}{(-1)^{\tau(j_1j_2\cdots j_n)}}a_{j_1}a_{j_2}\cdots a_{j_n}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式的展开定理
&lt;/p&gt;
$$
   |A| = \sum\limits_{j=1}^na_{ij}A_{ij}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;几个重要的行列式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主对角线行列式(上(下)三角形行列式)
&lt;/p&gt;
$$
      \begin{vmatrix}
      a_{11} &amp; a_{12} &amp; \cdots&amp;a_{1n}\\
      0 &amp; a_{22} &amp; \cdots&amp;a_{2n}\\
      \vdots &amp; \vdots &amp; &amp;\vdots\\
      0 &amp; 0 &amp; \cdots&amp;a_{nn}\\
      \end{vmatrix}=\begin{vmatrix}
      a_{11} &amp; 0 &amp; \cdots&amp;0\\
      a_{21} &amp; a_{22} &amp; \cdots&amp;0\\
      \vdots &amp; \vdots &amp; &amp;\vdots\\
      a_{n1} &amp; a_{n2} &amp; \cdots&amp;a_{nn}\\
      \end{vmatrix}=\begin{vmatrix}
      a_{11} &amp; 0 &amp; \cdots&amp;0\\
      0 &amp; a_{22} &amp; \cdots&amp;0\\
      \vdots &amp; \vdots &amp; &amp;\vdots\\
      0 &amp; 0 &amp; \cdots&amp;a_{nn}\\
      \end{vmatrix}=\prod\limits_{i=1}^n a_{ii}
      $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;副对角线行列式
&lt;/p&gt;
$$
      \begin{vmatrix}
      a_{11} &amp; \cdots &amp; a_{1,n-1}&amp;a_{1n}\\
      a_{21} &amp; \cdots &amp; a_{2,n-1}&amp;0\\
      \vdots &amp;  &amp;\vdots &amp;\vdots\\
      a_{n1} &amp;\cdots&amp;0 &amp;0\\
      \end{vmatrix}=\begin{vmatrix}
      0 &amp; \cdots &amp; 0&amp;a_{1n}\\
      0 &amp;\cdots &amp; a_{2,n-1}&amp;a_{2n}\\
      \vdots &amp; &amp; \vdots &amp;\vdots\\
      a_{n1} &amp;\cdots &amp; a_{n,n-1}&amp;a_{nn}\\
      \end{vmatrix}=\begin{vmatrix}
      0 &amp; \cdots &amp; 0&amp;a_{1n}\\
      0 &amp; \cdots &amp; a_{2,n-1}&amp;0\\
      \vdots &amp; &amp;  \vdots&amp;\vdots\\
      a_{n1} &amp; \cdots &amp; 0&amp;0\\
      \end{vmatrix}=(-1)^{\frac{n(n-1)}{2}}\prod\limits_{i=1}^n a_{i(n+1-i)}
      $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拉普拉斯展开式($A\in R^{m\times m},B\in R^{n\times n}$)
&lt;/p&gt;
$$
      \begin{vmatrix}
      A&amp;O\\
      O&amp;B
      \end{vmatrix}=\begin{vmatrix}
      A&amp;C\\
      O&amp;B
      \end{vmatrix}=\begin{vmatrix}
      A&amp;O\\
      C&amp;B
      \end{vmatrix}=|A||B|
      $$$$
      \begin{vmatrix}
      O&amp;A\\
      B&amp;O
      \end{vmatrix}=\begin{vmatrix}
      C&amp;A\\
      B&amp;O
      \end{vmatrix}=\begin{vmatrix}
      O&amp;A\\
      B&amp;C
      \end{vmatrix}=(-1)^{mn}|A||B|
      $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范德蒙德行列式,$(1\leq i &amp;lt;j\leq n)$
&lt;/p&gt;
$$
      \begin{vmatrix}
      1&amp;1&amp;\cdots&amp;1\\
      x_1&amp;x_2&amp;\cdots&amp;x_n\\
      x_1^2&amp;x_2^2&amp;\cdots&amp;x_n^2\\
      \vdots&amp;\vdots&amp;&amp;\vdots\\
      x_1^n&amp;x_2^n&amp;\cdots&amp;x_n^n
      \end{vmatrix}=\prod\limits_{i,j}{(x_i-x_j)}
      $$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0719学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0719/</link>
        <pubDate>Sat, 19 Jul 2025 22:41:19 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0719/</guid>
        <description>&lt;h2 id=&#34;数学-是不动点的味道&#34;&gt;数学-是不动点的味道
&lt;/h2&gt;&lt;h3 id=&#34;数列的极限&#34;&gt;数列的极限
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;概念&lt;/li&gt;
&lt;li&gt;数列极限的定义&lt;/li&gt;
&lt;li&gt;数列收敛的性质
&lt;ul&gt;
&lt;li&gt;唯一性&lt;/li&gt;
&lt;li&gt;有界性&lt;/li&gt;
&lt;li&gt;保号性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;海涅定理（归结原则）&lt;/li&gt;
&lt;li&gt;夹逼准则&lt;/li&gt;
&lt;li&gt;单调有界准则&lt;/li&gt;
&lt;li&gt;${x_n}$收敛于$a$的速度问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据结构-前序中序后序blablabla&#34;&gt;数据结构-前序中序后序blablabla
&lt;/h2&gt;&lt;h3 id=&#34;树的性质&#34;&gt;树的性质
&lt;/h3&gt;&lt;p&gt;let $T_m$ denote a tree with degree $m$.&lt;/p&gt;
&lt;p&gt;let $D(n)$ denote the out degree of the node $x$ in the tree $T_m$.&lt;/p&gt;
&lt;p&gt;let $n_i$ denote the number of notes with degree $i$.&lt;/p&gt;
&lt;p&gt;let $H$ denote the depth/height of the tree $T_m$.&lt;/p&gt;
&lt;p&gt;let $N$ denote the total number of nodes in tree.$N=\sum\limits_{i=0}^mn_i$.&lt;/p&gt;
&lt;p&gt;let $N_i$ denote the number of nodes at layer $i\in \mathcal{N^*}$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$N=1 + \sum\limits_{i=1}^mi\cdot n_i$.&lt;/li&gt;
&lt;li&gt;$n_0 =1 + \sum\limits_{i=2}^m(i-1)\cdot n_i$&lt;/li&gt;
&lt;li&gt;$N_i\leq m^{i-1}$ if not an &lt;strong&gt;empty tree&lt;/strong&gt; with degree m.&lt;/li&gt;
&lt;li&gt;$N\leq \frac{m^H-1}{m-1}$&lt;/li&gt;
&lt;li&gt;$H\geq \lceil\log_{m}\left((N(m-1))+1\right)\rceil$&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二叉树&#34;&gt;二叉树
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;二叉树的性质
&lt;ol&gt;
&lt;li&gt;$N_i\leq 2^{i-1}$ if not an &lt;strong&gt;empty tree&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;$N\leq 2^H-1$&lt;/li&gt;
&lt;li&gt;$n_0 =1 + n_2$&lt;/li&gt;
&lt;li&gt;$H\geq \lceil\log_{2}(N+1)\rceil$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完全二叉树&lt;/li&gt;
&lt;li&gt;满二叉树&lt;/li&gt;
&lt;li&gt;二叉树的构造
&lt;ol&gt;
&lt;li&gt;前序加中序&lt;/li&gt;
&lt;li&gt;后序加中序&lt;/li&gt;
&lt;li&gt;层次加中序&lt;/li&gt;
&lt;li&gt;前序加树形结构&lt;/li&gt;
&lt;li&gt;中序加树形结构&lt;/li&gt;
&lt;li&gt;后序加树形结构&lt;/li&gt;
&lt;li&gt;层次加树形结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;二叉树的遍历
&lt;ol&gt;
&lt;li&gt;前序&lt;/li&gt;
&lt;li&gt;中序&lt;/li&gt;
&lt;li&gt;后序&lt;/li&gt;
&lt;li&gt;层次&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;操作系统-nice-of-linux&#34;&gt;操作系统-nice of linux
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Multi-Level Feedback Queue (cpu-sched-mlfq)
&lt;ol&gt;
&lt;li&gt;Basic Rules
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rule 1&lt;/strong&gt;:If Priority(A) $&amp;gt;$ Priority(B), A runs (B doesn’t).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rule 2&lt;/strong&gt;:If Priority(A) $=$ Priority(B), A &amp;amp; B run in RR(Round Robin).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;However&lt;/strong&gt;: Those with low Priority will get starved!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Therefore&lt;/strong&gt;: We need to change the Priority over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To change Priority
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rule 3&lt;/strong&gt;: When a job enters the system, it is placed at the highest priority (the topmost queue).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rule 4a&lt;/strong&gt;: If a job uses up its allotment while running, its priority is reduced (i.e., it moves down one queue).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rule 4b&lt;/strong&gt;: If a job gives up the CPU (for example, by performing an I/O operation) before the allotment is up, it stays at the same priority level (i.e., its allotment is reset).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;However&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;Those with long cpu-time will get starved as them move down to the lowest!&lt;/li&gt;
&lt;li&gt;Those with smart heart will game the scheduler as they I/O at the last ms of the allotment.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Therefore&lt;/strong&gt;: We need to change &lt;strong&gt;rule4a,b&lt;/strong&gt; and boost periodically.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Priority Boost
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rule 5&lt;/strong&gt;: After some time period S, move all the jobs in the system to the topmost queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Better Accounting
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rule 4&lt;/strong&gt;: Once a job uses up its time allotment at a given level (re gardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Proportional share(cpu-sched-lottery)
&lt;ol&gt;
&lt;li&gt;Basic Concept: Tickets Represent Your Share&lt;/li&gt;
&lt;li&gt;Stride Scheduling&lt;/li&gt;
&lt;li&gt;The Linux Completely Fair Scheduler (CFS)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0717学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0717/</link>
        <pubDate>Thu, 17 Jul 2025 22:04:43 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0717/</guid>
        <description>&lt;h2 id=&#34;数学-纸上得来终觉浅&#34;&gt;数学-纸上得来终觉浅
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;函数极限的定义($\epsilon,\delta$语言)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数极限的性质&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;唯一性&lt;/li&gt;
&lt;li&gt;局部有界性&lt;/li&gt;
&lt;li&gt;局部保号性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无穷小(let $\alpha$ be infinitesimal)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;性质
&lt;ul&gt;
&lt;li&gt;$\sum\limits_{k}^{N}{\alpha_k}=\alpha,(N \text{ is finite})$&lt;/li&gt;
&lt;li&gt;$\alpha&amp;rsquo;\cdot f(x)=\alpha $,where $f(x)$ is limited at the interval&lt;/li&gt;
&lt;li&gt;$\prod\limits_{k}^{N}{\alpha_k}=\alpha,(N \text{ is finite})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比阶($\lim\alpha(x)=0$,$\lim\beta(x)=0$,$\beta(x)\neq0$)
&lt;ul&gt;
&lt;li&gt;$\alpha(x)$是$\beta(x)$的高阶无穷小$\Leftrightarrow\lim{\frac{\alpha(x)}{\beta(x)}}=0$&lt;/li&gt;
&lt;li&gt;$\alpha(x)$是$\beta(x)$的低阶无穷小$\Leftrightarrow\lim{\frac{\alpha(x)}{\beta(x)}}=\infty$&lt;/li&gt;
&lt;li&gt;$\alpha(x)$是$\beta(x)$的同阶无穷小$\Leftrightarrow\lim{\frac{\alpha(x)}{\beta(x)}}=c,(\text{constant }c\neq 0)$&lt;/li&gt;
&lt;li&gt;$\alpha(x)$是$\beta(x)$的等价无穷小$\Leftrightarrow\lim{\frac{\alpha(x)}{\beta(x)}}=1$&lt;/li&gt;
&lt;li&gt;$\alpha(x)$是$\beta(x)$的$k$阶无穷小$\Leftrightarrow\lim{\frac{\alpha(x)}{\beta^k(x)}}=0$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;极限的运算&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;四则运算&lt;/li&gt;
&lt;li&gt;洛必达法则&lt;/li&gt;
&lt;li&gt;泰勒展开&lt;/li&gt;
&lt;li&gt;夹逼准则&lt;/li&gt;
&lt;li&gt;七种未定式：$\frac{0}{0},\frac{\infty}{\infty},0\cdot\infty,\infty-\infty,\infty^0,0^0,1^{\infty}$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数的连续和两类间断点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超实数(&lt;a class=&#34;link&#34; href=&#34;https://people.math.wisc.edu/~hkeisler/keislercalc-06-18-25.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hyperreal number&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;操作系统-three-easy-piece&#34;&gt;操作系统-&lt;a class=&#34;link&#34; href=&#34;https://pages.cs.wisc.edu/~remzi/OSTEP/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;three easy piece&lt;/a&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;cpu-intro
&lt;ul&gt;
&lt;li&gt;the Process&lt;/li&gt;
&lt;li&gt;Process API
&lt;ol&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;Destory&lt;/li&gt;
&lt;li&gt;Wait&lt;/li&gt;
&lt;li&gt;Miscellaneous Control&lt;/li&gt;
&lt;li&gt;Status&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Process status&lt;/li&gt;
&lt;li&gt;Proc data structure:(PCB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cpu-api
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawn()&lt;/code&gt;*&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;cpu-mechanisms
&lt;ol&gt;
&lt;li&gt;from Directed Execution to Limited Directed Execution:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;user mode and kernel mode&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;system call&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;switch between Processes,Os need to retain CPU from process
&lt;ul&gt;
&lt;li&gt;A Cooperative Approach: Wait For System Calls&lt;/li&gt;
&lt;li&gt;A Non-Cooperative Approach: The OS Takes Control&lt;/li&gt;
&lt;li&gt;reboot (x&lt;/li&gt;
&lt;li&gt;timer interrupt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Saving and Restoring Context&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;cpu-sched(reading)&lt;/li&gt;
&lt;li&gt;cpu-sched-mlfq(reading)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据结构-排好队一个一个fifo&#34;&gt;数据结构-排好队一个一个FIFO
&lt;/h2&gt;&lt;h3 id=&#34;队列&#34;&gt;队列
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;顺序队列的性质和操作&lt;/li&gt;
&lt;li&gt;循环队列的性质和操作&lt;/li&gt;
&lt;li&gt;链式队列的性质和操作&lt;/li&gt;
&lt;li&gt;双端队列&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号018-027&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0714学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0714/</link>
        <pubDate>Mon, 14 Jul 2025 21:15:02 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0714/</guid>
        <description>&lt;h2 id=&#34;操作系统-这什么查一下这什么查一下&#34;&gt;操作系统-这什么查一下这什么查一下
&lt;/h2&gt;&lt;h3 id=&#34;经典同步问题&#34;&gt;经典同步问题
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;生产者消费者问题&lt;/li&gt;
&lt;li&gt;哲学家进餐问题&lt;/li&gt;
&lt;li&gt;读者-写者问题&lt;/li&gt;
&lt;li&gt;理发师问题&lt;/li&gt;
&lt;li&gt;抽烟者问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;处理机调度&#34;&gt;处理机调度
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;处理及调度的层次&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;高级调度（作业调度、长程调度）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业选择&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从**后备队列（外存中等待的作业）**中选择作业&lt;/li&gt;
&lt;li&gt;判断系统资源（内存、CPU、I/O）是否充足&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;资源分配&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为选中的作业分配内存、I/O、文件等资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进程创建&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将作业转化为一个或多个&lt;strong&gt;进程&lt;/strong&gt;，放入就绪队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中级调度（内存调度、中程调度）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选择部分进程挂起（移出内存到外存）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择挂起的进程恢复（从外存调回内存）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;低级调度（进程调度、线程调度、短程调度）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从&lt;strong&gt;就绪队列&lt;/strong&gt;中选择一个进程&lt;/li&gt;
&lt;li&gt;把 CPU 分配给选中的进程&lt;/li&gt;
&lt;li&gt;保存和恢复进程的上下文（&lt;strong&gt;进程切换 Context Switch&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;控制 CPU 的执行顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理机的调度方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非抢占式&lt;/li&gt;
&lt;li&gt;抢占式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择调度算法的若干准则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU利用率&lt;/p&gt;
$$
     \frac{\text{worktime of CPU}}{\text{total time}}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统吞吐量&lt;/p&gt;
$$
     \frac{\text{number of tasks}}{\text{total time}}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;周转时间(Turnaround Time)&lt;/p&gt;
$$
     \text{Completion Time - Arrival Time}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均周转时间&lt;/p&gt;
$$
     \frac{\sum\limits_{N}\text{Turnaround Time of all processes}}{N}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带权周转时间&lt;/p&gt;
$$
     \frac{\text{Turnaround Time}}{\text{Service Time}}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均带权周转时间&lt;/p&gt;
$$
     \frac{\sum\limits_{N}\text{Weighted Turnaround Time of all processes}}{N}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;调度算法&#34;&gt;调度算法
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;FCFS（先来先服务）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SJF（最短作业优先）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抢占&lt;/li&gt;
&lt;li&gt;非抢占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SRTF（最短剩余时间优先）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Priority Scheduling（高优先权优先调度）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抢占&lt;/li&gt;
&lt;li&gt;非抢占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Highest Response Ratio Next (HRRN)（高响应比有点调度算法）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Round Robin（时间片轮转）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multilevel Feedback Queue（多级反馈队列调度）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上下文切换&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU上下文切换&lt;/li&gt;
&lt;li&gt;系统调用上下文切换&lt;/li&gt;
&lt;li&gt;进程上下文切换
&lt;ul&gt;
&lt;li&gt;用户级&lt;/li&gt;
&lt;li&gt;系统级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程上下文切换&lt;/li&gt;
&lt;li&gt;中断上下文切换&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号:012-015&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据结构-致敬传奇栈帧pc程序计数器&#34;&gt;数据结构-致敬传奇栈帧PC程序计数器
&lt;/h2&gt;&lt;h3 id=&#34;栈&#34;&gt;栈
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态顺序栈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判空&lt;/li&gt;
&lt;li&gt;判满&lt;/li&gt;
&lt;li&gt;进栈&lt;/li&gt;
&lt;li&gt;出栈&lt;/li&gt;
&lt;li&gt;获取栈顶元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态顺序栈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判空&lt;/li&gt;
&lt;li&gt;判满&lt;/li&gt;
&lt;li&gt;进栈&lt;/li&gt;
&lt;li&gt;出栈&lt;/li&gt;
&lt;li&gt;获取栈顶元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链栈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判空&lt;/li&gt;
&lt;li&gt;判满&lt;/li&gt;
&lt;li&gt;进栈&lt;/li&gt;
&lt;li&gt;出栈&lt;/li&gt;
&lt;li&gt;获取栈顶元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈的应用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;括号匹配&lt;/li&gt;
&lt;li&gt;进制转换（辗转相除）&lt;/li&gt;
&lt;li&gt;函数递归调用&lt;/li&gt;
&lt;li&gt;表达式求值
&lt;ul&gt;
&lt;li&gt;前缀&lt;/li&gt;
&lt;li&gt;中缀（重要）&lt;/li&gt;
&lt;li&gt;后缀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号：014-017&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;数学-太好了是张宇老师我们有救了&#34;&gt;数学-太好了是张宇老师我们有救了！
&lt;/h2&gt;&lt;h3 id=&#34;函数的概念与特性&#34;&gt;函数的概念与特性
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;反函数&lt;/li&gt;
&lt;li&gt;复合函数&lt;/li&gt;
&lt;li&gt;隐函数&lt;/li&gt;
&lt;li&gt;函数的四种特性
&lt;ul&gt;
&lt;li&gt;有界性&lt;/li&gt;
&lt;li&gt;单调性&lt;/li&gt;
&lt;li&gt;奇偶性&lt;/li&gt;
&lt;li&gt;周期性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本初等函数与初等函数
&lt;ul&gt;
&lt;li&gt;常函数&lt;/li&gt;
&lt;li&gt;幂函数&lt;/li&gt;
&lt;li&gt;指数函数&lt;/li&gt;
&lt;li&gt;对数函数&lt;/li&gt;
&lt;li&gt;三角函数
&lt;ol&gt;
&lt;li&gt;sin x  cos x&lt;/li&gt;
&lt;li&gt;csc x sec x&lt;/li&gt;
&lt;li&gt;tan x cot x&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;反三角函数
&lt;ol&gt;
&lt;li&gt;arcsin x arccos x&lt;/li&gt;
&lt;li&gt;arctanx arccot x&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分段函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;高数第一讲&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
