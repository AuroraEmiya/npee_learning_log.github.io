<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>shyの考研日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/</link>
        <description>Recent content on shyの考研日志</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 31 Jul 2025 16:01:32 +0800</lastBuildDate><atom:link href="http://localhost:1313/npee_learning_log.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>日语学习-月色真美</title>
        <link>http://localhost:1313/npee_learning_log.github.io/interests/0731/</link>
        <pubDate>Thu, 31 Jul 2025 16:01:32 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/interests/0731/</guid>
        <description>&lt;img src="http://localhost:1313/npee_learning_log.github.io/interests/0731/shiawase.png" alt="Featured image of post 日语学习-月色真美" /&gt;&lt;h2 id=&#34;月がきれい月色真美-東山奈央&#34;&gt;月がきれい（月色真美）-東山奈央
&lt;/h2&gt;&lt;h3 id=&#34;前言&#34;&gt;前言
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;把&amp;quot;I love you&amp;quot; 翻译成&amp;quot;月色真美&amp;quot;的是太宰治?还是夏目漱石?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;不管是谁，这首作为动画《月色真美》ed的&amp;lt;月がきれい&amp;gt;，在东山奈央的倾情演绎下，将男女主人公青涩、胆怯又勇敢的恋爱氛围展现得淋漓尽致。这首歌在笔者看来，是一封娓娓道来的情书，是一封写给远方的恋人的情书。曾经在月光下青涩的告白，仲夏夜的游园花火，重叠在字里行间的日常，再到如今即使不得不暂时分离仍不断祈祷&amp;hellip;&amp;hellip;凡此种种，无不令笔者身临其间，在歌声中欢乐、悲伤，最后情绪爆发流下眼泪。&lt;/p&gt;
&lt;p&gt;因此，笔者愿借此机会，介绍这首歌以及学习其中的语法单词，若能因此喜欢这首歌以及背后的故事，笔者也将不胜荣幸。&lt;/p&gt;
&lt;p&gt;以下，笔者将根据自己对这首歌和故事的理解，将歌词分为几个小结，与副歌的进行是一一对应的。&lt;/p&gt;
&lt;h3 id=&#34;月静如水&#34;&gt;月静如水
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;夕暮れ落ちる前に白い月が昇る&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;夜幕还未完全降临 洁白的月光便洒落大地&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;春風優しく2つの影&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;春风温柔地拂过二人的身影
&lt;strong&gt;囁くように包んでいたよ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;静悄悄地围绕在你我身旁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初めてこんなに誰かを想った&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一次发现在脑海中 有着一个身影挥之不去&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;词汇&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;词汇&lt;/th&gt;
          &lt;th&gt;读音&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;词性&lt;/th&gt;
          &lt;th&gt;释义&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;夕暮れ&lt;/td&gt;
          &lt;td&gt;（0）ゆうぐれ&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;名词&lt;/td&gt;
          &lt;td&gt;傍晚，黄昏&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;落ちる&lt;/td&gt;
          &lt;td&gt;（2）おちる&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;自动词&lt;/td&gt;
          &lt;td&gt;落下，降落&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;白い&lt;/td&gt;
          &lt;td&gt;（2）しろい&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;形容词&lt;/td&gt;
          &lt;td&gt;白色的&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;昇る&lt;/td&gt;
          &lt;td&gt;（0）のぼる&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;自动词&lt;/td&gt;
          &lt;td&gt;升起&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;優しく&lt;/td&gt;
          &lt;td&gt;（0）やさしく&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;副词&lt;/td&gt;
          &lt;td&gt;温柔地&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;優しい&lt;/td&gt;
          &lt;td&gt;（0）やさしい&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;形容词&lt;/td&gt;
          &lt;td&gt;温柔的&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;囁く&lt;/td&gt;
          &lt;td&gt;（3）ささやく&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;自动词&lt;/td&gt;
          &lt;td&gt;低声说话&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解读&lt;/p&gt;
&lt;p&gt;这一段是歌曲的开场，是对场景的环境描写：春天，夜幕降临，满月，清风吹拂，两人独处。一切都是那么静谧，两颗心正被整个世界温柔的包围，但是仍有悸动。两人相视无言，只是心里一直在想着对方。接下来的副歌阶段就唱出的主角的心声，笔者认为这首歌是女孩的视角。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;告白之夜&#34;&gt;告白之夜
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;いつもどうしていいのかわからなかった&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总是一直不知道该如何是好&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;君への想いはこぼれるほどあるのに&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;明明对你的思念早已溢满心田&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;つないだ右手もぎこちないキスも&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;紧紧握住的右手也好 笨拙生疏的接吻也好&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;それだけがこの世界の全てだった&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅仅只是这些 却已然成为了我世界的一切&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;今日も君からもらった言葉を抱きしめている&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天又一次将你的言语拥入心中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;私にとってそれはまるで月明かり&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因那对于我而言宛若月明之光&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二人で見上げたあの時みたいにきれい&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正如我们那天一起仰望的 那般美丽&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;词汇&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;词汇&lt;/th&gt;
          &lt;th&gt;读音&lt;/th&gt;
          &lt;th&gt;词性&lt;/th&gt;
          &lt;th&gt;释义&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;いつも&lt;/td&gt;
          &lt;td&gt;（0）いつも&lt;/td&gt;
          &lt;td&gt;副词&lt;/td&gt;
          &lt;td&gt;总是，一直&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;わからない&lt;/td&gt;
          &lt;td&gt;（3）わからない&lt;/td&gt;
          &lt;td&gt;动词&lt;/td&gt;
          &lt;td&gt;不明白&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;こぼれる&lt;/td&gt;
          &lt;td&gt;（0）こぼれる&lt;/td&gt;
          &lt;td&gt;自动词&lt;/td&gt;
          &lt;td&gt;溢出，流露&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;ほど&lt;/td&gt;
          &lt;td&gt;（0）ほど&lt;/td&gt;
          &lt;td&gt;名词&lt;/td&gt;
          &lt;td&gt;程度&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;ぎこちない&lt;/td&gt;
          &lt;td&gt;（1）ぎこちない&lt;/td&gt;
          &lt;td&gt;形容词&lt;/td&gt;
          &lt;td&gt;笨拙的&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;言葉&lt;/td&gt;
          &lt;td&gt;（0）ことば&lt;/td&gt;
          &lt;td&gt;名词&lt;/td&gt;
          &lt;td&gt;话语，语言&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;抱きしめる&lt;/td&gt;
          &lt;td&gt;（3）だきしめる&lt;/td&gt;
          &lt;td&gt;动词&lt;/td&gt;
          &lt;td&gt;拥抱，怀抱&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;きれい（綺麗）&lt;/td&gt;
          &lt;td&gt;（2）きれい&lt;/td&gt;
          &lt;td&gt;形容词&lt;/td&gt;
          &lt;td&gt;美丽&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解读&lt;/p&gt;
&lt;p&gt;这部分是女孩站在现在（分别）的时刻回忆曾经，那天男孩借月色真美之口(月がきれい→月(tsuki)和好き(suki)读音相似)，借势向女孩表白。随后是渐渐接近产生的故事，紧握的手是男孩的占有欲，笨拙的初吻&amp;hellip;&amp;hellip;这一切，都源于那个夜晚，月色真美。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;盛夏祭典&#34;&gt;盛夏祭典
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;暑い夏の日差し 揺れる風鈴の音&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;夏季的烈日 摇动的风铃之音&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;深呼吸して見つめた背中は&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;深呼吸一口气 望着这后背&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思ったよりもすごく大きくて&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比想象的要更加宽广呢&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;词汇&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;词汇&lt;/th&gt;
          &lt;th&gt;读音&lt;/th&gt;
          &lt;th&gt;词性&lt;/th&gt;
          &lt;th&gt;释义&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;暑い&lt;/td&gt;
          &lt;td&gt;（0）あつい&lt;/td&gt;
          &lt;td&gt;形容词&lt;/td&gt;
          &lt;td&gt;热的&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;日差し&lt;/td&gt;
          &lt;td&gt;（0）ひざし&lt;/td&gt;
          &lt;td&gt;名词&lt;/td&gt;
          &lt;td&gt;阳光&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;揺れる&lt;/td&gt;
          &lt;td&gt;（0）ゆれる&lt;/td&gt;
          &lt;td&gt;自动词&lt;/td&gt;
          &lt;td&gt;摇动，动摇&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;背中&lt;/td&gt;
          &lt;td&gt;（0）せなか&lt;/td&gt;
          &lt;td&gt;名词&lt;/td&gt;
          &lt;td&gt;背，背后&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;すごく&lt;/td&gt;
          &lt;td&gt;（0）すごく&lt;/td&gt;
          &lt;td&gt;副词&lt;/td&gt;
          &lt;td&gt;非常&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;大きい&lt;/td&gt;
          &lt;td&gt;（0）おおきい&lt;/td&gt;
          &lt;td&gt;形容词&lt;/td&gt;
          &lt;td&gt;大的&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解读&lt;/p&gt;
&lt;p&gt;这一段稍微收回第一次副歌的情绪，接下来是一场令人难忘的夏祭り（夏日祭典）。这里女孩看向男孩背影，夏天的蝉鸣在耳边不停的聒噪，扰动心弦。原作这里，女孩要离开这个镇子，去别的地方上学，所以当自己慢慢落下脚步，看向前方，不免伤怀以后的分别。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;离别花火&#34;&gt;离别花火
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;どうしてこんなに切なくさせるの？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而又为什么 心境会变得如此不平静了呢&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;あの日二人で歩いた菓子屋横丁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当时二人一起走过的点心小街&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;君の歩幅に合わせてついていったね&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;迎合着你的步伐终于跟上你了呢&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;いつもの寝ぐせとほどけた靴ひも&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;望着像是刚睡醒那样头发翘起着 鞋带也忘记系上的你&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;このまま刻を止めてしまいたかった&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我多么想将这一刻这幅画面定格于心&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;夏祭りに二人で見上げた花火は今でも&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;夏祭时共同仰望星空中绽放的烟火依旧历历在目&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;私にとってかけがえない宝物&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因那对我而言是独一无二的宝物&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二人を見ていたあの月みたいにきれい&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正如我们那天一起仰望的 那般美丽&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;词汇&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;词汇&lt;/th&gt;
          &lt;th&gt;读音&lt;/th&gt;
          &lt;th&gt;词性&lt;/th&gt;
          &lt;th&gt;释义&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;切なく&lt;/td&gt;
          &lt;td&gt;（0）せつなく&lt;/td&gt;
          &lt;td&gt;副词&lt;/td&gt;
          &lt;td&gt;悲伤地，心痛地&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;菓子屋&lt;/td&gt;
          &lt;td&gt;（0）かしや&lt;/td&gt;
          &lt;td&gt;名词&lt;/td&gt;
          &lt;td&gt;点心店&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;横丁&lt;/td&gt;
          &lt;td&gt;（0）よこちょう&lt;/td&gt;
          &lt;td&gt;名词&lt;/td&gt;
          &lt;td&gt;小巷，小街道&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;歩幅&lt;/td&gt;
          &lt;td&gt;（0）ほはば&lt;/td&gt;
          &lt;td&gt;名词&lt;/td&gt;
          &lt;td&gt;步幅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;合わせる&lt;/td&gt;
          &lt;td&gt;（3）あわせる&lt;/td&gt;
          &lt;td&gt;他动词&lt;/td&gt;
          &lt;td&gt;配合&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;寝ぐせ&lt;/td&gt;
          &lt;td&gt;（0）ねぐせ&lt;/td&gt;
          &lt;td&gt;名词&lt;/td&gt;
          &lt;td&gt;睡觉时弄乱的头发&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;止める&lt;/td&gt;
          &lt;td&gt;（3）とめる&lt;/td&gt;
          &lt;td&gt;他动词&lt;/td&gt;
          &lt;td&gt;停下&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;掛け替えない&lt;/td&gt;
          &lt;td&gt;（0）かけがえない&lt;/td&gt;
          &lt;td&gt;形容词&lt;/td&gt;
          &lt;td&gt;独一无二的&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;宝物&lt;/td&gt;
          &lt;td&gt;（0）たからもの&lt;/td&gt;
          &lt;td&gt;名词&lt;/td&gt;
          &lt;td&gt;珍贵的东西，重要的人或物&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解读&lt;/p&gt;
&lt;p&gt;其实看歌词就明白了，这是两人参加夏日庆典，观赏烟花的约会。其中每个细节都历历在目，直到打上花火，但想到前方两人的分别，有多么希望这一刻的幸福永远定格。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;剧透两个人最后结婚了&#34;&gt;剧透：两个人最后结婚了
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;どんなに遠く 離れていても 君と&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;哪怕你我天各一方&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ずっといつまででも 一緒にいられますようにと&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我都会一直祈祷着&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;祈った&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;希望我们可以永远都不分开&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;夜空に今日も瞬く星を見つめて&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;望着夜空中那颗闪烁着光芒的小星星&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;こぼれる涙を一人こらえていたよ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;言葉を持たない月が私なら&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无法言语 如若我化作明月&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;君という星見つめつづける&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我将会一直守护着 名为你的最亮的星&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;词汇&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;词汇&lt;/th&gt;
          &lt;th&gt;读音&lt;/th&gt;
          &lt;th&gt;词性&lt;/th&gt;
          &lt;th&gt;释义&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;遠く&lt;/td&gt;
          &lt;td&gt;（2）とおく&lt;/td&gt;
          &lt;td&gt;名词，副词&lt;/td&gt;
          &lt;td&gt;远方，远远地&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;離れる&lt;/td&gt;
          &lt;td&gt;（3）はなれる&lt;/td&gt;
          &lt;td&gt;自动词&lt;/td&gt;
          &lt;td&gt;分离&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;ずっと&lt;/td&gt;
          &lt;td&gt;（0）ずっと&lt;/td&gt;
          &lt;td&gt;副词&lt;/td&gt;
          &lt;td&gt;一直&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;いつまで&lt;/td&gt;
          &lt;td&gt;（0）いつまで&lt;/td&gt;
          &lt;td&gt;副词&lt;/td&gt;
          &lt;td&gt;到何时&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;一緒に&lt;/td&gt;
          &lt;td&gt;（0）いっしょに&lt;/td&gt;
          &lt;td&gt;副词&lt;/td&gt;
          &lt;td&gt;一起&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;瞬く&lt;/td&gt;
          &lt;td&gt;（3）またたく&lt;/td&gt;
          &lt;td&gt;自动词&lt;/td&gt;
          &lt;td&gt;闪烁&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;涙&lt;/td&gt;
          &lt;td&gt;（1）なみだ&lt;/td&gt;
          &lt;td&gt;名词&lt;/td&gt;
          &lt;td&gt;眼泪&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;こらえる&lt;/td&gt;
          &lt;td&gt;（0）こらえる&lt;/td&gt;
          &lt;td&gt;他动词&lt;/td&gt;
          &lt;td&gt;忍耐，抑制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;見つめる&lt;/td&gt;
          &lt;td&gt;（0）みつめる&lt;/td&gt;
          &lt;td&gt;他动词&lt;/td&gt;
          &lt;td&gt;凝视&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;続ける&lt;/td&gt;
          &lt;td&gt;（3）つづける&lt;/td&gt;
          &lt;td&gt;他动词&lt;/td&gt;
          &lt;td&gt;继续&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解读&lt;/p&gt;
&lt;p&gt;这里歌词里的情绪已经难以控制，希望无论有多远，这份恋情能够持续下去。 不过这里为了不让读者过于担心，最后的最后两个人考上了同一所大学，在同一个城市生活，结婚，生孩子了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;月色真美&#34;&gt;月色真美
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;いつもどうしていいのかわからなかった&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总是一直不知道该如何是好&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;君への想いはこぼれるほどあるのに&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;明明对你的思念早已溢满心田&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;つないだ右手もぎこちないキスも&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;紧紧握住的右手也好 笨拙生疏的接吻也好&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;それだけが この世界の全てだった&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅仅只是这些 却已然成为了我世界的一切的一切&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;今日も君からもらった言葉を抱きしめている&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天又一次将你的言语拥入心中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;私にとってそれはまるで月明かり&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因那对于我而言宛若月明之光&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二人で見上げた あの時みたいに きれい&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正如我们那天一起仰望的 那般美丽&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这一段副歌和第一段的副歌的歌词是一样的，但在情感表达上有所变化。最开始是带着初恋的青涩，这一段除了怀念当时的美好，同时由于分别的现实，这一段相较于最开始多了一份怀念和坚守。毕竟这段故事一切的一切都来自那个夜晚，也是初心所在。&lt;/p&gt;
&lt;h2 id=&#34;附什么是自动词他动词&#34;&gt;附：什么是自动词，他动词
&lt;/h2&gt;&lt;p&gt;根据是否要求宾语，可以将动词分为他动词和自动词两类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同一词根、词义关联的自他动词，可以对事情从不同角度分别加以表述。&lt;/p&gt;
&lt;p&gt;自动词从动作的对象出发，侧重于表达变化的结果，或者用于描述状态；他动词从动作的主体出发，侧重表示动作的过程，描述主题对对象视角的影响、产生的作用。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自他动词的词义特征&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动词常常用于描述自然现象或自发的事项，一般没有动作执行者。有些情况，虽然存在着动作执行者，但事情的发生并不以其意志为转移，或者执行者不是叙述焦点。&lt;/li&gt;
&lt;li&gt;他动词常常涉及动作执行者，虽然在使用时动作执行者未必都出现，但是动作执行者时隐含在动作的词义之中的。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自他动词的语感&lt;/p&gt;
&lt;p&gt;自他动词的语义各有侧重点，这就带来实际使用时选择自动词还是他动词的问题。&lt;/p&gt;
&lt;p&gt;自动词一般不含有动作执行者，或者描述的事项不是以人的意志为转移的，因此自动词常用来描写自然现象，是一种客观的陈述。&lt;/p&gt;
&lt;p&gt;用他动词进行描写时，常常带有动作执行者的意志，因此常用于表述在执行者主观意志下进行的动作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0730学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0730/</link>
        <pubDate>Wed, 30 Jul 2025 23:44:55 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0730/</guid>
        <description>&lt;h2 id=&#34;gcc-manual-rtfm&#34;&gt;GCC manual-RTFM
&lt;/h2&gt;&lt;p&gt;今天心血来潮想要拜读&lt;code&gt;gcc&lt;/code&gt;man page，学到很多。有时候会思考，AI确实帮助了我快速上手一个领域，比如使用Rust编写一个植物大战僵尸的游戏，比如从零开始认识一个代码，但是一旦结束之后，回头再想就很难说我仍然可以再举一反三地做另一个好玩的事情，事实上Rust的语法和特性我也几乎忘记。&lt;/p&gt;
&lt;p&gt;jyy老师在课堂上曾经向我们展示了许多很好玩的代码，很有意思的命令行，也曾经嘱咐我们一定要RTFM(Read The Friendly Manual)，现在的我毕业了，同时仍然是AI的重度依赖者，只是心里一直有一个地方在不断的问自己：AI的回答能否坦然接受？&lt;/p&gt;
&lt;p&gt;我的答案一直是：NO&lt;/p&gt;
&lt;p&gt;我始终在拥抱AI的同时留有一丝怀疑和谨慎。&lt;/p&gt;
&lt;p&gt;这是man page的部分内容，权当记录，明天还要更新更多的笔记。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GNU project C and C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; compiler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       gcc [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|-&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;|-&lt;/span&gt;E] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;standard]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;g] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pg] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Olevel]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wwarn...] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wpedantic]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Idir...] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Ldir...]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dmacro[&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;defn]...] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Umacro]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;foption...] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mmachine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;option...]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o outfile] [&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;file] infile...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Only the most useful options are listed here; see below &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       remainder.  g&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; accepts mostly the same options as gcc.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DESCRIPTION      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       When you invoke GCC, it normally does preprocessing, compilation,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       assembly and linking.  The &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;overall options&amp;#34;&lt;/span&gt; allow you to stop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       this process at an intermediate stage.  For example, the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c option
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       says not to run the linker.  Then the output consists of object
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       files output by the assembler.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Other options are passed on to one or more stages of processing.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Some options control the preprocessor and others the compiler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       itself.  Yet other options control the assembler and linker; most
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       of these are not documented here, since you rarely need to use any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       of them.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Most of the command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line options that you can use with GCC are
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       useful &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; C programs; when an option is only useful with another
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;language&lt;/span&gt; (usually C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;), the explanation says so explicitly.  If
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       the description &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a particular option does not mention a source
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       language, you can use that option with all supported languages.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       The usual way to run GCC is to run the executable called gcc, or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       machine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gcc when cross&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;compiling, or machine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gcc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;version to run a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       specific version of GCC.  When you compile C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; programs, you
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       should invoke GCC as g&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; instead.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       The gcc program accepts options and file names as operands.  Many
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       options have multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;letter names; therefore multiple single&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;letter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       options may not be grouped: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dv is very different from &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       You can mix options and other arguments.  For the most part, the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       order you use doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t matter.  Order does matter when you use
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       several options of the same kind; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you specify &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;L
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       more than once, the directories are searched in the order
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       specified.  Also, the placement of the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l option is significant.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Many options have &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; names starting with &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f or with &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       example, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fmove&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;invariants, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wformat and so on.  Most of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       these have both positive and negative forms; the negative form of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ffoo is &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;foo.  This manual documents only one of these two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       forms, whichever one is not the &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Some options take one or more arguments typically separated either
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       by a space or by the equals &lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;) from the option name.  Unless
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       documented otherwise, an argument can be either numeric or a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       string.  Numeric arguments must typically be small &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       decimal or hexadecimal integers.  Hexadecimal arguments must begin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       with the &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;x prefix.  Arguments to options that specify a size
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       threshold of some sort may be arbitrarily large decimal or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       hexadecimal integers followed by a byte size suffix designating a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       multiple of bytes such as &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kB&amp;#34;&lt;/span&gt; and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KiB&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; kilobyte and
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       kibibyte, respectively, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MB&amp;#34;&lt;/span&gt; and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MiB&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; megabyte and mebibyte,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GB&amp;#34;&lt;/span&gt; and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GiB&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; gigabyte and gigibyte, and so on.  Such
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       arguments are designated by byte&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;size in the following text.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Refer to the NIST, IEC, and other relevant national and
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       international standards &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the full listing and explanation of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       the binary and decimal byte size prefixes.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Option Summary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Here is a summary of all the options, grouped by type.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Explanations are in the following sections.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Overall Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;S  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o file  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x language &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help[&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;class[,...]]  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;help  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;codes  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pipe  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;wrapper &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ffile&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;old&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;new &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplugin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplugin&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;arg&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;slim]  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;parent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;unit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;go&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       C Language Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ansi  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;standard  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fgnu89&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpermitted&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;flt&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;eval&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;standard &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;aux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;info filename
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fallow&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;parameterless&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;variadic&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;functions &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;asm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;builtin  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;builtin&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;function  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fgimple &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fhosted
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ffreestanding &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fopenacc  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fopenacc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;geom &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fopenmp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fopenmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;simd &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fms&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;extensions  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplan9&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;extensions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fsso&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;endianness &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fallow&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;single&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;precision
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fcond&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mismatch  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;flax&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;conversions &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fsigned&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bitfields
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fsigned&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;funsigned&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bitfields  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;funsigned&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; Language Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fabi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;access&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;control &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;faligned&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;new&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fargs&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fchar8_t&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fcheck&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;new &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fconstexpr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fconstexpr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fconstexpr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ops&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;elide&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;constructors &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enforce&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;eh&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;keywords &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;implicit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;templates
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;implicit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;templates &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;implement&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;inlines
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fms&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;extensions &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fnew&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;inheriting&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ctors &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fnew&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ttp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;matching
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nonansi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;builtins  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fnothrow&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;opt  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;operator&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;names
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;optional&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;diags  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpermissive &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pretty&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;templates &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;frepo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rtti  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fsized&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;deallocation &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftemplate&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;backtrace&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftemplate&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;threadsafe&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;statics  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fuse&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cxa&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;atexit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;weak  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nostdinc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fvisibility&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;inlines&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hidden
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fvisibility&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ms&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;compat &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fext&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;numeric&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;literals &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wabi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wabi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tag  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wconversion&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;null  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wctor&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dtor&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;privacy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wdelete&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;virtual&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dtor  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wdeprecated&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;copy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wdeprecated&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;copy&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dtor &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wliteral&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;suffix &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wmultiple&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;inheritance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;init&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lifetime &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wnamespaces  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wnarrowing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wpessimizing&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;move  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wredundant&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;move &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wnoexcept
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wnoexcept&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wclass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;memaccess &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wnon&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;virtual&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dtor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wreorder  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wregister &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Weffc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wstrict&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;null&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sentinel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wtemplates &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;template&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;friend  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wold&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cast
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Woverloaded&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;virtual  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pmf&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;conversions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;class&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;conversion  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;terminate &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wsign&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;promo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wvirtual&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;inheritance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Preprocessor Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Aquestion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;answer &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;A&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;question[&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;answer] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;CC  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dmacro[&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;defn]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dD  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dI  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dM  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dN  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dU &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdebug&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdirectives&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;only
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdollars&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;identifiers &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fexec&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;charset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fextended&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;identifiers &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;finput&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;charset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fmacro&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;old&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;new &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;canonical&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;system&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;headers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpch&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;deps  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpch&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;preprocess &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpreprocessed  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftabstop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;width
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftrack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;macro&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;expansion &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fwide&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exec&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;charset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fworking&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;directory &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;imacros file  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;include file &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MF  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MG  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MM  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MMD  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MP  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MQ  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MT &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;no&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;integrated&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pthread  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;remap &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;traditional  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;traditional&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;trigraphs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Umacro  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;undef &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wp,option  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Xpreprocessor option
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Assembler Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wa,option  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Xassembler option
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Linker Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           object&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fuse&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ld&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linker  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;llibrary &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nostartfiles
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nodefaultlibs  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nolibc  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nostdlib &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e entry  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;entry&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;entry
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pie  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pthread  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rdynamic &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pie
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libgcc  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libstdc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libasan
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libtsan  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;liblsan  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libubsan &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shared
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shared&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libgcc  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;symbolic &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;T script  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wl,option  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Xlinker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           option &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;u symbol  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;z keyword
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Directory Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Bprefix  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Idir  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;idirafter dir &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;imacros file  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;imultilib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           dir &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;iplugindir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dir  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;iprefix file &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;iquote dir  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;isysroot dir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;isystem dir &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;iwithprefix dir  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;iwithprefixbefore dir &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Ldir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;no&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;canonical&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefixes  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;no&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sysroot&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;suffix &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nostdinc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nostdinc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;sysroot&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Code Generation Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fcall&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;saved&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reg  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fcall&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;used&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reg &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ffixed&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reg  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fexceptions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fnon&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;call&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exceptions  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdelete&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dead&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exceptions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;funwind&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tables &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fasynchronous&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;unwind&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tables &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;unique
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;finhibit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;directive  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;common  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ident
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpcc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpic  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fPIC  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpie  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fPIE  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;plt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;jump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tables &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;frecord&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gcc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;switches &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;freg&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fshort&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enums  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fshort&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;wchar &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fverbose&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;asm&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fleading&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;underscore  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftls&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;model
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fstack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reuse&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;reuse_level &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftrampolines  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftrapv  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fwrapv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fvisibility&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;internal&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;hidden&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;protected]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fstrict&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bitfields  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fsync&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libcalls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      For any given input file, the file name suffix determines what
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       kind of compilation is done:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C source code that must be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.ii
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C source code.  Note that you must link with the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           libobjc library to make an Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C program work.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.mi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.mm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code.  Note that you must link with the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           libobjc library to make an Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; program work.  Note
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           that .M refers to a literal capital M.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.mii
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C, C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;, Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C or Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; header file to be turned
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           into a precompiled &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;), or C, C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; header file to
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           be turned into an Ada &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt; (via the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.cc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.cp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.cxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.CPP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.C
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code that must be preprocessed.  Note that in .cxx,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the last two letters must both be literally x.  Likewise, .C
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           refers to a literal capital C.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.mm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code that must be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.mii
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.hh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.H
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.hp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.hxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.hpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.HPP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.tcc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; header file to be turned into a precompiled header or Ada
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           spec.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.ftn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Fixed form Fortran source code that should not be
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.F
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.FOR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.fpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.FPP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.FTN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Fixed form Fortran source code that must be &lt;span style=&#34;color:#a6e22e&#34;&gt;preprocessed&lt;/span&gt; (with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the traditional preprocessor).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.f90
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.f95
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.f03
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.f08
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Free form Fortran source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.F90
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.F95
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.F03
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.F08
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Free form Fortran source code that must be &lt;span style=&#34;color:#a6e22e&#34;&gt;preprocessed&lt;/span&gt; (with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the traditional preprocessor).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Go source code.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.brig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           BRIG &lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt; (binary representation of HSAIL).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           D source code.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.di
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           D interface file.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.dd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           D documentation &lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; (Ddoc).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.ads
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Ada source code file that contains a library unit &lt;span style=&#34;color:#a6e22e&#34;&gt;declaration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (a declaration of a package, subprogram, or generic, or a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           generic instantiation), or a library unit renaming &lt;span style=&#34;color:#a6e22e&#34;&gt;declaration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (a package, generic, or subprogram renaming declaration).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Such files are also called specs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.adb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Ada source code file containing a library unit &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt; (a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           subprogram or package body).  Such files are also called
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           bodies.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Assembler code.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.S
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.sx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Assembler code that must be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       other
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           An object file to be fed straight into linking.  Any file name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           with no recognized suffix is treated this way.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       You can specify the input language explicitly with the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x option:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x language
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Specify explicitly the language &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the following input &lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (rather than letting the compiler choose a &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; based on
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the file name suffix).  This option applies to all following
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           input files until the next &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x option.  Possible values &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           language are:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   c  c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;header  cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;  c&lt;span style=&#34;color:#f92672&#34;&gt;++-&lt;/span&gt;header  c&lt;span style=&#34;color:#f92672&#34;&gt;++-&lt;/span&gt;cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c  objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;header  objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;++-&lt;/span&gt;header objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;++-&lt;/span&gt;cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   assembler  assembler&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   ada
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   f77  f77&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;input f95  f95&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;input
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   brig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Turn off any specification of a language, so that subsequent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           files are handled according to their file name &lt;span style=&#34;color:#a6e22e&#34;&gt;suffixes&lt;/span&gt; (as
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           they are &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x has not been used at all).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       If you only want some of the stages of compilation, you can use &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (or filename suffixes) to tell gcc where to start, and one of the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       options &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;S, or &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E to say where gcc is to stop.  Note that some
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;combinations&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E) instruct gcc to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       nothing at all.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c  Compile or assemble the source files, but &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not link.  The
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           linking stage simply is not done.  The ultimate output is in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the form of an object file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each source file.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           By &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;, the object file name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a source file is made by
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           replacing the suffix .c, .i, .s, etc., with .o.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Unrecognized input files, not requiring compilation or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           assembly, are ignored.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;S  Stop after the stage of compilation proper; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not assemble.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           The output is in the form of an assembler code file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;assembler input file specified.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           By &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;, the assembler file name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a source file is made
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           by replacing the suffix .c, .i, etc., with .s.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Input files that don&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t require compilation are ignored.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E  Stop after the preprocessing stage; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not run the compiler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           proper.  The output is in the form of preprocessed source
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           code, which is sent to the standard output.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Input files that don&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t require preprocessing are ignored.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Place output in file file.  This applies to whatever sort of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           output is being produced, whether it be an executable file, an
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           object file, an assembler file or preprocessed C code.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           If &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o is not specified, the &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; is to put an executable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           file in a.out, the object file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; source.suffix in source.o,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           its assembler file in source.s, a precompiled header file in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           source.suffix.gch, and all preprocessed C source on standard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           output.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v  &lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt; (on standard error output) the commands executed to run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the stages of compilation.  Also print the version number of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the compiler driver program and of the preprocessor and the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           compiler proper.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Like &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v except the commands are not executed and arguments are
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           quoted unless they contain only alphanumeric characters or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./-_&amp;#34;&lt;/span&gt;.  This is useful &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; shell scripts to capture the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           driver&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;generated command lines.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt; (on the standard output) a description of the command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           line options understood by gcc.  If the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v option is also
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specified then &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help is also passed on to the various
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           processes invoked by gcc, so that they can display the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line options they accept.  If the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wextra option has
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           also been &lt;span style=&#34;color:#a6e22e&#34;&gt;specified&lt;/span&gt; (prior to the &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help option), then
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line options that have no documentation associated
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           with them are also displayed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt; (on the standard output) a description of target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specific command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line options &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each tool.  For some targets
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           extra target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specific information may also be printed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{class&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;]qualifier}[,...]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt; (on the standard output) a description of the command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           line options understood by the compiler that fit into all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specified classes and qualifiers.  These are the supported
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           classes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           optimizers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display all of the optimization options supported by the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               compiler.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           warnings
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display all of the options controlling warning messages
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               produced by the compiler.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           target
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specific options.  Unlike the &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               option however, target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specific options of the linker and
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               assembler are not displayed.  This is because those tools
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not currently support the extended &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; syntax.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           params
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display the values recognized by the &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;param option.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           language
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display the options supported &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; language, where language
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               is the name of one of the languages supported in this
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               version of GCC.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           common
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display the options that are common to all languages.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           These are the supported qualifiers:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           undocumented
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display only those options that are undocumented.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           joined
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display options taking an argument that appears after an
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               equal sign in the same continuous piece of text, such as:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;target.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           separate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display options taking an argument that appears as a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               separate word following the original option, such as: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               output&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;file.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Thus &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example to display all the undocumented target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specific switches supported by the compiler, use:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;target,undocumented
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           The sense of a qualifier can be inverted by prefixing it with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; character, so &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example to display all binary warning
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt; (i.e., ones that are either on or off and that &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           take an argument) that have a description, use:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;warnings,&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;joined,&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;undocumented
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           The argument to &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; should not consist solely of inverted
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           qualifiers.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Combining several classes is possible, although this usually
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           restricts the output so much that there is nothing to display.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           One &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; where it does work, however, is when one of the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           classes is target.  For example, to display all the target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specific optimization options, use:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;target,optimizers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           The &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; option can be repeated on the command line.  Each
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           successive use displays its requested class of options,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           skipping those that have already been displayed.  If &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help is
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           also specified anywhere on the command line then this takes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           precedence over any &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; option.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           If the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q option appears on the command line before the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; option, then the descriptive text displayed by &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           is changed.  Instead of describing the displayed options, an
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           indication is given as to whether the option is enabled,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           disabled or set to a specific &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (assuming that the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           compiler knows this at the point where the &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; option is
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           used).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Here is a truncated example from the ARM port of gcc:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mabi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     The following options are target specific:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mabi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;                                &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mabort&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;on&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;noreturn                   [disabled]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mapcs                                [disabled]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           The output is sensitive to the effects of previous command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           line options, so &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example it is possible to find out which
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           optimizations are enabled at &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O2 by using:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O2 &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;optimizers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Alternatively you can discover which binary optimizations are
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           enabled by &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O3 by using:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O3 &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;optimizers &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;O3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;opts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O2 &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;optimizers &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;O2&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;opts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   diff &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;O2&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;opts &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;O3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;opts &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; grep enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Display the version number and copyrights of the invoked GCC.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;codes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Normally the gcc program exits with the code of &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; any phase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           of the compiler returns a non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;success &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; code.  If you
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specify &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;codes, the gcc program instead returns with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the numerically highest error produced by any phase returning
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           an error indication.  The C, C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;, and Fortran front ends
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; an internal compiler error is encountered.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pipe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Use pipes rather than temporary files &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; communication
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           between the various stages of compilation.  This fails to work
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           on some systems where the assembler is unable to read from a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           pipe; but the GNU assembler has no trouble.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Process file after the compiler reads in the standard specs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           file, in order to override the defaults which the gcc driver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           program uses when determining what switches to pass to cc1,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           cc1plus, as, ld, etc.  More than one &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file can be
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specified on the command line, and they are processed in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           order, from left to right.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;wrapper
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Invoke all subcommands under a wrapper program.  The name of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the wrapper program and its parameters are passed as a comma
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           separated list.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c t.c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;wrapper gdb,&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;args
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           This invokes all subprograms of gcc under gdb &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;args, thus the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           invocation of cc1 is gdb &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;args cc1 ....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ffile&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;old&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;new
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           When compiling files residing in directory old, record any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           references to them in the result of the compilation as &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           files resided in directory new instead.  Specifying this
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           option is equivalent to specifying all the individual
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;*-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map options.  This can be used to make reproducible
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           builds that are location independent.  See also
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fmacro&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map and &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdebug&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplugin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Load the plugin code in file name.so, assumed to be a shared
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           object to be dlopen&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;d by the compiler.  The base name of the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           shared object file is used to identify the plugin &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           purposes of argument &lt;span style=&#34;color:#a6e22e&#34;&gt;parsing&lt;/span&gt; (See &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplugin&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;arg&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           below).  Each plugin should define the callback functions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specified in the Plugins API.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplugin&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;arg&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Define an argument called key with a value of value &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           plugin called name.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;slim]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           For C and C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source and include files, generate corresponding
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Ada specs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;parent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;unit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           In conjunction with &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;slim] above, generate Ada
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specs as child units of parent unit.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;go&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           For input files in any language, generate corresponding Go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           declarations in file.  This generates Go &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;const&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;var&amp;#34;&lt;/span&gt;, and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;func&amp;#34;&lt;/span&gt; declarations which may be a useful way to
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           start writing a Go interface to code written in some other
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           language.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Read command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line options from file.  The options read are
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           inserted in place of the original &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;file option.  If file does
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           not exist, or cannot be read, then the option will be treated
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           literally, and not removed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Options in file are separated by whitespace.  A whitespace
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           character may be included in an option by surrounding the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           entire option in either single or &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; quotes.  Any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;character&lt;/span&gt; (including a backslash) may be included by prefixing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the character to be included with a backslash.  The file may
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           itself contain additional &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;file options; any such options will
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           be processed recursively.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>0730学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0730/</link>
        <pubDate>Wed, 30 Jul 2025 22:23:38 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0730/</guid>
        <description>&lt;h2 id=&#34;操作系统-io&#34;&gt;操作系统-I/O
&lt;/h2&gt;&lt;h3 id=&#34;文件系统&#34;&gt;文件系统
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;文件系统（自底向上）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I/O控制层&lt;/li&gt;
&lt;li&gt;基本文件系统&lt;/li&gt;
&lt;li&gt;文件组织模块&lt;/li&gt;
&lt;li&gt;逻辑文件系统&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件系统布局&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文件系统在磁盘中的结构
&lt;ol&gt;
&lt;li&gt;主引导记录&lt;/li&gt;
&lt;li&gt;引导块&lt;/li&gt;
&lt;li&gt;超级块&lt;/li&gt;
&lt;li&gt;文件系统中空闲块的信息&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文件系统在内存中的结构
&lt;ol&gt;
&lt;li&gt;内存中的安装表（mount table）&lt;/li&gt;
&lt;li&gt;内存中的目录结构的缓存&lt;/li&gt;
&lt;li&gt;整个系统的打开文件表&lt;/li&gt;
&lt;li&gt;每个进程的打开文件表，包含进程打开文件的文件描述符&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;虚拟文件系统VFS
&lt;ol&gt;
&lt;li&gt;超级块对象&lt;/li&gt;
&lt;li&gt;索引节点对象&lt;/li&gt;
&lt;li&gt;目录项对象&lt;/li&gt;
&lt;li&gt;文件对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文件系统挂载&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;io&#34;&gt;I/O
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I/O设备&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;信息交换单位分类
&lt;ol&gt;
&lt;li&gt;块设备&lt;/li&gt;
&lt;li&gt;字符设备&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;传输速率分类
&lt;ol&gt;
&lt;li&gt;低速设备&lt;/li&gt;
&lt;li&gt;中速设备&lt;/li&gt;
&lt;li&gt;高速设备&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用特性
&lt;ol&gt;
&lt;li&gt;存储设备&lt;/li&gt;
&lt;li&gt;输入/输出设备&lt;/li&gt;
&lt;li&gt;共享属性
&lt;ol&gt;
&lt;li&gt;独占设备&lt;/li&gt;
&lt;li&gt;共享设备&lt;/li&gt;
&lt;li&gt;虚拟设备&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O接口&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设备控制器与CPU的接口&lt;/li&gt;
&lt;li&gt;设备控制器与设备的接口&lt;/li&gt;
&lt;li&gt;I/O逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据传送方式：并行接口、串行接口&lt;/li&gt;
&lt;li&gt;主机访问I/O设备的控制方式：程序查询接口、终端接口、DMA接口&lt;/li&gt;
&lt;li&gt;功能选择的灵活性：可编程接口、不可编程接口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;端口：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据寄存器&lt;/li&gt;
&lt;li&gt;状态寄存器&lt;/li&gt;
&lt;li&gt;控制寄存器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I/O端口编址方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;独立编址&lt;/li&gt;
&lt;li&gt;统一编址&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O控制方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序直接控制方式&lt;/li&gt;
&lt;li&gt;中断驱动方式&lt;/li&gt;
&lt;li&gt;DMA方式（重要）&lt;/li&gt;
&lt;li&gt;通道控制方式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O软件层次结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户层软件&lt;/li&gt;
&lt;li&gt;设备独立性软件&lt;/li&gt;
&lt;li&gt;设备驱动软件&lt;/li&gt;
&lt;li&gt;中断处理软件&lt;/li&gt;
&lt;li&gt;硬件（非软件层次）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数学-极值点拐点&#34;&gt;数学-极值点？拐点？
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;极值的定义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单调性与极值的判别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单调性的判别&lt;/li&gt;
&lt;li&gt;判别极值的第一充分条件&lt;/li&gt;
&lt;li&gt;判别极值的第二充分条件&lt;/li&gt;
&lt;li&gt;判别极值的第三充分条件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;凹凸性与拐点的概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;凹凸性的定义&lt;/li&gt;
&lt;li&gt;拐点的定义&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;凹凸性与拐点的判别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判别凹凸性&lt;/li&gt;
&lt;li&gt;判别拐点的第一充分条件&lt;/li&gt;
&lt;li&gt;判别拐点的第二充分条件&lt;/li&gt;
&lt;li&gt;判别拐点的第三充分条件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;渐近线&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;铅直渐近线&lt;/li&gt;
&lt;li&gt;水平渐近线&lt;/li&gt;
&lt;li&gt;斜渐近线&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最值或取值范围&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最值的定义&lt;/li&gt;
&lt;li&gt;求区间[a,b]上的连续函数f(x)的最大值和最小值&lt;/li&gt;
&lt;li&gt;求区间(a,b )上的连续函数f(x)的最值或取值范围&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作函数图像&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一般步骤
&lt;ol&gt;
&lt;li&gt;确定定义域、奇偶性、周期性等&lt;/li&gt;
&lt;li&gt;用导数工具确定函数的单调区间、极值点、凹凸区间、拐点&lt;/li&gt;
&lt;li&gt;考查渐近线&lt;/li&gt;
&lt;li&gt;作出函数图像&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;曲率及曲率半径（证明放在下一期笔记中）
&lt;/p&gt;
$$
   \begin{align*}
   k &amp;= \dfrac{|y&#39;&#39;|}{{[1+{(y&#39;)}^2]}^{\frac{3}{2}}}\\
   r &amp;= \frac{1}{k} = \dfrac{{[1+{(y&#39;)}^2]}^{\frac{3}{2}}}{|y&#39;&#39;|},{y}&#39;&#39;\neq0
   \end{align*}
   $$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号:第5讲&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0729学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0729/</link>
        <pubDate>Tue, 29 Jul 2025 23:17:02 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0729/</guid>
        <description>&lt;h2 id=&#34;操作系统-mkdir&#34;&gt;操作系统-mkdir
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;文件的物理结构
&lt;ol&gt;
&lt;li&gt;连续分配&lt;/li&gt;
&lt;li&gt;链接分配
&lt;ul&gt;
&lt;li&gt;隐式链接&lt;/li&gt;
&lt;li&gt;显式链接(FAT,file allocation table)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;索引分配
&lt;ol&gt;
&lt;li&gt;单级索引分配&lt;/li&gt;
&lt;li&gt;多级索引分配&lt;/li&gt;
&lt;li&gt;混合索引分配&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;磁盘的管理和组织
&lt;ol&gt;
&lt;li&gt;磁盘结构
&lt;ul&gt;
&lt;li&gt;surface&lt;/li&gt;
&lt;li&gt;track&lt;/li&gt;
&lt;li&gt;gap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;磁盘访问时间&lt;/li&gt;
&lt;li&gt;文件存储空间管理
&lt;ol&gt;
&lt;li&gt;空闲表法&lt;/li&gt;
&lt;li&gt;空闲链表法
&lt;ol&gt;
&lt;li&gt;空闲盘块链&lt;/li&gt;
&lt;li&gt;空闲盘区链&lt;/li&gt;
&lt;li&gt;位示图&lt;/li&gt;
&lt;li&gt;成组链表法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;磁盘格式化
&lt;ol&gt;
&lt;li&gt;低级格式化&lt;/li&gt;
&lt;li&gt;高级格式化&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;附系统调用openreadclose使用代码示例&#34;&gt;附：系统调用&lt;code&gt;open(),read(),close()使用代码示例&lt;/code&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MAX_BUFFER_SIZE 128
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_the_same_thing&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;filename, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; sleep_enabled);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; sleep_enabled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Open a file in read-only mode
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: %s &amp;lt;filename&amp;gt; --sleep&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strcmp&lt;/span&gt;(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--sleep&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sleep_enabled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pid_t&lt;/span&gt; pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// Get the current process ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to fork&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  (pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Child process
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;do_the_same_thing&lt;/span&gt;(filename, sleep_enabled);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;do_the_same_thing&lt;/span&gt;(filename, sleep_enabled);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to fork&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_the_same_thing&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;filename,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; sleep_enabled)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(filename, O_RDONLY); &lt;span style=&#34;color:#75715e&#34;&gt;// O_RDONLY means read-only
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fd &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to open file&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ... use fd ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ssize_t&lt;/span&gt; bytes_read;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[MAX_BUFFER_SIZE];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        bytes_read &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(fd, buffer, MAX_BUFFER_SIZE &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Read up to MAX_BUFFER_SIZE - 1 bytes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (bytes_read &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Exit loop on error or EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        buffer[bytes_read] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Null-terminate the string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sleep_enabled)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Sleep for 1 second to simulate processing time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(fd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// This function is intentionally left empty.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// It serves as a placeholder to demonstrate that the code can be extended.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;课程编号:25-28&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0728学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0728/</link>
        <pubDate>Mon, 28 Jul 2025 19:40:10 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0728/</guid>
        <description>&lt;h2 id=&#34;数学-微分学习题&#34;&gt;数学-微分学习题
&lt;/h2&gt;&lt;h3 id=&#34;错题必刷榜&#34;&gt;错题必刷榜
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设函数$f(x)$连续，给出下列条件&lt;/p&gt;
&lt;p&gt;(A) $\lim\limits_{x\to 0}{\dfrac{|f(x)|-f(0)}{x}}$存在&lt;/p&gt;
&lt;p&gt;(B) $\lim\limits_{x\to 0}{\dfrac{f(x)-|f(0)|}{x}}$存在&lt;/p&gt;
&lt;p&gt;(C) $\lim\limits_{x\to 0}{\dfrac{|f(x)|}{x}}$存在&lt;/p&gt;
&lt;p&gt;(D) $\lim\limits_{x\to 0}{\dfrac{|f(x)|-|f(0)|}{x}}$存在&lt;/p&gt;
&lt;p&gt;其中能得到&amp;quot;$f(x)$在$x=0$处可导&amp;quot;的条件为&lt;/p&gt;
&lt;p&gt;(C)$\lim\limits_{x\to0}\dfrac{|f(x)|}{x}=0\Rightarrow\forall \epsilon&amp;gt;0,\left|\dfrac{|f(x)|}{x}-0\right|&amp;lt;\epsilon\Rightarrow\lim\limits_{x\to0}\left|\dfrac{f(x)}{x}\right|=0\Rightarrow f&amp;rsquo;(0)=0$&lt;/p&gt;
&lt;p&gt;(A)$f(0)=\lim\limits_{x\to0}{|f(x)|}\geq0\Rightarrow$if $f(0)=0$,the same as (C);else if $f(0)&amp;gt;0$，保号性使得$\exists \delta&amp;gt;0,f(x)&amp;gt;0,x\in(-\delta,\delta)$&lt;/p&gt;
&lt;p&gt;(B)$f(0)=\lim\limits_{x\to0}{f(x)}=|f(0)|\geq0\Rightarrow$if $f(0)=0$,显然成立;else if $f(0)&amp;gt;0$，也显然成立。&lt;/p&gt;
&lt;p&gt;(D)if $f(0)=0$,the same as (C);else 保号性使得两个绝对值内部同号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;故四个全符合。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;一些重要的泰勒展开式&#34;&gt;一些重要的泰勒展开式
&lt;/h3&gt;$$
\begin{align*}
\text{e}^x &amp;= \sum_{n=0}^{\infty} \frac{x^n}{n!} 
            = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \cdots \\[1ex]
\sin x     &amp;= \sum_{n=0}^{\infty} (-1)^n \frac{x^{2n+1}}{(2n+1)!} 
            = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + \cdots \\[1ex]
\cos x     &amp;= \sum_{n=0}^{\infty} (-1)^n \frac{x^{2n}}{(2n)!} 
            = 1 - \frac{x^2}{2!} + \frac{x^4}{4!} - \frac{x^6}{6!} + \cdots \\[1ex]
\ln(1+x)   &amp;= \sum_{n=1}^{\infty} (-1)^{n+1} \frac{x^n}{n} 
            = x - \frac{x^2}{2} + \frac{x^3}{3} - \frac{x^4}{4} + \cdots \quad (|x| &lt; 1) \\[1ex]
\frac{1}{1 - x} &amp;= \sum_{n=0}^{\infty} x^n 
                 = 1 + x + x^2 + x^3 + \cdots \quad (|x| &lt; 1) \\[1ex]
\frac{1}{1 + x} &amp;= \sum_{n=0}^{\infty} (-1)^n x^n 
                 = 1 - x + x^2 - x^3 + \cdots \quad (|x| &lt; 1) \\[1ex]
\arctan x  &amp;= \sum_{n=0}^{\infty} (-1)^n \frac{x^{2n+1}}{2n+1} 
            = x - \frac{x^3}{3} + \frac{x^5}{5} - \frac{x^7}{7} + \cdots \quad (|x| \leq 1)
\end{align*}
$$&lt;h3 id=&#34;常用高阶导数&#34;&gt;常用高阶导数
&lt;/h3&gt;$$
\begin{align*}
\left(e^{ax+b}\right)^{(n)}&amp;=a^ne^{ax+b}\\
[\sin{(ax+b)}]^{(n)}&amp;=a^n\sin{\left(ax+b+\dfrac{n\pi}{2}\right)}\\
[\cos{(ax+b)}]^{(n)}&amp;=a^n\cos{\left(ax+b+\dfrac{n\pi}{2}\right)}\\
[\ln(ax+b)]^{(n)}&amp;=(-1)^{n-1}a^n\frac{(n-1)!}{(ax+b)^{n}}\\
(\frac{1}{ax+b})^{(n)}&amp;=(-1)^na^n\frac{n!}{(ax+b)^{n+1}}
\end{align*}
$$</description>
        </item>
        <item>
        <title>0727学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0727/</link>
        <pubDate>Sun, 27 Jul 2025 18:55:08 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0727/</guid>
        <description>&lt;h2 id=&#34;数学-一元函数微分学&#34;&gt;数学-一元函数微分学
&lt;/h2&gt;&lt;h3 id=&#34;一元函数微分学的概念&#34;&gt;一元函数微分学的概念
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;导数&lt;/p&gt;
$$
   f&#39;(x_0) = \lim\limits_{x\to x_0}\frac{\Delta y}{\Delta x} = \lim\limits_{\Delta x\to 0}\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导数的几何意义&lt;/p&gt;
$$
   \begin{align*}
   	\text{切线方程：}y-y_0&amp;=f&#39;(x_0)(x-x_0) \\
   	\text{法线方程：}y-y_0&amp;=-\frac{1}{f&#39;(x_0)}(x-x_0),(f&#39;(x_0)\neq0)
   \end{align*}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高阶导数&lt;/p&gt;
$$
   f^{(n)}(x_0) = \lim\limits_{\Delta x\to x_0}\frac{f^{(n-1)}(x)-f^{(n-1)}(x_0)}{x-x_0}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微分概念&lt;/p&gt;
&lt;p&gt;设函数$y=f(x)$在点$x_0$的某邻域内有定义，且$x_0+\Delta x$在该邻域内，对于函数增量&lt;/p&gt;
$$
   \Delta y = f(x_0+\Delta x)- f(x_0)
   $$&lt;p&gt;若存在与$\Delta x$无关的常数$A$，使得&lt;/p&gt;
$$
   \Delta y = A\Delta x + o(\Delta x)
   $$&lt;p&gt;则称$f(x)$在$x=x_0$处可微，且$A\Delta x$为线性主部也叫做$f(x) $在点$x_0$处的微分，记为&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
$$
\left.dy\right|_{x=x_0}A\Delta x = f&#39;(x_0)\mathbf{d}x
$$&lt;h3 id=&#34;一元函数微分学的计算&#34;&gt;一元函数微分学的计算
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本求导公式&lt;/p&gt;
$$
   \begin{align*}
   	\left(x^{\alpha}\right)&#39; &amp;= \alpha x^{\alpha-1}\\
   	\left(a^x\right)&#39; &amp;= a^x\ln{a},(a&gt;0,a\neq 1)\\
   	\left(e^x\right)&#39; &amp;=e^x\\
   		\left(\log_ax\right)&#39; &amp;=\frac{1}{x\ln a},(a&gt;0,a\neq 1)\\
   	\left(\ln|x|\right)&#39; &amp;=\frac{1}{x}\\
   	\left(\sin x \right)&#39; &amp;=\cos x \\
   	\left(\cos x\right)&#39; &amp;=-\sin x \\
   	\left(\arcsin x\right)&#39; &amp;=\frac{1}{\sqrt{1-x^2}}\\
   	\left(\arccos x\right)&#39; &amp;=-\frac{1}{\sqrt{1-x^2}}\\
   	\left(\tan x\right)&#39; &amp;=\sec^2 x\\
   	\left(\cot x \right)&#39; &amp;=-\csc^2 x\\
   	\left(\arctan x\right)&#39; &amp;=\frac{1}{1+x^2}\\
   	\left(\text{arccot} x\right)&#39; &amp;=-\frac{1}{1+x^2}\\
   	\left(\sec x\right)&#39; &amp;=\sec x\tan x\\
   	\left(\csc x\right)&#39; &amp;=-\csc x \cot x\\
   	\left(\ln(x+\sqrt{x^2+1})\right)&#39; &amp;=\frac{1}{x^2+1}\\
   	\left(\ln(x+\sqrt{x^2-1})\right)&#39; &amp;=\frac{1}{x^2-1}\\
   \end{align*}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四则运算&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;和差&lt;/li&gt;
&lt;li&gt;积&lt;/li&gt;
&lt;li&gt;商&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复合函数的导数与微分形式的不变性&lt;/p&gt;
$$
   \mathbf{d}f(u)=f&#39;(u)\mathbf{d}u
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分段函数的导数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在分段点使用导数的定义&lt;/li&gt;
&lt;li&gt;在非分段点使用导数公式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反函数的导数&lt;/p&gt;
&lt;p&gt;设$y=f(x)$单调、可导函数，且$f&amp;rsquo;(x)\neq 0$,则存在反函数$x=\varphi(y)$，且$\frac{dx}{dy} = \frac{1}{\frac{dy}{dx}}$&lt;/p&gt;
$$
   \varphi&#39;(x) =\dfrac{1}{ \dfrac{\mathbf{d} arc\varphi(\varphi(x)) }{\mathbf{d}\varphi(x)}}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐函数求导法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数方程所确定的函数的导数&lt;/p&gt;
$$
   \begin{align}
   \begin{cases}
   x&amp;= \varphi(t)\\
   y&amp;= \omega(t)\\
   \end{cases}\\
   \frac{dy}{dx} = \dfrac{\frac{dy}{dt}}{\frac{dx}{dt}} = \dfrac{\omega&#39;(t)}{\varphi&#39;(t)}
   \end{align}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对数求导法
&lt;/p&gt;
$$
   \begin{align*}
   \ln y &amp;= \ln f(x)\\
   y&#39; &amp;= \frac{yf&#39;(x)}{f(x)}\\
   \end{align*}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;幂指数求导法
&lt;/p&gt;
$$
   u(x)^{v(x)} = e^{v(x)\ln u(x)}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高阶导数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;归纳法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;莱布尼茨公式
&lt;/p&gt;
$$
       \begin{align*}
       (u\pm v)^{(n)}&amp;= u^{(n)}\pm v^{(n)}\\
       (u v)^{(n)}&amp;= \sum\limits_{k=0}^{n}C_{n}^{k}u^{(k)}v^{(n-k)}
       \end{align*}
       $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;泰勒展开式，利用展开唯一性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号：第三、四讲&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
</description>
        </item>
        <item>
        <title>网页更新日志.0727</title>
        <link>http://localhost:1313/npee_learning_log.github.io/update/0727/</link>
        <pubDate>Sun, 27 Jul 2025 02:31:05 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/update/0727/</guid>
        <description>&lt;h2 id=&#34;hello-world&#34;&gt;Hello World
&lt;/h2&gt;&lt;p&gt;这是博主在某个深夜对着自己的博客网页捣鼓后，突然做出的决定：当网站有重大版本更新的时候，记录新版本的变化。&lt;/p&gt;
&lt;p&gt;其实这个博客页面已经长期维护了2周，一直没有认真上手去学习&lt;code&gt;hugo&lt;/code&gt;和&lt;code&gt;stack&lt;/code&gt;的相关配置，主页的样子也是主打一个能用就行。但是这就是我的网站，我认为有必要记录它和我的成长变化，也好在日后回忆中逐渐鲜活这一路走来的历程，现在博主锐意备战今年（2025）的考研，因此这个网站主要还是记录自己的学习进度和笔记。以后&amp;hellip;&amp;hellip;也许会变成一个更丰富的网站（吧？雾！）&lt;/p&gt;
&lt;p&gt;总之，姑且用一句计算机的经典开场白标志着这一切的开始！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello World！&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;目前网站版本已经进入2.0时代，下面简单说明一下1.0版本&lt;/p&gt;
&lt;h3 id=&#34;version10&#34;&gt;Version.1.0
&lt;/h3&gt;&lt;p&gt;这个版本主要更新了以下特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stack&lt;/a&gt;默认模板作为主题&lt;/li&gt;
&lt;li&gt;使用github 的Action 功能生成博客挂载到github上的个人网站&lt;/li&gt;
&lt;li&gt;确定了三种主要的博客文章种类，即日志，日记，笔记&lt;/li&gt;
&lt;li&gt;使用&lt;a class=&#34;link&#34; href=&#34;https://katex.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;Katex&lt;/code&gt;&lt;/a&gt;作为数学公式的latex生成引擎&lt;/li&gt;
&lt;li&gt;简单设计了个人主页的形式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;version20&#34;&gt;Version.2.0
&lt;/h3&gt;&lt;p&gt;这个版本完成于07-27凌晨，目的是“让博客更有个人的风格”，因此不免要修改原来的模板，总的来说，这个版本进行了如下的变化&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主页右边的工具栏新增“Safari”(文章关键字检索),&amp;ldquo;Archive&amp;rdquo;(文章按照YY-MM进行分类汇总)&lt;/li&gt;
&lt;li&gt;主页页脚添加友链，目前有大学舍友的个人网站&lt;/li&gt;
&lt;li&gt;新增栏目：更新日志！&lt;/li&gt;
&lt;li&gt;丰富了主页左侧的目录显示风格&lt;/li&gt;
&lt;li&gt;更新了新的个人签名（时不时会因为心情、中二病、心血来潮、喜欢某一句歌词怎么怎么的更新一下），之后也会在例行的更新中添加历史签名。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;git-commit-历史&#34;&gt;Git Commit 历史
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Commit Hash&lt;/th&gt;
          &lt;th&gt;Author&lt;/th&gt;
          &lt;th&gt;Date&lt;/th&gt;
          &lt;th&gt;Message&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;d8586f&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-27&lt;/td&gt;
          &lt;td&gt;add a new column :update,upload the first update md and good night!&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;7d23d05&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-27&lt;/td&gt;
          &lt;td&gt;delete the example page of the theme&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;363db66&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-27&lt;/td&gt;
          &lt;td&gt;copy the partials dir into personal layout dir to make the theme customized&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;0b7f124&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-27&lt;/td&gt;
          &lt;td&gt;refresh the outlook of the home page, add searching wiget: SAFARI, archives widget: ARCHIVES sorted by YY-MM and so on&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ffcc3ad&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-27&lt;/td&gt;
          &lt;td&gt;Added some supplementary notes to the original 0726 memo content&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;b30977c&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-26&lt;/td&gt;
          &lt;td&gt;upload 0726 memo with OS and English part&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;f0be782&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-25&lt;/td&gt;
          &lt;td&gt;upload 0725 memo with new contents [tips]&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;d2c2623&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-25&lt;/td&gt;
          &lt;td&gt;upload 0725 memo&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;73ee5ce&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-24&lt;/td&gt;
          &lt;td&gt;upload 0723 log&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;774320b&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-23&lt;/td&gt;
          &lt;td&gt;success to adjusting the outlook of the equations&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;cd814b0&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-23&lt;/td&gt;
          &lt;td&gt;upload 0722.md but need to adjust the outlook of the equations&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;7020417&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-22&lt;/td&gt;
          &lt;td&gt;upload 0721 memo about stack data structure&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;326f71e&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-21&lt;/td&gt;
          &lt;td&gt;upload 0721 log with more details&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4f5c09e&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-21&lt;/td&gt;
          &lt;td&gt;upload 0721 log&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;c96a603&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-19&lt;/td&gt;
          &lt;td&gt;update my subtitle with a song of my favorite team YORUSHIKA&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;6166a2e&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-19&lt;/td&gt;
          &lt;td&gt;upload 0719 log&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;43e7c0c&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-18&lt;/td&gt;
          &lt;td&gt;upload 0718 memo&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;8c131da&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-17&lt;/td&gt;
          &lt;td&gt;upload 0717 memo&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;459dd19&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-17&lt;/td&gt;
          &lt;td&gt;upload 0717 log&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;9c3b26b&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-15&lt;/td&gt;
          &lt;td&gt;upload 0715 log&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3fa4544&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-14&lt;/td&gt;
          &lt;td&gt;add the code of courses&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ad32158&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-14&lt;/td&gt;
          &lt;td&gt;upload 0714 memo and make a Katex math environment available&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;d665354&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-14&lt;/td&gt;
          &lt;td&gt;upload 0714 log&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;f465180&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-14&lt;/td&gt;
          &lt;td&gt;upload the log and memo of 0713&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;f11a353&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-13&lt;/td&gt;
          &lt;td&gt;fix some bugs&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;77f102e&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-12&lt;/td&gt;
          &lt;td&gt;upload a new memo about system call&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;51baa47&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-12&lt;/td&gt;
          &lt;td&gt;just display the posts at the first page&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;b2f1bce&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-12&lt;/td&gt;
          &lt;td&gt;forget to remove the draft tag&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;8338f47&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-12&lt;/td&gt;
          &lt;td&gt;upload 0712 diary and log&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;c11d079&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-12&lt;/td&gt;
          &lt;td&gt;renew a theme of stack&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4cce612&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-12&lt;/td&gt;
          &lt;td&gt;renew a theme with stack&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;0859e5b&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-11&lt;/td&gt;
          &lt;td&gt;upload 0711 OS&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;c639077&lt;/td&gt;
          &lt;td&gt;Shy&lt;/td&gt;
          &lt;td&gt;2025-07-1&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>0726学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0726/</link>
        <pubDate>Sat, 26 Jul 2025 11:19:57 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0726/</guid>
        <description>&lt;h2 id=&#34;操作系统-一些易错知识点&#34;&gt;操作系统-一些易错知识点
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在计算平均访存时间时要注意快表TLB和页表的访问是&lt;strong&gt;串行&lt;/strong&gt;还是并行的，也要注意页表是&lt;strong&gt;单级&lt;/strong&gt;还是多级的&lt;/li&gt;
&lt;li&gt;虚拟存储器的&lt;strong&gt;最大容量&lt;/strong&gt;只和计算机的地址结构决定，&lt;strong&gt;实际容量&lt;/strong&gt;和内存和外存有关&lt;/li&gt;
&lt;li&gt;工作集不是驻留集的子集，只是数量要小于（不大于）驻留集的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一些你需要搞明白的概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;链接，包括静态和动态&lt;/p&gt;
&lt;p&gt;链接是将不同编译单元及其依赖库整合到一个统一逻辑地址空间的过程。根据发生时间不同，链接分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;静态链接&lt;/strong&gt;：在编译阶段将所有代码打包进可执行文件中；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态链接&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加载时链接（Load-Time Linking）&lt;/strong&gt;：程序加载时操作系统自动加载依赖库；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时链接（Run-Time Linking）&lt;/strong&gt;：程序运行过程中手动加载库，例如通过 &lt;code&gt;dlopen()&lt;/code&gt; 等函数调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类别&lt;/th&gt;
          &lt;th&gt;链接时间&lt;/th&gt;
          &lt;th&gt;控制方式&lt;/th&gt;
          &lt;th&gt;示例函数&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;静态链接&lt;/td&gt;
          &lt;td&gt;编译/链接阶段&lt;/td&gt;
          &lt;td&gt;编译器自动处理&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;动态链接（加载时）&lt;/td&gt;
          &lt;td&gt;程序加载阶段&lt;/td&gt;
          &lt;td&gt;操作系统自动处理&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;动态链接（运行时）&lt;/td&gt;
          &lt;td&gt;程序运行阶段&lt;/td&gt;
          &lt;td&gt;程序员手动调用&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;dlopen&lt;/code&gt;, &lt;code&gt;dlsym&lt;/code&gt; 等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;$&amp;gt;dive into the procedure of linking of a C code program(Gemini 2.5 pro)&lt;/p&gt;
&lt;h3 id=&#34;the-final-step-unraveling-the-linking-process-of-a-c-program&#34;&gt;The Final Step: Unraveling the Linking Process of a C Program
&lt;/h3&gt;&lt;p&gt;The journey from human-readable C code to an executable program culminates in a crucial, often-overlooked stage: linking. This final step in the compilation process is where all the disparate pieces of your program are brought together to create a single, functional executable file. The linker, a key component of the C toolchain, orchestrates this assembly, resolving references between different parts of your code and incorporating necessary library functions.&lt;/p&gt;
&lt;p&gt;The compilation of a C program is a multi-stage process. First, the preprocessor handles directives like &lt;code&gt;#include&lt;/code&gt; and &lt;code&gt;#define&lt;/code&gt;. The preprocessed code is then compiled into assembly language, which is subsequently converted into machine-readable object files. These object files, however, are not yet ready to run. They are incomplete pieces of a larger puzzle, and it is the linker&amp;rsquo;s job to put them together.&lt;/p&gt;
&lt;p&gt;The primary role of the linker is to take one or more object files, along with any necessary libraries, and combine them into a single executable file. A key function of the linker is &lt;strong&gt;symbol resolution&lt;/strong&gt;. When you call a function in one C file that is defined in another, the compiler leaves a placeholder, or a reference, in the object file. The linker&amp;rsquo;s job is to find the actual memory address of that function in the other object file and replace the placeholder with this address. This ensures that when the program runs, the function call correctly jumps to the right location in memory.&lt;/p&gt;
&lt;h3 id=&#34;static-vs-dynamic-linking-two-approaches-to-integration&#34;&gt;Static vs. Dynamic Linking: Two Approaches to Integration
&lt;/h3&gt;&lt;p&gt;There are two fundamental ways a linker can incorporate external code into your program: static linking and dynamic linking.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Static Linking:&lt;/strong&gt; In this approach, all the required library code is copied directly into the final executable file. This creates a self-contained program that does not rely on external libraries to be present on the system where it is run.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Advantages of Static Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Portability:&lt;/strong&gt; The executable can be run on systems that do not have the required libraries installed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Potentially Faster Execution:&lt;/strong&gt; Since all the code is in one place, it can sometimes lead to faster execution as there is no need to load external libraries at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages of Static Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Larger Executable Size:&lt;/strong&gt; Because all library code is included, the resulting executable file is larger.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inefficient Memory and Disk Space Usage:&lt;/strong&gt; If multiple programs on a system use the same statically linked library, each will have its own copy, leading to redundant use of disk space and memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Difficult to Update:&lt;/strong&gt; To update a library, every program that uses it must be re-linked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Linking:&lt;/strong&gt; In contrast, dynamic linking does not copy the library code into the executable. Instead, it only includes the names of the shared libraries that the program needs. The actual linking of the library code happens at runtime when the program is loaded into memory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Advantages of Dynamic Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Smaller Executable Size:&lt;/strong&gt; The executables are smaller as they only contain references to the shared libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient Memory and Disk Space Usage:&lt;/strong&gt; A single copy of a shared library in memory can be used by multiple programs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easier Updates:&lt;/strong&gt; To update a library, you only need to replace the shared library file; all programs that use it will automatically benefit from the update without needing to be re-linked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages of Dynamic Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dependencies:&lt;/strong&gt; The program will not run if the required shared libraries are not present on the system or if the version is incompatible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slightly Slower Startup:&lt;/strong&gt; There can be a minor performance overhead at startup as the dynamic linker needs to find and load the necessary shared libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-linking-process-in-action-with-gcc&#34;&gt;The Linking Process in Action with GCC
&lt;/h3&gt;&lt;p&gt;The GNU Compiler Collection (GCC) is a popular toolchain for compiling and linking C programs. The linking process can be performed as a separate step or combined with compilation.&lt;/p&gt;
&lt;p&gt;To compile a C source file (&lt;code&gt;.c&lt;/code&gt;) into an object file (&lt;code&gt;.o&lt;/code&gt;), you can use the &lt;code&gt;-c&lt;/code&gt; flag with &lt;code&gt;gcc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -c my_program.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create an object file named &lt;code&gt;my_program.o&lt;/code&gt;. If your program is split across multiple source files, you would compile each one into an object file.&lt;/p&gt;
&lt;p&gt;Once you have all the necessary object files, you can link them together to create an executable file using the &lt;code&gt;-o&lt;/code&gt; flag to specify the output file name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -o my_executable my_program.o another_file.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command tells &lt;code&gt;gcc&lt;/code&gt; to link &lt;code&gt;my_program.o&lt;/code&gt; and &lt;code&gt;another_file.o&lt;/code&gt; and create an executable file named &lt;code&gt;my_executable&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;common-linker-errors&#34;&gt;Common Linker Errors
&lt;/h3&gt;&lt;p&gt;Errors that occur during the linking phase are known as linker errors. Some of the most common linker errors include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Undefined Symbol/Undefined Reference:&lt;/strong&gt; This is the most frequent linker error. It occurs when the linker cannot find the definition for a function or variable that has been declared and used in the code. This often happens when you forget to link an object file that contains the definition or mistype a function name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Definitions:&lt;/strong&gt; This error arises when the linker finds more than one definition for the same function or variable. This can happen if you define a function in a header file that gets included in multiple source files or if you link the same object file multiple times.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, the linking process is the essential final act in the creation of a C program. By understanding how the linker works, the differences between static and dynamic linking, and how to use tools like &lt;code&gt;gcc&lt;/code&gt; to control the linking process, developers can gain a deeper insight into how their code is transformed into a runnable application and more effectively troubleshoot common errors.&lt;/p&gt;
&lt;p&gt;$&amp;gt;are there different categories of dynamic linking technique?(Gemini 2.5 pro)&lt;/p&gt;
&lt;p&gt;Yes, there are different categories of dynamic linking techniques, each with its own timing and mechanism for connecting a program to the shared libraries it needs. The main distinctions lie in &lt;em&gt;when&lt;/em&gt; the linking happens and &lt;em&gt;who&lt;/em&gt; initiates it.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a breakdown of the primary categories of dynamic linking:&lt;/p&gt;
&lt;h3 id=&#34;1-load-time-dynamic-linking-implicit-linking&#34;&gt;1. Load-Time Dynamic Linking (Implicit Linking)
&lt;/h3&gt;&lt;p&gt;This is the most common form of dynamic linking. When you compile and link your program against a shared library, the linker embeds references to that library directly into the executable file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;At compile time:&lt;/strong&gt; The linker records the names of the shared libraries the program depends on and the symbols (functions and variables) it uses from them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At load time:&lt;/strong&gt; When you run the executable, the operating system&amp;rsquo;s program loader (also known as the dynamic linker or runtime linker) reads this dependency information. It then locates the necessary shared libraries on the system, loads them into the process&amp;rsquo;s address space, and resolves all the symbol references before the program&amp;rsquo;s main function begins to execute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automatic:&lt;/strong&gt; The entire process is handled automatically by the operating system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependencies are required at startup:&lt;/strong&gt; If any of the required shared libraries are missing or incompatible, the program will fail to start.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slight startup overhead:&lt;/strong&gt; There is a small performance cost at program launch while the dynamic linker does its work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-run-time-dynamic-linking-explicit-linking-or-dynamic-loading&#34;&gt;2. Run-Time Dynamic Linking (Explicit Linking or Dynamic Loading)
&lt;/h3&gt;&lt;p&gt;This technique gives the programmer more control over the linking process. Instead of the operating system automatically loading libraries at startup, the program itself can explicitly load and unload libraries at any point during its execution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programmatic Control:&lt;/strong&gt; The program uses specific API calls (like &lt;code&gt;dlopen()&lt;/code&gt;, &lt;code&gt;dlsym()&lt;/code&gt;, and &lt;code&gt;dlclose()&lt;/code&gt; on POSIX systems, or &lt;code&gt;LoadLibrary()&lt;/code&gt;, &lt;code&gt;GetProcAddress()&lt;/code&gt;, and &lt;code&gt;FreeLibrary()&lt;/code&gt; on Windows) to manage shared libraries.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dlopen()&lt;/code&gt; or &lt;code&gt;LoadLibrary()&lt;/code&gt;: Loads a specified library into memory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dlsym()&lt;/code&gt; or &lt;code&gt;GetProcAddress()&lt;/code&gt;: Retrieves the address of a specific function or variable within the loaded library.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dlclose()&lt;/code&gt; or &lt;code&gt;FreeLibrary()&lt;/code&gt;: Unloads the library from memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; Programs can decide which libraries to load based on runtime conditions. This is the foundation for a &amp;ldquo;plugin&amp;rdquo; architecture, where new functionality can be added to a running application by loading new shared libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No startup dependency:&lt;/strong&gt; The program can start even if the optional libraries are not present. It can then check for their availability and load them if needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More complex to implement:&lt;/strong&gt; The programmer is responsible for managing the loading, symbol lookup, and unloading of libraries, which requires more code and error handling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a-special-case-lazy-linking&#34;&gt;A Special Case: Lazy Linking
&lt;/h3&gt;&lt;p&gt;Lazy linking is an optimization often used with load-time dynamic linking to improve program startup time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of resolving all function addresses when the program is first loaded, the dynamic linker defers the resolution of each function until it is actually called for the first time.&lt;/li&gt;
&lt;li&gt;The first time a function in a shared library is called, a small piece of code (a &amp;ldquo;trampoline&amp;rdquo; or &amp;ldquo;stub&amp;rdquo;) in the program&amp;rsquo;s Procedure Linkage Table (PLT) transfers control to the dynamic linker. The dynamic linker then looks up the real address of the function, patches the PLT entry to point directly to it, and then calls the function.&lt;/li&gt;
&lt;li&gt;Subsequent calls to that same function will then go directly to the function&amp;rsquo;s address without involving the dynamic linker, resulting in minimal overhead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Faster startup:&lt;/strong&gt; By avoiding the upfront cost of resolving every single function, the program can start executing more quickly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimal overhead on first call:&lt;/strong&gt; There is a small performance penalty the very first time each dynamically linked function is called.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transparent to the developer:&lt;/strong&gt; This is typically a default behavior of the dynamic linker and doesn&amp;rsquo;t require any special coding by the programmer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In essence, while &lt;strong&gt;load-time&lt;/strong&gt; and &lt;strong&gt;run-time&lt;/strong&gt; dynamic linking are the two main strategies, &lt;strong&gt;lazy linking&lt;/strong&gt; is a common optimization that fine-tunes the performance of load-time linking. The choice between these techniques depends on the specific needs of the application, balancing ease of use, startup performance, and the flexibility to load code on demand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卡特兰数，用于计算给定输入栈序列，所有可能的输出排列
&lt;/p&gt;
$$
   \frac{1}{n+1}\binom{2n}{n}=\frac{2n!}{(n+1)!n!}
   $$&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;英语-单词词根词缀分开&#34;&gt;英语-单词（词根词缀分开）
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;a vail&lt;/li&gt;
&lt;li&gt;mock&lt;/li&gt;
&lt;li&gt;gigantic&lt;/li&gt;
&lt;li&gt;zoom&lt;/li&gt;
&lt;li&gt;speci fication&lt;/li&gt;
&lt;li&gt;pa nel&lt;/li&gt;
&lt;li&gt;pre mise&lt;/li&gt;
&lt;li&gt;sovereign&lt;/li&gt;
&lt;li&gt;utter&lt;/li&gt;
&lt;li&gt;deem&lt;/li&gt;
&lt;li&gt;mono poly&lt;/li&gt;
&lt;li&gt;spec ulate&lt;/li&gt;
&lt;li&gt;con form&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0725学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0725/</link>
        <pubDate>Fri, 25 Jul 2025 20:24:54 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0725/</guid>
        <description>&lt;h2 id=&#34;操作系统-易错小知识&#34;&gt;操作系统-易错小知识
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在多个进程并发执行时，所有进程的页表大多数驻留在内存中，在系统中只设置一个页表寄存器（PTR），它存放页表在内存中的始址和长度&lt;/li&gt;
&lt;li&gt;分段方式对低级语言程序员和编译器是可见的，对高级语言程序员是透明的&lt;/li&gt;
&lt;li&gt;在这四种动态分区分配算法中，（首次适应，最坏适应，最佳适应，循环首次适应），最佳适应由于其总是会选择和待分配空间“最接近”的空闲区，因此总是会产生难以利用的小的内存块。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[tips]&lt;/code&gt;页表项的数量最好刚好填满一整个页&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数学-数列极限&#34;&gt;数学-数列极限
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一个积分小技巧,似乎跟傅里叶级数有关系，但是我没看出来（插个眼）
$$
   \begin{align*}
   \int_{0}^{\frac{\pi}{2}}{\sin^{n+1} t \text{d} t} &amp;= \left.(-\sin^nt\cdot \cos t)\right|_{0}^{\frac{\pi}{2}} - \int_{0}^{\frac{\pi}{2}}{-\cos t \text{d} \sin^n t}\\
   &amp;=n\int_{0}^{\frac{\pi}{2}}{\cos^2 t \sin^{n-1} \text{d}  t}\\
   &amp;=n\int_{0}^{\frac{\pi}{2}}{(1-\sin^2t) \sin^{n-1} \text{d}  t}\\
   \\
   \int_{0}^{\frac{\pi}{2}}{\sin^{n+1} t \text{d} t}&amp;=\frac{n}{n+1}\int_{0}^{\frac{\pi}{2}}{\sin^{n-1} t \text{d} t}
   \end{align*}
   $$&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;英语-即使是认识的单词也有不认识的词根词缀&#34;&gt;英语-即使是认识的单词也有不认识的词根词缀
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ac company&lt;/li&gt;
&lt;li&gt;mono poly&lt;/li&gt;
&lt;li&gt;di lute&lt;/li&gt;
&lt;li&gt;trans action&lt;/li&gt;
&lt;li&gt;re sent&lt;/li&gt;
&lt;li&gt;con temporary&lt;/li&gt;
&lt;li&gt;spec u late&lt;/li&gt;
&lt;li&gt;in cur&lt;/li&gt;
&lt;li&gt;im plement&lt;/li&gt;
&lt;li&gt;pro ce dure&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0723学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0723/</link>
        <pubDate>Wed, 23 Jul 2025 23:53:15 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0723/</guid>
        <description>&lt;h2 id=&#34;数学-1000题&#34;&gt;数学-1000题
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;对于$x_{n+1}=f(x_n)$的数列极限的判定的过程
&lt;ol&gt;
&lt;li&gt;单调有界&lt;/li&gt;
&lt;li&gt;拉格朗日中值定理&lt;/li&gt;
&lt;li&gt;放缩&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;对于行列式的计算的方法
&lt;ol&gt;
&lt;li&gt;上下三角行列式&lt;/li&gt;
&lt;li&gt;反三角行列式&lt;/li&gt;
&lt;li&gt;范德蒙德行列式&lt;/li&gt;
&lt;li&gt;递推&lt;/li&gt;
&lt;li&gt;归纳&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;英语-不背单词&#34;&gt;英语-不背单词
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;twist&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ultimate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strike&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;crucial&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;subordinate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;anguish&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;subtle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;constitute&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;suffice&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eminent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prudent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;courtesy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;harsh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indispensable&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0722学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0722/</link>
        <pubDate>Tue, 22 Jul 2025 23:31:50 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0722/</guid>
        <description>&lt;h2 id=&#34;操作系统--la-pa-ca&#34;&gt;操作系统- (LA-PA-CA)
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;带快表的两级系统的地址翻译过程
&lt;ol&gt;
&lt;li&gt;从逻辑地址映射到物理地址（虚拟存储器）&lt;/li&gt;
&lt;li&gt;从物理地址映射到Cache地址（主存-Cache系统）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文件和文件系统
&lt;ol&gt;
&lt;li&gt;构成文件的基本单位&lt;/li&gt;
&lt;li&gt;文件的定义&lt;/li&gt;
&lt;li&gt;文件属性&lt;/li&gt;
&lt;li&gt;文件的基本操作&lt;/li&gt;
&lt;li&gt;文件的打开和关闭的操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文件的逻辑结构&lt;/li&gt;
&lt;li&gt;目录管理
&lt;ol&gt;
&lt;li&gt;目录的概念&lt;/li&gt;
&lt;li&gt;文件控制块和索引节点&lt;/li&gt;
&lt;li&gt;目录结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;英语-vocabularybuilder&#34;&gt;英语-VocabularyBuilder
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;CRIM,comes from the Latin words for &amp;ldquo;fault or crime&amp;rdquo; or &amp;ldquo;accusation.&amp;rdquo;
&lt;ol&gt;
&lt;li&gt;criminology&lt;/li&gt;
&lt;li&gt;decriminalize&lt;/li&gt;
&lt;li&gt;incriminate&lt;/li&gt;
&lt;li&gt;recrimination&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;PROB,comes from the Latin words for  &amp;ldquo;prove or proof &amp;ldquo;and &amp;ldquo;honesy or integrity.&amp;rdquo;
&lt;ol&gt;
&lt;li&gt;approbation&lt;/li&gt;
&lt;li&gt;probate&lt;/li&gt;
&lt;li&gt;probity&lt;/li&gt;
&lt;li&gt;reprobate&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;GRAV, comes from the Latin word meaning &amp;ldquo;heavy ,weighty ,serious&amp;rdquo;
&lt;ol&gt;
&lt;li&gt;grave&lt;/li&gt;
&lt;li&gt;gravitas&lt;/li&gt;
&lt;li&gt;gravitate&lt;/li&gt;
&lt;li&gt;aggravate&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;LEV,comes from the Latin adjective $levis$,meaning &amp;ldquo;light&amp;rdquo;,and the verb $levare$,meaning &amp;ldquo;to raise or lighten.&amp;rdquo;
&lt;ol&gt;
&lt;li&gt;alleviate&lt;/li&gt;
&lt;li&gt;elevation&lt;/li&gt;
&lt;li&gt;contilever&lt;/li&gt;
&lt;li&gt;levity&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数学-行列式&#34;&gt;数学-行列式
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;行列式的本质定义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式的性质&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h6 id=&#34;aat&#34;&gt;$|A|=|A^T|$
&lt;/h6&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若行列式中某行(列)元素全为零，则行列式为零&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若行列式中某行(列) 元素有公因子$k\neq0$，则$k$可提到行列式外面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式中某行(列)元素均是两个数之和，则可拆成两个行列式之和&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式中两行(列)互换，行列式变号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式中的两行(列)元素相等或对应成比例，则行列式为零&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式的逆序法定义
&lt;/p&gt;
$$
   \begin{vmatrix}
   a_{11} &amp; a_{12} &amp; \cdots&amp;a_{1n}\\
   a_{21} &amp; a_{22} &amp; \cdots&amp;a_{2n}\\
   \vdots &amp; \vdots &amp; &amp;\vdots\\
   a_{n1} &amp; a_{n2} &amp; \cdots&amp;a_{nn}\\
   \end{vmatrix}=\sum\limits_{j_1j_2\cdots j_n}{(-1)^{\tau(j_1j_2\cdots j_n)}}a_{j_1}a_{j_2}\cdots a_{j_n}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行列式的展开定理
&lt;/p&gt;
$$
   |A| = \sum\limits_{j=1}^na_{ij}A_{ij}
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;几个重要的行列式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主对角线行列式(上(下)三角形行列式)
&lt;/p&gt;
$$
      \begin{vmatrix}
      a_{11} &amp; a_{12} &amp; \cdots&amp;a_{1n}\\
      0 &amp; a_{22} &amp; \cdots&amp;a_{2n}\\
      \vdots &amp; \vdots &amp; &amp;\vdots\\
      0 &amp; 0 &amp; \cdots&amp;a_{nn}\\
      \end{vmatrix}=\begin{vmatrix}
      a_{11} &amp; 0 &amp; \cdots&amp;0\\
      a_{21} &amp; a_{22} &amp; \cdots&amp;0\\
      \vdots &amp; \vdots &amp; &amp;\vdots\\
      a_{n1} &amp; a_{n2} &amp; \cdots&amp;a_{nn}\\
      \end{vmatrix}=\begin{vmatrix}
      a_{11} &amp; 0 &amp; \cdots&amp;0\\
      0 &amp; a_{22} &amp; \cdots&amp;0\\
      \vdots &amp; \vdots &amp; &amp;\vdots\\
      0 &amp; 0 &amp; \cdots&amp;a_{nn}\\
      \end{vmatrix}=\prod\limits_{i=1}^n a_{ii}
      $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;副对角线行列式
&lt;/p&gt;
$$
      \begin{vmatrix}
      a_{11} &amp; \cdots &amp; a_{1,n-1}&amp;a_{1n}\\
      a_{21} &amp; \cdots &amp; a_{2,n-1}&amp;0\\
      \vdots &amp;  &amp;\vdots &amp;\vdots\\
      a_{n1} &amp;\cdots&amp;0 &amp;0\\
      \end{vmatrix}=\begin{vmatrix}
      0 &amp; \cdots &amp; 0&amp;a_{1n}\\
      0 &amp;\cdots &amp; a_{2,n-1}&amp;a_{2n}\\
      \vdots &amp; &amp; \vdots &amp;\vdots\\
      a_{n1} &amp;\cdots &amp; a_{n,n-1}&amp;a_{nn}\\
      \end{vmatrix}=\begin{vmatrix}
      0 &amp; \cdots &amp; 0&amp;a_{1n}\\
      0 &amp; \cdots &amp; a_{2,n-1}&amp;0\\
      \vdots &amp; &amp;  \vdots&amp;\vdots\\
      a_{n1} &amp; \cdots &amp; 0&amp;0\\
      \end{vmatrix}=(-1)^{\frac{n(n-1)}{2}}\prod\limits_{i=1}^n a_{i(n+1-i)}
      $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拉普拉斯展开式($A\in R^{m\times m},B\in R^{n\times n}$)
&lt;/p&gt;
$$
      \begin{vmatrix}
      A&amp;O\\
      O&amp;B
      \end{vmatrix}=\begin{vmatrix}
      A&amp;C\\
      O&amp;B
      \end{vmatrix}=\begin{vmatrix}
      A&amp;O\\
      C&amp;B
      \end{vmatrix}=|A||B|
      $$$$
      \begin{vmatrix}
      O&amp;A\\
      B&amp;O
      \end{vmatrix}=\begin{vmatrix}
      C&amp;A\\
      B&amp;O
      \end{vmatrix}=\begin{vmatrix}
      O&amp;A\\
      B&amp;C
      \end{vmatrix}=(-1)^{mn}|A||B|
      $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范德蒙德行列式,$(1\leq i &amp;lt;j\leq n)$
&lt;/p&gt;
$$
      \begin{vmatrix}
      1&amp;1&amp;\cdots&amp;1\\
      x_1&amp;x_2&amp;\cdots&amp;x_n\\
      x_1^2&amp;x_2^2&amp;\cdots&amp;x_n^2\\
      \vdots&amp;\vdots&amp;&amp;\vdots\\
      x_1^n&amp;x_2^n&amp;\cdots&amp;x_n^n
      \end{vmatrix}=\prod\limits_{i,j}{(x_i-x_j)}
      $$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0721学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0721/</link>
        <pubDate>Mon, 21 Jul 2025 22:59:30 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0721/</guid>
        <description>&lt;h2 id=&#34;数据结构-代码待完善&#34;&gt;数据结构-代码(待完善)
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;栈的定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;stack.h&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define STATIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define DYNAMIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define DATATYPE void *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef STATIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define STACK_H 100
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; StaticStack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATATYPE stack[STACK_H];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max_depth;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; top;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} StaticStack;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_static_stack&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_push&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_pop&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_top&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef DYNAMIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; DynamicStack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATATYPE data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} DynamicStack;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//returns a top-pointer to a new dynamic stack
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_dynamic_stack&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_push&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_pop&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_top&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;stack.c&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stack.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef STATIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_static_stack&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STACK_H; &lt;span style=&#34;color:#75715e&#34;&gt;// Initialize depth to 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_push&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_depth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Static stack overflow&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Stack is full
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stack[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;(s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_pop&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Static stack underflow&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Stack is empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stack[(s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top)&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_top&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Static stack is empty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Stack is empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stack[s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top]; &lt;span style=&#34;color:#75715e&#34;&gt;// Get the top value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true; &lt;span style=&#34;color:#75715e&#34;&gt;// Successfully retrieved the top value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef DYNAMIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_dynamic_stack&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;new_stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(DynamicStack));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(new_stack &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL; &lt;span style=&#34;color:#75715e&#34;&gt;// Memory allocation failed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       new_stack&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; new_stack;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_push&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;new_item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(DynamicStack));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;new_item) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to push %d onto dynamic stack&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Memory allocation failed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_item;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_pop&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dynamic stack is empty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Stack is empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;free&lt;/span&gt;(temp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_top&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dynamic stack is empty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Stack is empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data; &lt;span style=&#34;color:#75715e&#34;&gt;// Get the data from the top item
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true; &lt;span style=&#34;color:#75715e&#34;&gt;// Successfully retrieved the top value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}                                               
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0721学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0721/</link>
        <pubDate>Mon, 21 Jul 2025 17:53:02 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0721/</guid>
        <description>&lt;h2 id=&#34;英语-vocabulary-builder&#34;&gt;英语-vocabulary builder
&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;The Merriam-Webster Vocabulary Builder&lt;/code&gt;作为词根法扩充词汇量的工具书(由网友canon提供)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;BENE , latin for &lt;code&gt;well&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;benediction&lt;/li&gt;
&lt;li&gt;benefactor&lt;/li&gt;
&lt;li&gt;benefaciary&lt;/li&gt;
&lt;li&gt;benevolence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AM, comes form the latin &lt;code&gt;admare&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;amicable&lt;/li&gt;
&lt;li&gt;enamored&lt;/li&gt;
&lt;li&gt;amorous&lt;/li&gt;
&lt;li&gt;paramour&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BELL,comes from the latin word meaning &lt;code&gt;war&lt;/code&gt;.Bellona was the little-known goddess of war .
&lt;ul&gt;
&lt;li&gt;antebellum&lt;/li&gt;
&lt;li&gt;belligerence&lt;/li&gt;
&lt;li&gt;bellicose&lt;/li&gt;
&lt;li&gt;rebellion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PAC,is related to the Latin words for &amp;ldquo;agree&amp;rdquo; and &amp;ldquo;peace&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;pacify&lt;/li&gt;
&lt;li&gt;pacifist&lt;/li&gt;
&lt;li&gt;pact&lt;/li&gt;
&lt;li&gt;pace&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;操作系统-page--segment&#34;&gt;操作系统-page &amp;amp; segment
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本分页内存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;page&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;page frame&lt;/li&gt;
&lt;li&gt;page table&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;页号&lt;/th&gt;
          &lt;th&gt;页内偏移量&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;虚拟地址 = 页号 + 页内偏移&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LRU（最近最少使用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FIFO（先进先出）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CLOCK（近似LRU）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLB（Translation Lookaside Buffer）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两级以及多级页表&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本分段内存管理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本结构&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;段号&lt;/th&gt;
          &lt;th&gt;段内地址&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;段表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址变换机制&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页表机制&lt;/li&gt;
&lt;li&gt;缺页中断机制&lt;/li&gt;
&lt;li&gt;地址变换机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号：019-021&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据结构-二叉树&#34;&gt;数据结构-二叉树
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;线索二叉树&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;li&gt;构造&lt;/li&gt;
&lt;li&gt;遍历&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;树、森林与二叉树&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相互转换&lt;/li&gt;
&lt;li&gt;遍历&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哈夫曼树&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;WPL&lt;/li&gt;
&lt;li&gt;构造&lt;/li&gt;
&lt;li&gt;哈夫曼编码&lt;/li&gt;
&lt;li&gt;哈夫曼树的特点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并查集&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;li&gt;操作&lt;/li&gt;
&lt;li&gt;实现&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号：033-037&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0719学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0719/</link>
        <pubDate>Sat, 19 Jul 2025 22:41:19 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0719/</guid>
        <description>&lt;h2 id=&#34;数学-是不动点的味道&#34;&gt;数学-是不动点的味道
&lt;/h2&gt;&lt;h3 id=&#34;数列的极限&#34;&gt;数列的极限
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;概念&lt;/li&gt;
&lt;li&gt;数列极限的定义&lt;/li&gt;
&lt;li&gt;数列收敛的性质
&lt;ul&gt;
&lt;li&gt;唯一性&lt;/li&gt;
&lt;li&gt;有界性&lt;/li&gt;
&lt;li&gt;保号性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;海涅定理（归结原则）&lt;/li&gt;
&lt;li&gt;夹逼准则&lt;/li&gt;
&lt;li&gt;单调有界准则&lt;/li&gt;
&lt;li&gt;${x_n}$收敛于$a$的速度问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据结构-前序中序后序blablabla&#34;&gt;数据结构-前序中序后序blablabla
&lt;/h2&gt;&lt;h3 id=&#34;树的性质&#34;&gt;树的性质
&lt;/h3&gt;&lt;p&gt;let $T_m$ denote a tree with degree $m$.&lt;/p&gt;
&lt;p&gt;let $D(n)$ denote the out degree of the node $x$ in the tree $T_m$.&lt;/p&gt;
&lt;p&gt;let $n_i$ denote the number of notes with degree $i$.&lt;/p&gt;
&lt;p&gt;let $H$ denote the depth/height of the tree $T_m$.&lt;/p&gt;
&lt;p&gt;let $N$ denote the total number of nodes in tree.$N=\sum\limits_{i=0}^mn_i$.&lt;/p&gt;
&lt;p&gt;let $N_i$ denote the number of nodes at layer $i\in \mathcal{N^*}$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$N=1 + \sum\limits_{i=1}^mi\cdot n_i$.&lt;/li&gt;
&lt;li&gt;$n_0 =1 + \sum\limits_{i=2}^m(i-1)\cdot n_i$&lt;/li&gt;
&lt;li&gt;$N_i\leq m^{i-1}$ if not an &lt;strong&gt;empty tree&lt;/strong&gt; with degree m.&lt;/li&gt;
&lt;li&gt;$N\leq \frac{m^H-1}{m-1}$&lt;/li&gt;
&lt;li&gt;$H\geq \lceil\log_{m}\left((N(m-1))+1\right)\rceil$&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二叉树&#34;&gt;二叉树
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;二叉树的性质
&lt;ol&gt;
&lt;li&gt;$N_i\leq 2^{i-1}$ if not an &lt;strong&gt;empty tree&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;$N\leq 2^H-1$&lt;/li&gt;
&lt;li&gt;$n_0 =1 + n_2$&lt;/li&gt;
&lt;li&gt;$H\geq \lceil\log_{2}(N+1)\rceil$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完全二叉树&lt;/li&gt;
&lt;li&gt;满二叉树&lt;/li&gt;
&lt;li&gt;二叉树的构造
&lt;ol&gt;
&lt;li&gt;前序加中序&lt;/li&gt;
&lt;li&gt;后序加中序&lt;/li&gt;
&lt;li&gt;层次加中序&lt;/li&gt;
&lt;li&gt;前序加树形结构&lt;/li&gt;
&lt;li&gt;中序加树形结构&lt;/li&gt;
&lt;li&gt;后序加树形结构&lt;/li&gt;
&lt;li&gt;层次加树形结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;二叉树的遍历
&lt;ol&gt;
&lt;li&gt;前序&lt;/li&gt;
&lt;li&gt;中序&lt;/li&gt;
&lt;li&gt;后序&lt;/li&gt;
&lt;li&gt;层次&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;操作系统-nice-of-linux&#34;&gt;操作系统-nice of linux
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Multi-Level Feedback Queue (cpu-sched-mlfq)
&lt;ol&gt;
&lt;li&gt;Basic Rules
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rule 1&lt;/strong&gt;:If Priority(A) $&amp;gt;$ Priority(B), A runs (B doesn’t).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rule 2&lt;/strong&gt;:If Priority(A) $=$ Priority(B), A &amp;amp; B run in RR(Round Robin).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;However&lt;/strong&gt;: Those with low Priority will get starved!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Therefore&lt;/strong&gt;: We need to change the Priority over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To change Priority
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rule 3&lt;/strong&gt;: When a job enters the system, it is placed at the highest priority (the topmost queue).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rule 4a&lt;/strong&gt;: If a job uses up its allotment while running, its priority is reduced (i.e., it moves down one queue).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rule 4b&lt;/strong&gt;: If a job gives up the CPU (for example, by performing an I/O operation) before the allotment is up, it stays at the same priority level (i.e., its allotment is reset).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;However&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;Those with long cpu-time will get starved as them move down to the lowest!&lt;/li&gt;
&lt;li&gt;Those with smart heart will game the scheduler as they I/O at the last ms of the allotment.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Therefore&lt;/strong&gt;: We need to change &lt;strong&gt;rule4a,b&lt;/strong&gt; and boost periodically.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Priority Boost
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rule 5&lt;/strong&gt;: After some time period S, move all the jobs in the system to the topmost queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Better Accounting
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rule 4&lt;/strong&gt;: Once a job uses up its time allotment at a given level (re gardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Proportional share(cpu-sched-lottery)
&lt;ol&gt;
&lt;li&gt;Basic Concept: Tickets Represent Your Share&lt;/li&gt;
&lt;li&gt;Stride Scheduling&lt;/li&gt;
&lt;li&gt;The Linux Completely Fair Scheduler (CFS)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0718学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0718/</link>
        <pubDate>Fri, 18 Jul 2025 19:23:00 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0718/</guid>
        <description>&lt;h2 id=&#34;数学&#34;&gt;数学
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;若$\lim\limits_{x\to0}f(x) = A\neq0,\lim\limits_{x\to0}h(x)=0$,且在$x\to 0$时，$h(x)\neq 0$,则
&lt;/p&gt;
$$
   \int^{h(x)}_0f(t)dt\sim Ah(x),(x\to0)
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当$x\to 0$时，$f(x) \sim ax^m,g(x)\sim bx^n,ab\neq0,m,n\in N^*$,则
&lt;/p&gt;
$$
   \int^{g(x)}_0f(t)dt\sim \int^{bx^n}_0at^mdt,(x\to0)
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以$\frac{x}{\cos x} $为例计算分式的泰勒展开：
&lt;/p&gt;
$$
   \cos x = 1 - \frac{1}{2!}x^2 + \frac{1}{4!}x^4 + ... 
   $$&lt;p&gt;
随着对分子和分母进行多项式除法，取需要的项即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时不时看看这道题：
&lt;/p&gt;
$$
   \lim\limits_{x\to0}\frac{\int_{0}^{x}{[e^{{(t-x)}^2}-1]\sin t}\text{d} t}{x
   ^2(e^{x^2}-1)}
   $$&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0717学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0717/</link>
        <pubDate>Thu, 17 Jul 2025 23:07:05 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0717/</guid>
        <description>&lt;h2 id=&#34;关于数学cool-stuff&#34;&gt;关于数学，cool stuff
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先，泰勒吧&lt;/p&gt;
&lt;p&gt;设$f(x)$在点$x=0$处$n$阶可导，则存在$x=0$的一个领域，对于该领域内的任一点$x$，有&lt;/p&gt;
$$
   f(x) = f(0) + f{&#39;}(0)x + \frac{f^{&#39;&#39;}(0)}{2!}x^2 + \frac{f^{&#39;&#39;&#39;}(0)}{3!}x^3 + ...+ \frac{f^{(n)}(0)}{n!}x^n + o(x^n)
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其次，记住吧&lt;/p&gt;
&lt;p&gt;一些食品级的等价无穷小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$x-\sin{x}\sim\frac{1}{6}x^3,(x\to 0)$&lt;/li&gt;
&lt;li&gt;$\text{arcsin}x-x\sim\frac{1}{6}x^3,(x\to 0)$&lt;/li&gt;
&lt;li&gt;$x-\text{arctan}x\sim\frac{1}{3}x^3,(x\to 0)$&lt;/li&gt;
&lt;li&gt;$\tan{x}-x\sim\frac{1}{3}x^3,(x\to 0)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些重要的泰勒展开&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\sin x = x - \frac{1}{3!}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;$\text{arcsin} x = x + \frac{1}{3!}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;$\cos x = 1 - \frac{1}{2!}x^2 + \frac{1}{4!}x^4 + o(x^4)$&lt;/li&gt;
&lt;li&gt;$\tan x = x + \frac{1}{3}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;$\text{arctan} x = x - \frac{1}{3}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;$\ln (x+1) = x - \frac{1}{2}x^2 + \frac{1}{3}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;$e^x =1 + x + \frac{1}{2!}x^2 + \frac{1}{3!}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;${(1+a)}^{\alpha} = 1 + \alpha x - \frac{\alpha(\alpha-1)}{2!}x^2 +o(x^2)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;易错栏目-时不时更新一些易错的知识点&#34;&gt;易错栏目-时不时更新一些易错的知识点
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;临界区和临界资源，以及进程处于临界区是否可以进行调度&lt;/li&gt;
&lt;li&gt;$\lim\limits_{x\to\infty}e^x$,$\lim\limits_{x\to-\infty}e^x$,$\lim\limits_{x\to+\infty}e^x$&lt;/li&gt;
&lt;li&gt;系统调用的过程，谁保存了什么上下文信息（操作系统，硬件）。&lt;/li&gt;
&lt;li&gt;安全状态，不安全状态，死锁发生的时间的关系&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0717学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0717/</link>
        <pubDate>Thu, 17 Jul 2025 22:04:43 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0717/</guid>
        <description>&lt;h2 id=&#34;数学-纸上得来终觉浅&#34;&gt;数学-纸上得来终觉浅
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;函数极限的定义($\epsilon,\delta$语言)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数极限的性质&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;唯一性&lt;/li&gt;
&lt;li&gt;局部有界性&lt;/li&gt;
&lt;li&gt;局部保号性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无穷小(let $\alpha$ be infinitesimal)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;性质
&lt;ul&gt;
&lt;li&gt;$\sum\limits_{k}^{N}{\alpha_k}=\alpha,(N \text{ is finite})$&lt;/li&gt;
&lt;li&gt;$\alpha&amp;rsquo;\cdot f(x)=\alpha $,where $f(x)$ is limited at the interval&lt;/li&gt;
&lt;li&gt;$\prod\limits_{k}^{N}{\alpha_k}=\alpha,(N \text{ is finite})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比阶($\lim\alpha(x)=0$,$\lim\beta(x)=0$,$\beta(x)\neq0$)
&lt;ul&gt;
&lt;li&gt;$\alpha(x)$是$\beta(x)$的高阶无穷小$\Leftrightarrow\lim{\frac{\alpha(x)}{\beta(x)}}=0$&lt;/li&gt;
&lt;li&gt;$\alpha(x)$是$\beta(x)$的低阶无穷小$\Leftrightarrow\lim{\frac{\alpha(x)}{\beta(x)}}=\infty$&lt;/li&gt;
&lt;li&gt;$\alpha(x)$是$\beta(x)$的同阶无穷小$\Leftrightarrow\lim{\frac{\alpha(x)}{\beta(x)}}=c,(\text{constant }c\neq 0)$&lt;/li&gt;
&lt;li&gt;$\alpha(x)$是$\beta(x)$的等价无穷小$\Leftrightarrow\lim{\frac{\alpha(x)}{\beta(x)}}=1$&lt;/li&gt;
&lt;li&gt;$\alpha(x)$是$\beta(x)$的$k$阶无穷小$\Leftrightarrow\lim{\frac{\alpha(x)}{\beta^k(x)}}=0$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;极限的运算&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;四则运算&lt;/li&gt;
&lt;li&gt;洛必达法则&lt;/li&gt;
&lt;li&gt;泰勒展开&lt;/li&gt;
&lt;li&gt;夹逼准则&lt;/li&gt;
&lt;li&gt;七种未定式：$\frac{0}{0},\frac{\infty}{\infty},0\cdot\infty,\infty-\infty,\infty^0,0^0,1^{\infty}$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数的连续和两类间断点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超实数(&lt;a class=&#34;link&#34; href=&#34;https://people.math.wisc.edu/~hkeisler/keislercalc-06-18-25.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hyperreal number&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;操作系统-three-easy-piece&#34;&gt;操作系统-&lt;a class=&#34;link&#34; href=&#34;https://pages.cs.wisc.edu/~remzi/OSTEP/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;three easy piece&lt;/a&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;cpu-intro
&lt;ul&gt;
&lt;li&gt;the Process&lt;/li&gt;
&lt;li&gt;Process API
&lt;ol&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;Destory&lt;/li&gt;
&lt;li&gt;Wait&lt;/li&gt;
&lt;li&gt;Miscellaneous Control&lt;/li&gt;
&lt;li&gt;Status&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Process status&lt;/li&gt;
&lt;li&gt;Proc data structure:(PCB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cpu-api
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawn()&lt;/code&gt;*&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;cpu-mechanisms
&lt;ol&gt;
&lt;li&gt;from Directed Execution to Limited Directed Execution:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;user mode and kernel mode&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;system call&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;switch between Processes,Os need to retain CPU from process
&lt;ul&gt;
&lt;li&gt;A Cooperative Approach: Wait For System Calls&lt;/li&gt;
&lt;li&gt;A Non-Cooperative Approach: The OS Takes Control&lt;/li&gt;
&lt;li&gt;reboot (x&lt;/li&gt;
&lt;li&gt;timer interrupt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Saving and Restoring Context&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;cpu-sched(reading)&lt;/li&gt;
&lt;li&gt;cpu-sched-mlfq(reading)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据结构-排好队一个一个fifo&#34;&gt;数据结构-排好队一个一个FIFO
&lt;/h2&gt;&lt;h3 id=&#34;队列&#34;&gt;队列
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;顺序队列的性质和操作&lt;/li&gt;
&lt;li&gt;循环队列的性质和操作&lt;/li&gt;
&lt;li&gt;链式队列的性质和操作&lt;/li&gt;
&lt;li&gt;双端队列&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号018-027&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0715学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0715/</link>
        <pubDate>Tue, 15 Jul 2025 21:43:17 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0715/</guid>
        <description>&lt;h2 id=&#34;操作系统-jyy的map永远的噩梦&#34;&gt;操作系统-jyy的map永远的噩梦
&lt;/h2&gt;&lt;h3 id=&#34;死锁&#34;&gt;死锁
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;死锁的必要条件
&lt;ul&gt;
&lt;li&gt;互斥条件&lt;/li&gt;
&lt;li&gt;请求和保持条件&lt;/li&gt;
&lt;li&gt;不可剥夺条件&lt;/li&gt;
&lt;li&gt;循环等待条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;预防死锁的方法
&lt;ul&gt;
&lt;li&gt;破坏互斥：非但不能破坏还要保护&lt;/li&gt;
&lt;li&gt;破坏不可剥夺条件&lt;/li&gt;
&lt;li&gt;破坏请求和保持条件&lt;/li&gt;
&lt;li&gt;破坏循环等待条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;死锁避免
&lt;ol&gt;
&lt;li&gt;安全状态&lt;/li&gt;
&lt;li&gt;银行家算法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;死锁检测和解除
&lt;ul&gt;
&lt;li&gt;资源分配图&lt;/li&gt;
&lt;li&gt;死锁定理&lt;/li&gt;
&lt;li&gt;死锁的解除
&lt;ul&gt;
&lt;li&gt;剥夺资源&lt;/li&gt;
&lt;li&gt;撤销进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;内存管理&#34;&gt;内存管理
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;基本概念
&lt;ol&gt;
&lt;li&gt;逻辑地址&lt;/li&gt;
&lt;li&gt;物理地址&lt;/li&gt;
&lt;li&gt;外部碎片&lt;/li&gt;
&lt;li&gt;内部碎片&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;内存连续分配管理方式
&lt;ol&gt;
&lt;li&gt;单一连续分配&lt;/li&gt;
&lt;li&gt;固定分区分配&lt;/li&gt;
&lt;li&gt;动态分区分配
&lt;ol&gt;
&lt;li&gt;首次适应FF&lt;/li&gt;
&lt;li&gt;循环首次适应NF&lt;/li&gt;
&lt;li&gt;最佳适应BF&lt;/li&gt;
&lt;li&gt;最坏适应WF&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号016-018&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;数学-什么超实数&#34;&gt;数学-什么？！超实数？
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;函数极限的概念与性质&lt;/li&gt;
&lt;li&gt;超实数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号第一讲&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0714学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0714/</link>
        <pubDate>Mon, 14 Jul 2025 21:15:16 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0714/</guid>
        <description>&lt;h2 id=&#34;朝花夕拾&#34;&gt;朝花夕拾
&lt;/h2&gt;&lt;p&gt;先回答一下昨天的疑问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;什么是用户级线程和内核级线程？&lt;/p&gt;
&lt;p&gt;以下是chatgpt编写的ULT和KLT的示例c代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;ucontext.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define STACK_SIZE 1024*64
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ucontext_t&lt;/span&gt; ctx_main, ctx_thread1, ctx_thread2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;thread_func1&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread 1: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;swapcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread1, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread2);  &lt;span style=&#34;color:#75715e&#34;&gt;// 切换到线程2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread 1 finished&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;setcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_main);  &lt;span style=&#34;color:#75715e&#34;&gt;// 结束返回主程序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;thread_func2&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread 2: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;swapcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread2, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread1);  &lt;span style=&#34;color:#75715e&#34;&gt;// 切换到线程1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread 2 finished&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;setcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_main);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; stack1[STACK_SIZE];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; stack2[STACK_SIZE];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 初始化线程1上下文
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;getcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread1.uc_stack.ss_sp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread1.uc_stack.ss_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(stack1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread1.uc_link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_main;  &lt;span style=&#34;color:#75715e&#34;&gt;// 线程结束返回主上下文
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;makecontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread1, thread_func1, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 初始化线程2上下文
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;getcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread2.uc_stack.ss_sp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread2.uc_stack.ss_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(stack2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread2.uc_link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_main;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;makecontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread2, thread_func2, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 从主线程切换到线程1开始执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;swapcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_main, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Main finished&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func1&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; arg) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pthread func1: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);  &lt;span style=&#34;color:#75715e&#34;&gt;// 模拟阻塞
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func2&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; arg) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pthread func2: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pthread_t&lt;/span&gt; t1, t2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_create&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;t1, NULL, func1, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_create&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;t2, NULL, func2, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_join&lt;/span&gt;(t1, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_join&lt;/span&gt;(t2, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All pthreads finished&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看出，实际上ULT是在模拟KLT的实现思想，其调度和上下文切换都是用户程序自己显式实现的，但对于系统来说这仅仅是一个进程而已。那看来多对多的模型就是先申请多个内核，再在每个内核内使用ULT编程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PCB都包含什么？&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;类别&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;信息&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;进程标识信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;PID（进程ID）、PPID（父进程ID）、UID（用户ID）、GID（组ID）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;进程状态&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;就绪、运行、等待、终止等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;寄存器现场&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;程序计数器（PC）、栈指针（SP）、通用寄存器等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;内存管理信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;代码段、数据段、堆、栈、页表指针&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;调度信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;优先级、时间片、调度队列信息、调度策略（如 SCHED_NORMAL）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;文件系统信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;文件描述符表、当前工作目录、打开文件列表&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;会计信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;CPU时间、用户时间、系统时间、起始时间&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;信号处理信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;信号屏蔽字、信号处理函数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;其他资源信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;IPC 资源（消息队列、共享内存）、网络信息等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;等配一个linux docker 用命令行敲一下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访管中断和自陷指令有和关系？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;自陷指令&lt;/th&gt;
          &lt;th&gt;访管中断&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;CPU 支持的汇编指令&lt;/strong&gt;，用于产生陷入&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;操作系统级的概念&lt;/strong&gt;，指的是进程通过自陷调用系统服务&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;比如：&lt;code&gt;int 0x80&lt;/code&gt;（x86）、&lt;code&gt;svc&lt;/code&gt;（ARM）、&lt;code&gt;ecall&lt;/code&gt;（RISC-V）&lt;/td&gt;
          &lt;td&gt;访管中断就是&lt;strong&gt;自陷指令触发的中断，用来“访问管态（内核态）”服务&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;本质是硬件机制&lt;/td&gt;
          &lt;td&gt;本质是软件设计&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;“访管中断”是&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“用自陷指令引发的，主动请求操作系统服务的中断”。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;数学&#34;&gt;数学
&lt;/h2&gt;&lt;h3 id=&#34;三角函数大家族&#34;&gt;三角函数大家族
&lt;/h3&gt;&lt;p&gt;一些恒等式
&lt;/p&gt;
$$
\sin^2{\theta} + \cos^2{\theta} = 1
$$&lt;p&gt;
&lt;/p&gt;
$$
1 + \tan^2{\theta} = \sec^2{\theta}
$$&lt;p&gt;
&lt;/p&gt;
$$
1 + \cot^2{\theta} = \csc^2{\theta}
$$&lt;p&gt;
&lt;/p&gt;
$$
\sin(\arcsin{x}) = x(x\in[-1,1])
$$&lt;p&gt;
&lt;/p&gt;
$$
\sin(\arccos{x}) = \sqrt{1-x^2}(x\in[-1,1])
$$&lt;p&gt;
&lt;/p&gt;
$$
\cos(\arccos{x}) = x(x\in[-1,1])
$$&lt;p&gt;
&lt;/p&gt;
$$
\cos(\arcsin{x}) = \sqrt{1-x^2}(x\in[-1,1])
$$&lt;h3 id=&#34;双曲正弦余弦函数&#34;&gt;双曲正弦/余弦函数
&lt;/h3&gt;&lt;p&gt;双曲正弦函数
&lt;/p&gt;
$$
\sinh{x} = \frac{e^x-e^{-x}}{2}
$$&lt;p&gt;
反双曲正弦函数
&lt;/p&gt;
$$
	\text{arcsinh}\ {x} = \ln(x+\sqrt{1+x^2})
$$&lt;p&gt;
&lt;/p&gt;
$$
\text{arcsinh}&#39;\ {x} = \frac{1}{\sqrt{1+x^2}}
$$&lt;p&gt;
双曲余弦函数
&lt;/p&gt;
$$
\cosh{x} = \frac{e^x+e^{-x}}{2}
$$&lt;p&gt;
反双曲余弦函数
&lt;/p&gt;
$$
\text{arccosh}\ {x} = \ln(x+\sqrt{x^2-1}),\ x\geq 1\\
$$$$
	\text{arccosh}&#39;\ {x} = \frac{1}{\sqrt{x^2-1}},\ x&gt;1
$$&lt;p&gt;双曲正切函数
&lt;/p&gt;
$$
\tanh{x} = \frac{\sinh{x}}{\cosh{x}}=\frac{e^x-e^{-x}}{e^x+e^{-x}}
$$&lt;p&gt;
反双曲正切函数
&lt;/p&gt;
$$
\text{arctanh}\ {x} = \frac{1}{2}\ln(\frac{1+x}{1-x}),\ x\in(-1,1)
$$$$
	\text{arctanh}&#39;\ {x} = \frac{1}{1-x^2}
$$</description>
        </item>
        <item>
        <title>0714学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0714/</link>
        <pubDate>Mon, 14 Jul 2025 21:15:02 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0714/</guid>
        <description>&lt;h2 id=&#34;操作系统-这什么查一下这什么查一下&#34;&gt;操作系统-这什么查一下这什么查一下
&lt;/h2&gt;&lt;h3 id=&#34;经典同步问题&#34;&gt;经典同步问题
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;生产者消费者问题&lt;/li&gt;
&lt;li&gt;哲学家进餐问题&lt;/li&gt;
&lt;li&gt;读者-写者问题&lt;/li&gt;
&lt;li&gt;理发师问题&lt;/li&gt;
&lt;li&gt;抽烟者问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;处理机调度&#34;&gt;处理机调度
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;处理及调度的层次&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;高级调度（作业调度、长程调度）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业选择&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从**后备队列（外存中等待的作业）**中选择作业&lt;/li&gt;
&lt;li&gt;判断系统资源（内存、CPU、I/O）是否充足&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;资源分配&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为选中的作业分配内存、I/O、文件等资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进程创建&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将作业转化为一个或多个&lt;strong&gt;进程&lt;/strong&gt;，放入就绪队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中级调度（内存调度、中程调度）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选择部分进程挂起（移出内存到外存）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择挂起的进程恢复（从外存调回内存）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;低级调度（进程调度、线程调度、短程调度）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从&lt;strong&gt;就绪队列&lt;/strong&gt;中选择一个进程&lt;/li&gt;
&lt;li&gt;把 CPU 分配给选中的进程&lt;/li&gt;
&lt;li&gt;保存和恢复进程的上下文（&lt;strong&gt;进程切换 Context Switch&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;控制 CPU 的执行顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理机的调度方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非抢占式&lt;/li&gt;
&lt;li&gt;抢占式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择调度算法的若干准则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU利用率&lt;/p&gt;
$$
     \frac{\text{worktime of CPU}}{\text{total time}}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统吞吐量&lt;/p&gt;
$$
     \frac{\text{number of tasks}}{\text{total time}}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;周转时间(Turnaround Time)&lt;/p&gt;
$$
     \text{Completion Time - Arrival Time}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均周转时间&lt;/p&gt;
$$
     \frac{\sum\limits_{N}\text{Turnaround Time of all processes}}{N}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带权周转时间&lt;/p&gt;
$$
     \frac{\text{Turnaround Time}}{\text{Service Time}}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均带权周转时间&lt;/p&gt;
$$
     \frac{\sum\limits_{N}\text{Weighted Turnaround Time of all processes}}{N}
     $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;调度算法&#34;&gt;调度算法
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;FCFS（先来先服务）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SJF（最短作业优先）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抢占&lt;/li&gt;
&lt;li&gt;非抢占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SRTF（最短剩余时间优先）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Priority Scheduling（高优先权优先调度）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抢占&lt;/li&gt;
&lt;li&gt;非抢占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Highest Response Ratio Next (HRRN)（高响应比有点调度算法）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Round Robin（时间片轮转）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multilevel Feedback Queue（多级反馈队列调度）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上下文切换&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU上下文切换&lt;/li&gt;
&lt;li&gt;系统调用上下文切换&lt;/li&gt;
&lt;li&gt;进程上下文切换
&lt;ul&gt;
&lt;li&gt;用户级&lt;/li&gt;
&lt;li&gt;系统级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程上下文切换&lt;/li&gt;
&lt;li&gt;中断上下文切换&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号:012-015&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据结构-致敬传奇栈帧pc程序计数器&#34;&gt;数据结构-致敬传奇栈帧PC程序计数器
&lt;/h2&gt;&lt;h3 id=&#34;栈&#34;&gt;栈
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态顺序栈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判空&lt;/li&gt;
&lt;li&gt;判满&lt;/li&gt;
&lt;li&gt;进栈&lt;/li&gt;
&lt;li&gt;出栈&lt;/li&gt;
&lt;li&gt;获取栈顶元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态顺序栈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判空&lt;/li&gt;
&lt;li&gt;判满&lt;/li&gt;
&lt;li&gt;进栈&lt;/li&gt;
&lt;li&gt;出栈&lt;/li&gt;
&lt;li&gt;获取栈顶元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链栈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判空&lt;/li&gt;
&lt;li&gt;判满&lt;/li&gt;
&lt;li&gt;进栈&lt;/li&gt;
&lt;li&gt;出栈&lt;/li&gt;
&lt;li&gt;获取栈顶元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈的应用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;括号匹配&lt;/li&gt;
&lt;li&gt;进制转换（辗转相除）&lt;/li&gt;
&lt;li&gt;函数递归调用&lt;/li&gt;
&lt;li&gt;表达式求值
&lt;ul&gt;
&lt;li&gt;前缀&lt;/li&gt;
&lt;li&gt;中缀（重要）&lt;/li&gt;
&lt;li&gt;后缀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号：014-017&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;数学-太好了是张宇老师我们有救了&#34;&gt;数学-太好了是张宇老师我们有救了！
&lt;/h2&gt;&lt;h3 id=&#34;函数的概念与特性&#34;&gt;函数的概念与特性
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;反函数&lt;/li&gt;
&lt;li&gt;复合函数&lt;/li&gt;
&lt;li&gt;隐函数&lt;/li&gt;
&lt;li&gt;函数的四种特性
&lt;ul&gt;
&lt;li&gt;有界性&lt;/li&gt;
&lt;li&gt;单调性&lt;/li&gt;
&lt;li&gt;奇偶性&lt;/li&gt;
&lt;li&gt;周期性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本初等函数与初等函数
&lt;ul&gt;
&lt;li&gt;常函数&lt;/li&gt;
&lt;li&gt;幂函数&lt;/li&gt;
&lt;li&gt;指数函数&lt;/li&gt;
&lt;li&gt;对数函数&lt;/li&gt;
&lt;li&gt;三角函数
&lt;ol&gt;
&lt;li&gt;sin x  cos x&lt;/li&gt;
&lt;li&gt;csc x sec x&lt;/li&gt;
&lt;li&gt;tan x cot x&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;反三角函数
&lt;ol&gt;
&lt;li&gt;arcsin x arccos x&lt;/li&gt;
&lt;li&gt;arctanx arccot x&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分段函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;高数第一讲&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0713学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0713/</link>
        <pubDate>Sun, 13 Jul 2025 23:27:16 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0713/</guid>
        <description>&lt;h2 id=&#34;数据结构-喜欢在头指针存数据的扣1&#34;&gt;数据结构-喜欢在头指针存数据的扣1
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;线性表的链式存储&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单链表&lt;/li&gt;
&lt;li&gt;静态链表&lt;/li&gt;
&lt;li&gt;其他链表
&lt;ul&gt;
&lt;li&gt;单向循环链表&lt;/li&gt;
&lt;li&gt;双向链表&lt;/li&gt;
&lt;li&gt;双向循环链表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程代码010-013&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;操作系统-谦让是美德&#34;&gt;操作系统-谦让是美德
&lt;/h2&gt;&lt;h3 id=&#34;进程与线程&#34;&gt;进程与线程
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PCB&lt;/li&gt;
&lt;li&gt;进程的特点：
&lt;ul&gt;
&lt;li&gt;动态性&lt;/li&gt;
&lt;li&gt;并发性&lt;/li&gt;
&lt;li&gt;独立性&lt;/li&gt;
&lt;li&gt;异步性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程的基本状态及管理切换
&lt;ul&gt;
&lt;li&gt;运行&lt;/li&gt;
&lt;li&gt;阻塞&lt;/li&gt;
&lt;li&gt;就绪&lt;/li&gt;
&lt;li&gt;创建&lt;/li&gt;
&lt;li&gt;终止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线程的特性&lt;/li&gt;
&lt;li&gt;线程的状态&lt;/li&gt;
&lt;li&gt;线程与进程的联系和不同&lt;/li&gt;
&lt;li&gt;用户级线程与内核级线程的映射关系&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;互斥与同步&#34;&gt;互斥与同步
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;临界区实现互斥的原则&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;空闲让进&lt;/li&gt;
&lt;li&gt;忙则等待&lt;/li&gt;
&lt;li&gt;有限等待&lt;/li&gt;
&lt;li&gt;让权等待（非必须）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;临界区实现互斥的基本方法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件实现方法
&lt;ol&gt;
&lt;li&gt;单标志法&lt;/li&gt;
&lt;li&gt;双标志法
&lt;ul&gt;
&lt;li&gt;先检查法&lt;/li&gt;
&lt;li&gt;后检查法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Peterson算法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;硬件实现方法
&lt;ol&gt;
&lt;li&gt;中断屏蔽&lt;/li&gt;
&lt;li&gt;TestAndSet指令&lt;/li&gt;
&lt;li&gt;Swap指令&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;互斥锁（mutex lock）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LockOne类&lt;/li&gt;
&lt;li&gt;LockTwo类&lt;/li&gt;
&lt;li&gt;Peterson锁&lt;/li&gt;
&lt;li&gt;Barkley锁&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;信号量&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整型信号量&lt;/li&gt;
&lt;li&gt;记录型信号量&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;管程&#34;&gt;管程
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;管程的定义&lt;/li&gt;
&lt;li&gt;管程的组成&lt;/li&gt;
&lt;li&gt;管程的特性&lt;/li&gt;
&lt;li&gt;管程与进程的异同&lt;/li&gt;
&lt;li&gt;条件变量&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;进程通信&#34;&gt;进程通信
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;管道通信&lt;/li&gt;
&lt;li&gt;消息传递系统&lt;/li&gt;
&lt;li&gt;共享存储器系统&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号005-011&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0713学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0713/</link>
        <pubDate>Sun, 13 Jul 2025 23:27:16 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0713/</guid>
        <description>&lt;p&gt;今天看来是无法解决所有当下的疑问了，故先列出清单：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是用户级线程和内核级线程？&lt;/li&gt;
&lt;li&gt;PCB都包含什么？&lt;/li&gt;
&lt;li&gt;访管中断和自陷指令有和关系？&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0712学习笔记</title>
        <link>http://localhost:1313/npee_learning_log.github.io/memo/0712/</link>
        <pubDate>Sat, 12 Jul 2025 23:17:40 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/memo/0712/</guid>
        <description>&lt;h2 id=&#34;操作系统&#34;&gt;操作系统
&lt;/h2&gt;&lt;h3 id=&#34;系统调用&#34;&gt;系统调用
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;功能
&lt;ul&gt;
&lt;li&gt;设备管理：设备的启动、请求和释放等。&lt;/li&gt;
&lt;li&gt;文件管理：文件的读写、创建和删除等。&lt;/li&gt;
&lt;li&gt;进程管理：进程的创建、撤销、阻塞和唤醒等。&lt;/li&gt;
&lt;li&gt;进程通信：进程之间的消息或信号的传递等。&lt;/li&gt;
&lt;li&gt;内存管理：内存的分配、回收以及获取作业占用内存区大小和起始地址等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理过程
&lt;ol&gt;
&lt;li&gt;用户程序将系统调用号和所需的参数压入堆栈；接着，调用实际的调用指令，然后执行一个陷入指令，将CPU从用户态转为核心态；再由硬件和操作系统内核程序保护被中断进程的现场。将程序计数器PC、程序状态字PSW及通用寄存器内容压入堆栈。&lt;/li&gt;
&lt;li&gt;分析系统调用类型，转入相应的系统调用处理子程序。在系统中配置了一张系统调用入口表，表中的每个表项都对应一个系统调用，根据系统调用号找到该系统调用处理子程序的入口地址。&lt;/li&gt;
&lt;li&gt;在系统调用处理子程序执行结束后，恢复被中断的或设置新进程的CPU现场，然后返回被中断进程或新进程，继续往下执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>暴雨西湖</title>
        <link>http://localhost:1313/npee_learning_log.github.io/diary/westlake-with-haruko/</link>
        <pubDate>Sat, 12 Jul 2025 22:27:55 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/diary/westlake-with-haruko/</guid>
        <description>&lt;img src="http://localhost:1313/npee_learning_log.github.io/diary/westlake-with-haruko/westlake_in_strom.jpg" alt="Featured image of post 暴雨西湖" /&gt;&lt;p&gt;今天带刚来杭州的&lt;strong&gt;太阳&lt;/strong&gt;(应当事人的要求使用该昵称)去西湖游玩。其实天气预报有雨，但东坡先生有诗为证：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;水光潋滟晴方好，山色空蒙雨亦奇。
欲把西湖比西子，淡妆浓抹总相宜。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;雨中西湖，让我陷入无穷大的浪漫遐想和无穷小的现实担忧。&lt;/p&gt;
&lt;p&gt;出了地铁站，人潮涌动；&lt;/p&gt;
&lt;p&gt;走到西湖畔，黑云从远处压来。&lt;/p&gt;
&lt;p&gt;走到白堤，下雨了。&lt;/p&gt;
&lt;p&gt;起先，觉得东坡先生诚不欺我，湖面落入无数雨珠，游船驶向远处，远处的山朦朦胧胧。&lt;/p&gt;
&lt;p&gt;我很兴奋，直到鞋被完全浸湿，直到暴雨驱散所有的游客。还没走完苏堤，到断桥，水已经漫过脚踝。&lt;/p&gt;
&lt;p&gt;最后不得已灰溜溜的挤进公交车，公交车在水中乘风破浪，我们像两株水草。&lt;/p&gt;
&lt;p&gt;虽然结局略微狼狈，不过也略微读懂了东坡先生的另一首诗：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“因为在雨中，我们看着落下雨幕的远方，牵着手笑着前行。”&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0712学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0712/</link>
        <pubDate>Sat, 12 Jul 2025 22:05:39 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0712/</guid>
        <description>&lt;h2 id=&#34;操作系统-int-0x80&#34;&gt;操作系统-int 0x80
&lt;/h2&gt;&lt;p&gt;操作系统的运行环境&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内核程序
&lt;ul&gt;
&lt;li&gt;特权指令&lt;/li&gt;
&lt;li&gt;核心态，管态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用程序
&lt;ul&gt;
&lt;li&gt;非特权指令&lt;/li&gt;
&lt;li&gt;用户态，目态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;操作系统的内核&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时钟管理&lt;/li&gt;
&lt;li&gt;中断机制
&lt;ol&gt;
&lt;li&gt;内部异常
&lt;ol&gt;
&lt;li&gt;故障（Fault）（软件中断）&lt;/li&gt;
&lt;li&gt;自陷（Trap）（软件中断）&lt;/li&gt;
&lt;li&gt;终止（Abort）（硬件中断）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;外部中断（硬件）
&lt;ol&gt;
&lt;li&gt;可屏蔽中断 INTR&lt;/li&gt;
&lt;li&gt;不可屏蔽中断 NMI&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;课程编号 ：003-004&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;英语-英语构词法&#34;&gt;英语-英语构词法
&lt;/h2&gt;&lt;p&gt;前缀包含两种作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方向&lt;/li&gt;
&lt;li&gt;性质&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后缀一般表示词性，例外：able,&amp;hellip;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0711学习日志</title>
        <link>http://localhost:1313/npee_learning_log.github.io/posts/0711/</link>
        <pubDate>Fri, 11 Jul 2025 20:29:14 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/posts/0711/</guid>
        <description>&lt;h2 id=&#34;数据结构-太好了是死记硬背&#34;&gt;数据结构-太好了是死记硬背
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据的逻辑和物理结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/npee_learning_log.github.io/posts/0711/QQ20250711-202720.png&#34;
	width=&#34;1702&#34;
	height=&#34;743&#34;
	srcset=&#34;http://localhost:1313/npee_learning_log.github.io/posts/0711/QQ20250711-202720_hu_ab8a865d16a46851.png 480w, http://localhost:1313/npee_learning_log.github.io/posts/0711/QQ20250711-202720_hu_5cae573c8a98f94d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;549px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法的时间空间复杂度&lt;/li&gt;
&lt;li&gt;线性表的顺序表以及相关算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;课程编号001-009&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;操作系统-想念jyy的第n天&#34;&gt;操作系统-想念jyy的第n天
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;操作系统概述
&lt;ul&gt;
&lt;li&gt;并发&lt;/li&gt;
&lt;li&gt;共享&lt;/li&gt;
&lt;li&gt;虚拟&lt;/li&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作系统的发展历程
&lt;ul&gt;
&lt;li&gt;批处理器
&lt;ul&gt;
&lt;li&gt;单道&lt;/li&gt;
&lt;li&gt;多道&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分时操作系统&lt;/li&gt;
&lt;li&gt;实时操作系统&lt;/li&gt;
&lt;li&gt;网络操作系统&lt;/li&gt;
&lt;li&gt;分布式操作系统&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;课程编号001-002&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Intro-全部の始まり</title>
        <link>http://localhost:1313/npee_learning_log.github.io/diary/intro/</link>
        <pubDate>Fri, 11 Jul 2025 16:35:21 +0800</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/diary/intro/</guid>
        <description>&lt;h2 id=&#34;写在一切的前面&#34;&gt;写在一切的前面
&lt;/h2&gt;&lt;p&gt;欢迎来到我的博客，这是我 （笔者自称小shy)为了记录参加2026考研全过程而开始的新栏目。&lt;/p&gt;
&lt;p&gt;我准备参加今年年底的2026NPEE(The national entrance examination for postgraduate)，科目是11408。&lt;/p&gt;
&lt;p&gt;此后我将更新自己从7月初到12月底的备考全过程日志，具体包括三个栏目：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;日记&lt;/strong&gt;：这个部分属于随便写点感想什么的（随缘更新）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志&lt;/strong&gt;：这个部分属于日常更新自己的学习/复习进度，欢迎监督！&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;笔记&lt;/strong&gt;：这个部分用于记录自己的学习心得和一些易错知识点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可能以后还会补充，但是目前就先这样。&lt;/p&gt;
&lt;p&gt;联系方式可能以后会留一个收信的邮箱，这里打一个(&lt;strong&gt;TODO&lt;/strong&gt;)（笑&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>http://localhost:1313/npee_learning_log.github.io/page/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/page/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Search</title>
        <link>http://localhost:1313/npee_learning_log.github.io/page/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/npee_learning_log.github.io/page/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
