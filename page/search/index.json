[{"content":"A -auth- author authority authorize authentic -a-,a admire afford amuse annoy appoint approach appropriate arrest assault asset assess astonishing awaken B -back- setback feedback -band- band bind bond bonus bound boundary abound abundant combine -bas- base basis basic -bat- battle combat battery debate bet -be- behalf beneath betray behave bewilder -bi- bilingual linguist ambiguous -blunt- blunt blunder -board-,-broad- board aboard broad abroad -boast- boast boost -bureau- bureau bureaucracy C -cal-,-cul- scale sculpture -camp- camp campaign campus chamber -cap-,-capt-,-cip-,-cup- capable capital capture captive capacity escape participate anticipate discipline occupy -car- career carpet -care-,-cer-,-char-,-cur- scare dread fright charity concern discern curious -caut- caution precaution -ceed-,-cede-,-cess- proceed process procedure precede precedent predecessor recession succeed success succession exceed excess excel excellent concede access cease ","date":"2025-08-24T00:19:58+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0824/","title":"0824学习日志"},{"content":"计算机组成原理 朝花夕拾 机器字长、指令字长、存储字长： 机器字长等于CPU内部的运算器位数和通用寄存器宽度。 一个存储单元中的位数称为存储字长。 指令字长取决于指令的功能和格式，可以单字长、半字长或双字长。 即使是相同的高级语言程序在不同的计算机上进行编译生成的机器指令条数也有可能不同。 IR,MAR,MDR是CPU内部工作状态寄存器，对程序员透明（不可见）。 时钟频率不会影响CPI。 字长也是评价计算机系统性能的指标。 ","date":"2025-08-18T14:04:16+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0818/","title":"0818学习笔记"},{"content":"数学-朝花夕拾 关于一元函数的不定积分和积分\n关于原函数的存在条件\n连续函数一定有原函数 含有第一类间断点和无穷间断点的函数在包含改间断点的区间内不存在原函数 震荡间断点可能有可能没有 定积分的极限形式 $$ \\begin{align} \\int_b^af(x)dx\u0026=\\lim\\limits_{\\lambda\\to0}\\sum\\limits_{k=1}^n{f(\\xi_k)\\Delta x_k},\\xi\\in[x_{k-1},x_k],\\Delta x_i = x_i - x_{i-1}\\\\ \\int_b^af(x)dx\u0026=\\lim\\limits_{n\\to \\infty}\\sum\\limits_{i=1}^nf(a+\\frac{b-a}{n}i)\\frac{b-a}{n}\\\\ \\int_0^1f(x)dx\u0026=\\lim\\limits_{n\\to \\infty}\\sum\\limits_{i=1}^nf(\\frac{i}{n})\\frac{1}{n} \\end{align} $$ 定积分存在定理\n充分条件 闭区间连续 闭区间单调 闭区间有界，有限间断点（不包含无穷间断点） 闭区间有有限个第一类间断点 必要条件 闭区间有界 几个重要的积分不等式 $$ \\begin{align} \\left|\\int_b^af(x)dx\\right|\u0026\\leq\\int_b^a\\left|f(x)\\right|\\\\ mL\\leq\\int_b^af(x)dx\u0026\\leq ML,(m\\leq f(x)\\leq M,L=|b-a|) \\end{align} $$ 变限积分性质\nf(x)可积$\\Rightarrow F(x)=\\int_a^xf(t)dt$ 连续 f(x)连续$\\Rightarrow F(x)=\\int_a^xf(t)dt$ 可导且$F\u0026rsquo;(x)=f(x)$ 跳跃间断点，则$F(x)$在该处不可导 可取间断点，则$F(x)$在该处可导，但$F\u0026rsquo;(x)\\neq f(x)$ 反常积分\n$$ \\int_0^1\\frac{1}{x^p}dx\\begin{cases} \\text{收敛},0","date":"2025-08-17T23:52:05+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0817/","title":"0817学习日志"},{"content":"数学-一元积分学 不定积分 原函数与不定积分 原函数（不定积分）存在定理 连续函数f(x)必有原函数F(x) 含有第一类间断点和无穷间断点的函数f(x)在包含该间断点的区间内没有原函数F(x) 定积分 定义 定积分的概念 几何意义 定积分的精确的定义 定积分的值与字母无关 存在定理 定积分存在的充分条件 定积分存在的必要条件 性质 性质1 ：求区间长度 性质2：积分的线性性质 性质3：积分的可加（拆）性 性质4：积分的保号性 性质5：估值定理 性质6：中值定理 变限积分 概念 性质 反常积分 概念\n敛散性的判别法\n无穷区间\n比较判别法 比较判别法的极限形式 无界函数\n比较判别法 比较判别法的极限形式 ","date":"2025-08-16T23:48:21+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0816/","title":"0816学习日志"},{"content":"网站更新ver2.1\u0026ndash;评论系统 🔊 更新内容：为每一篇博文添加了基于 Giscus的评论系统，如果想要评论请使用github账号登陆。\n博主也是没有什么前端经验，对着代码和stack的用户手册敲敲敲代码，然后问问chatgpt和gemini。出了不少问题，但是试了2hAI的解决方法后，根本没有解决。页面还是会报以下的错误：\nContent-Security-Policy: The page’s settings blocked the loading of a resource (frame-ancestors) at because it violates the following directive: “frame-ancestors \u0026lsquo;self\u0026rsquo;”\n结果证明，GPT5.0 和Gemini2.5 pro仍然会睁眼说瞎话，（人一定要使用脑子bushi 😭)\n最后不抱希望的在互联网上找解决方法，结果您猜怎么着？\n我把语言的\u0026quot;zh-CN\u0026quot;写成了\u0026quot;zn-CN\u0026quot;，最后也是美美解决了，哭笑不得。\nps：ChatGpt5.0仍然会偏向”说服“你他的解决方案，即使你给它新的线索或者报错，它仍然会在回答里添加之前想说服我的方法，属于夹带私货。所以使用AI还是要谨慎啊！搞这个系统的时候，耳机里在放汪苏泷的歌，怪好听的。\n感谢这篇博客给了我启发。\n好啦，脑壳疼，眠。\n晚安。\n","date":"2025-08-15T01:46:06+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/update/0815/","title":"0815网站更新日志"},{"content":"概率论-自然界是对数的吗？ 基本概念 随机试验\n（1）试验可以在相同的条件下重复进行\n（2）实验所有可能结果明确可知，且不止一个\n（3）每一次试验会出现哪一个结果，事先并不能确定\n投篮 掷硬币 随机事件\n样本空间\n事件的关系与运算\n关系 包含：如果事件A发生必导致事件B发生，则称事件B包含事件A,$A\\subset B$ 相等 积（交）：称“事件A与B同时发生”的事件为事件A与B的积事件，$A\\cap B$ 相容：若$AB\\neq \\varnothing$则称事件A和B相容 互斥：若$AB=\\varnothing$,则称事件A和B互不相容，即互斥 和（并）：“事件A与B至少有一个发生”的事件为事件A与B的和事件，$A\\cup B$ 差：“事件A与B至少有一个发生”的事件为事件A与B的差事件，$A-B$ 逆（对立） 完备事件组 运算 吸收律 交换律 结合律 分配律 对偶率（德摩根律） 概率的定义\n描述性定义 统计性定义 公理化定义 古典概型和几何概型 古典概型 概念 只有有限个样本点（基本事件） 每个样本点（基本事件）发生的可能性都一样 计算方法 随机分配问题 简单随机抽样问题 几何概型 概念 样本空间（基本事件空间）$\\Omega$是一个可度量的有界区域 每个样本点（基本事件）发生的可能性都一样，即样本点落入$\\Omega$的某一个可度量的子区域$S$的可能性大小和S的几何度量成正比。 ","date":"2025-08-14T22:31:10+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0814/","title":"0814学习日志"},{"content":"数据结构 采用开放定址法解决冲突的散列查找中，发生聚集的主要原因是：解决冲突的办法选择不当 对于任意n个关键字排序的比较次数至少为$\\lceil \\log_2{(n!)}\\rceil$。 折半插入虽然改进了搜索时间，但是移动次数相较于直接插入排序没有变化，其时间复杂度仍然是$O(n^2)$ 快速排序的空间复杂度平均为$O(\\log_2 n)$，最坏情况为$O(n)$，这是递归的形式。但似乎考试默认是递归栈的空间？ 倘若要对某个进制的整数进行基数排序，那么队列的个数等于进制数，即十进制有10个队列，八进制有8个队列。 对于同等大小的不同初始序列，折半插入排序、简单选择排序总比较次数一定，特别是折半插入排序，需要特别注意。 ","date":"2025-08-13T09:45:30+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0813/","title":"0813错题笔记"},{"content":"计算机组成原理 计算机系统概述 冯诺依曼计算机的特点 采用“存储程序”的工作方式 计算机硬件系统由运算器、存储器、控制器、输入设备和输出设备五大设备类型 指令和数据以同等地位存储在存储器中，形式上没有任何区别，但计算机应能区分它们 指令和数据均用二进制代码表示 指令由操作码和地址码组成，操作码指出操作的类型，地址码指出操作数的地址 计算机的功能部件 输入设备 输出设备 存储器 运算器 控制器 计算机软件 系统软件和应用软件 三个级别的语言 软件和硬件的逻辑功能等价性 计算机系统的层次结构 微程序机器层 传统机器语言层 操作系统层 汇编语言层 高级语言层 计算机系统的工作原理 “存储程序”工作方式 从源文件到可执行文件* 预处理阶段(pre process) 编译阶段(compile) 汇编阶段(assemble) 链接阶段(link) 指令执行过程的描述 取指令 分析指令 执行指令 计算机的性能指标 计算机的主要性能指标\n机器字长\n数据通路带宽\n主存容量\n运算速度\n吞吐量和响应时间 主频和CPU时钟周期 CPI(Cycle per Instruction) IPS(Instruction per Second) CPU执行时间 = CPU时钟周期数/主频 = （指令条数/CPI）/主频 CPU的性能取决于三个要素：主频、CPI和指令条数 MIPS(Million Instruction per Second) = 指令条数/(执行时间*$10^6$) FLOPS(Floating-point Operations Per Second) 基准程序(benchmark)\n","date":"2025-08-13T09:45:22+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0813/","title":"0813学习日志"},{"content":"数据结构 红黑树 RULE Every node is either black or red. The root is black All leaves(NIL/null nodes) are black. Red node rule : If a node is red ,both its children and parents are black.(no two red in a row) Black height rule: Every path from a node to its descendant NIL node contains the same number of black nodes. ​\nConstruction (Insertion) Case 1: Parent node is BLACK, go ahead.\nCase 2: RED parent,See your uncle:\nCase 2.1 :BLACK uncle , Rotation to make things in balance.\nCase 2.2 :RED uncle, BLACK-lize your parent and uncle,RED-lize your grand.\nNow consider the process of your grand and repeat cases above.\nB树 RULES Key properties of a B-Tree of order $m$:\nEvery node can have at most m children Every node (except root )has at least $\\lceil \\frac{m}{2}\\rceil$ children Every non-leaf node with $k$ children has exactly $k-1$ keys Keys in each node are sorted All leaves appear on the same level $$ \\lfloor\\log_{\\lceil\\frac{m}{2}\\rceil}(\\frac{n+1}{2})\\rfloor +1 \\geq h\\geq \\lceil\\log_{m}(n+1)\\rceil $$推理过程\n左式：对于一个m阶的具有n个关键字的B树，其第二层至少有2个结点，第三层至少有$2\\lceil\\frac{m}{2}\\rceil$个结点,以此类推，第$h+1$层至少有$2\\lceil\\frac{m}{2}\\rceil^{h-1}$,这一层为查找失败的叶节点，结点数为$n+1$，因此有 $$ n+1\\geq 2\\lceil\\frac{m}{2}\\rceil^{h-1} $$​\t化简得左式\n右式：对于一个m阶的具有n个关键字的B树，其满足不等式 $$ n\\leq (m-1)(1+m+\\cdots+m^{h-1})=m^h-1 $$ 化简得右式 Construction(Insertion) Find the correct leaf Use the same logic as binary search but in multi-key nodes:\nCompare the new key to the existing keys in the current node. Descend into the correct child pointer until you reach a leaf. Insert key in sorted order in that leaf.\nIf the node has ≤ m − 1 keys after insertion → done.\nIf the node overflows (has m keys):\nSplit the node into two nodes: Middle key moves up to the parent. Left half of keys go to the left child. Right half of keys go to the right child. If the parent also overflows, split it recursively. If the root splits:\nCreate a new root containing the middle key. The height of the B-Tree increases by 1. Deletion If the key is in a leaf → just remove it. If the key is in an internal node: Replace it with the predecessor (largest in left subtree) or successor (smallest in right subtree). Then delete that replacement key from the leaf. If a node falls below ⌈m/2⌉ − 1 keys: Borrow a key from a sibling if possible. Otherwise, merge with a sibling. If the root becomes empty → its only child becomes the new root. ","date":"2025-08-12T11:20:48+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/","title":"0812学习笔记"},{"content":"数据结构 插入排序\n直接插入排序 折半插入排序 希尔排序 交换排序\n冒泡排序 快速排序 二路归并排序\n基数排序\n外部排序\n多路平衡归并与败者树 置换-选择排序 最佳归并树 排序算法的分析和应用\n算法 时间复杂度 最好情况 平均情况 最坏情况 空间复杂度 稳定性 直接插入排序 $O(n)$ $O(n^2)$ $O(n^2)$ $O(1)$ 是 冒泡排序 $O(n)$ $O(n^2)$ $O(n^2)$ $O(1)$ 是 简单选择排序 $O(n^2)$ $O(n^2)$ $O(n^2)$ $O(1)$ 否 希尔排序 $O(1)$ 否 快速排序 $O(n\\log n)$ $O(n\\log n)$ $O(n^2)$ $O(\\log n)$ 否 堆排序 $O(n\\log n)$ $O(n\\log n)$ $O(n\\log n)$ $O(1)$ 否 二路归并排序 $O(n\\log n)$ $O(n\\log n)$ $O(n\\log n)$ $O(n)$ 是 基数排序 $O(d(n+r)$ $O(d(n+r))$ $O(d(n+r)$ $O(1)$ 是 ","date":"2025-08-11T23:43:07+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0811/","title":"0811学习日志"},{"content":"数据结构-查找 顺序查找法 分块查找法（索引顺序查找） 折半查找法 判定树 ASL（平均查找长度） 二叉搜索树 查找 插入 构造 删除（中序） 平衡二叉树（AVL） 插入 LL平衡旋转 LR平衡旋转 RR平衡旋转 RL平衡旋转 构造 删除 查找 红黑树 定义 每个结点或是黑色或是红色 根节点是黑色的 叶节点（虚构的外部节点、NULL节点）都是黑色 不存在两个相邻的红节点 对于每个结点，从该结点到任意一个叶节点的简单路径上，所含黑节点的数量相同 结论 从根到叶结点的最长路径不大于最短路径的2倍 有n个内部结点的红黑树的高度$h\\leq 2\\log_2{(n+1)}$ 插入 新插入红黑树的结点初始着为红色 删除* ","date":"2025-08-09T23:52:51+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0809/","title":"0809学习日志"},{"content":"数学-一元微分学的应用 微分等式 零点定理（证明根的存在性） 单调性（证明根的唯一性） 罗尔定理及其推论 实系数奇次方程至少有一个实根($-\\infty +\\infty$) 微分不等式 用函数性态（包括单调性、凹凸性和最值） 用常数变量化证明不等式 用中值定理证明不等式 物理应用与相关变化率 物理应用\n速度 加速度 相关变化率\n$$ \\dfrac{dA}{dB}=\\dfrac{dA}{dC}\\cdot\\dfrac{dC}{dB} $$ 操作系统-Three easy pieces Segmentation explicit approach\n[\u0026mdash;\u0026mdash;\u0026mdash;-|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; ] (address)\n[ segment | offset ]\nimplicit approach\nHardware determined.\nCoarse segmentation vs. Fine segmentation\nFree Space Management Low level Mechanisms Splitting and coalescing Embedding a free list Growing a Heap Basic Strategies Best Fit First Fit Next Fit Other Approaches Segregated Lists Buddy Allocation Introduction to Paging Page table\nPTE\n","date":"2025-08-08T20:11:28+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0808/","title":"0808学习日志"},{"content":"数学-太好了是中值定理我们有救了 中值定理 有界与最值定理：\n若函数 $f$ 在闭区间 $[a, b]$ 上连续，则 $f$ 在 $[a, b]$ 上取得最大值和最小值。\n即存在 $x_{\\min}, x_{\\max} \\in [a, b]$ 使得：\n$$ f(x_{\\min}) \\le f(x) \\le f(x_{\\max}),\\quad \\forall x \\in [a,b] $$ 界值定理\n设 $f$ 在闭区间 $[a, b]$ 上连续，若 $f(a) \u0026lt; 0 \u0026lt; f(b)$，则存在 $c \\in (a, b)$ 使得 $f(c) = 0$。\n平均值定理\n零点定理\n费马定理：\n若函数 $f$ 在 $x_0$ 点可导，且在该点取得极值（极大或极小），则：\n$$ f'(x_0) = 0 $$ (引理)导数零点定理 罗尔定理\n设 $f$ 在 $[a, b]$ 上连续，在 $(a,b)$ 上可导，且：\n$$ f(a) = f(b) $$则存在 $c \\in (a, b)$ 使得：\n$$ f'(c) = 0 $$ 拉格朗日中值定理\n设 $f$ 在 $[a,b]$ 上连续，$(a,b)$ 上可导，则存在 $c \\in (a,b)$，使得：\n$$ f'(c) = \\frac{f(b) - f(a)}{b - a} $$ 柯西中值定理\n设函数 $f,g$ 在 $[a,b]$ 上连续，$(a,b)$ 可导，且 $g\u0026rsquo;(x) \\ne 0$ 于 $(a,b)$，则存在 $c \\in (a,b)$，使得：\n$$ \\frac{f'(c)}{g'(c)} = \\frac{f(b) - f(a)}{g(b) - g(a)} $$ 泰勒公式\n若 $f \\in C^{n+1}[a,b]$，则对 $x \\in [a,b]$，存在 $\\xi$ 介于 $a$ 与 $x$ 之间，使得：\n$$ f(x) = f(a) + f'(a)(x - a) + \\cdots + \\frac{f^{(n)}(a)}{n!}(x - a)^n + \\frac{f^{(n+1)}(\\xi)}{(n+1)!}(x - a)^{n+1} $$ ","date":"2025-08-07T19:33:44+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0807/","title":"0807学习日志"},{"content":"数学-一些不等式 分析中常用的不等式 1. 伯努利不等式 (Bernoulli\u0026rsquo;s Inequality) 对于任意实数 $x \u0026gt; -1$ 和整数 $n \\ge 1$，有： $$ (1+x)^n \\ge 1+nx $$ 当且仅当 $n=1$或 $x=0$ 时等号成立。\n对于实数 $$x \\ge -1$$ 和实数 $\\alpha \\ge 1$，有更广义的形式： $$ (1+x)^\\alpha \\ge 1+\\alpha x $$ 2. 均值不等式 (Mean Inequalities) 对于一组非负实数 $x_1, x_2, \\dots, x_n$，有以下关系： $$ \\frac{n}{\\sum_{i=1}^n \\frac{1}{x_i}} \\le \\sqrt[n]{\\prod_{i=1}^n x_i} \\le \\frac{\\sum_{i=1}^n x_i}{n} \\le \\sqrt{\\frac{\\sum_{i=1}^n x_i^2}{n}} $$ 这可以简记为：调和平均数 ≤ 几何平均数 ≤ 算术平均数 ≤ 平方平均数。\n3. 琴生不等式 (Jensen\u0026rsquo;s Inequality) 如果 $f(x)$ 是一个凸函数，$\\lambda_i \\ge 0$ 且 $\\sum\\limits_{i=1}^n \\lambda_i = 1$，则对于任意点 $x_1, x_2, \\dots, x_n$，有： $$ f\\left(\\sum_{i=1}^n \\lambda_i x_i\\right) \\le \\sum_{i=1}^n \\lambda_i f(x_i) $$ 对于凹函数，不等号方向相反。琴生不等式在概率论和信息论中也有重要应用。\n4. 绝对值不等式 (Triangle Inequality) 对于任意实数或复数 $a$ 和 $b$，或者对于向量 $a$ 和 $b$，有： $$ |a+b| \\le |a| + |b| $$ 其推广形式为： $$ \\left|\\sum_{i=1}^n x_i\\right| \\le \\sum_{i=1}^n |x_i| $$ 代数与几何中的不等式 1. 柯西-施瓦茨不等式 (Cauchy-Schwarz Inequality) 对于任意两组实数 $a_1, a_2, \\dots, a_n$ 和 $b_1, b_2, \\dots, b_n$，有： $$ \\left(\\sum_{i=1}^n a_i b_i\\right)^2 \\le \\left(\\sum_{i=1}^n a_i^2\\right) \\left(\\sum_{i=1}^n b_i^2\\right) $$ 在向量空间中，它可以表示为： $$ |\\langle \\mathbf{u}, \\mathbf{v} \\rangle|^2 \\le \\langle \\mathbf{u}, \\mathbf{u} \\rangle \\cdot \\langle \\mathbf{v}, \\mathbf{v} \\rangle = \\|\\mathbf{u}\\|^2 \\cdot \\|\\mathbf{v}\\|^2 $$ 2. 赫尔德不等式 (Hölder\u0026rsquo;s Inequality) 设 $p, q$为正实数，满足 $$\\frac{1}{p} + \\frac{1}{q} = 1$$。对于两组实数或复数 $x_1, \\dots, x_n$和 $y_1, \\dots, y_n$，有： $$ \\sum_{i=1}^n |x_i y_i| \\le \\left(\\sum_{i=1}^n |x_i|^p\\right)^{1/p} \\left(\\sum_{i=1}^n |y_i|^q\\right)^{1/q} $$ 柯西-施瓦茨不等式是赫尔德不等式在 $p=q=2$ 时的特例。\n3. 闵可夫斯基不等式 (Minkowski Inequality) 对于任意实数 $p \\ge 1$ 和两组实数或复数 $x_1, \\dots, x_n$ 和 $y_1, \\dots, y_n$，有： $$ \\left(\\sum_{i=1}^n |x_i + y_i|^p\\right)^{1/p} \\le \\left(\\sum_{i=1}^n |x_i|^p\\right)^{1/p} + \\left(\\sum_{i=1}^n |y_i|^p\\right)^{1/p} $$ 这个不等式是向量空间中范数的三角不等式的推广。\n4. 排序不等式 (Rearrangement Inequality) 设有两组实数 $a_1 \\le a_2 \\le \\dots \\le a_n$ 和 $b_1 \\le b_2 \\le \\dots \\le b_n$。令 $(c_1, c_2, \\dots, c_n)$ 是 $(b_1, b_2, \\dots, b_n)$ 的任意一个排列，则有： $$ \\sum_{i=1}^n a_i b_{n-i+1} \\le \\sum_{i=1}^n a_i c_i \\le \\sum_{i=1}^n a_i b_i $$ 即“反序和 ≤ 乱序和 ≤ 顺序和”。\n微积分中的不等式 1. 杨氏不等式 (Young\u0026rsquo;s Inequality) 设 $a, b$ 为非负实数，$p, q$ 为正实数且满足 $$\\frac{1}{p} + \\frac{1}{q} = 1$$，则： $$ ab \\le \\frac{a^p}{p} + \\frac{b^q}{q} $$2. 切比雪夫总和不等式 (Chebyshev\u0026rsquo;s Sum Inequality) 设有两组单调序列 $a_1 \\le a_2 \\le \\dots \\le a_n$ 和 $b_1 \\le b_2 \\le \\dots \\le b_n$，则有： $$ \\frac{1}{n} \\sum_{i=1}^n a_i b_i \\ge \\left(\\frac{1}{n} \\sum_{i=1}^n a_i\\right) \\left(\\frac{1}{n} \\sum_{i=1}^n b_i\\right) $$ 如果一个序列单调递增，另一个单调递减，则不等号方向相反。\n","date":"2025-08-06T20:32:29+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0806/","title":"0806学习笔记"},{"content":"操作系统-three easy pieces Memory API void * malloc(size_t size)\nvoid free(void* ptr)\nCommon Errors Forgetting To Allocate Memory Not Allocating Enough Memory Forgetting To Initializing Memory Forgetting To Free Memory Freeing Memory Before You Are Done With It Freeing Memory Repeatedly Calling free() Incorrectly Other Call calloc() realloc() Address Translation hardware-based address translation: Base and bound ","date":"2025-08-06T20:32:24+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0806/","title":"0806学习日志"},{"content":"操作系统-IO管理 IO层次结构 计算机的外部设备（I/O 设备）种类繁多，特性千差万别：\n速度差异巨大： CPU 的速度比键盘快上亿倍，但比高速的 NVMe SSD 又慢一些。 功能各异： 打印机是输出设备，键盘是输入设备，硬盘既是输入也是输出设备。 控制方式复杂： 每个设备都有自己独特的指令集、寄存器和工作协议。 如果让每个应用程序都去直接和这些具体的硬件打交道，那将是一场灾难。因此，操作系统设计了一个分层的结构来管理 I/O，其主要目标是：\n设备独立性（Device Independence）： 应用程序的编写不应依赖于具体的物理设备。例如，一个程序向一个文件写入数据，它不应该关心这个文件是存在于机械硬盘、U盘还是网络存储上。 统一接口（Uniform Interface）： 为应用程序提供一个简洁、一致的访问接口。在类 Unix 系统中，这个思想的极致体现就是“一切皆文件”，无论是访问硬盘、键盘还是打印机，都可以使用类似 read() 和 write() 的函数。 错误处理（Error Handling）： 在尽可能低的层次处理设备错误，只将无法解决的严重错误向上层报告，简化上层软件的逻辑。 效率与性能（Efficiency and Performance）： 通过缓冲（Buffering）、缓存（Caching）和异步操作等技术，协调高速 CPU 与低速设备之间的矛盾，提高系统整体吞吐量。 I/O 软件通常被组织成一个四到五层的结构。一个 I/O 请求会从顶层逐级向下传递，直到硬件；而操作完成的信号和数据则会从底层逐级向上传递。\n下面是从上到下（从用户到硬件）的层次结构：\n第 1 层：用户层 I/O 软件 (User-Level I/O Software) 这是最靠近应用程序的一层，它不是操作系统内核的一部分。\n功能： 为应用程序员提供方便的接口库（Library），这些库函数最终会通过**系统调用（System Call）**请求内核的服务。 例子： C语言中的标准 I/O 库函数，如 printf(), scanf(), fopen(), fread()。 各种编程语言提供的 I/O 库。 工作流程： 比如，当你在程序中调用 printf(\u0026quot;Hello\u0026quot;) 时，printf 函数会格式化字符串，然后调用底层的 write() 系统调用，请求内核将数据输出到屏幕。 第 2 层：设备无关的操作系统软件 (Device-Independent OS Software) 这是 I/O 结构的核心，它实现了设备独立性的主要逻辑。\n功能： 提供一个对所有设备都统一的框架。它负责处理所有设备共有的功能。 统一接口： 向用户层提供统一的系统调用接口（如 read, write, open, close）。 设备命名： 将设备映射到文件系统中的名字（例如 Linux 中的 /dev/sda1 代表第一个硬盘的第一个分区）。 设备保护： 检查用户是否有权限访问某个设备。 提供缓冲（Buffering）： 在用户空间和设备之间提供数据缓冲区，以协调速度差异。 分配与释放： 管理设备的分配和释放，例如独占设备（如打印机）的使用。 例子： Linux 中的虚拟文件系统（VFS）层就扮演了这个角色。 第 3 层：设备驱动程序 (Device Drivers) 这是操作系统内核中与特定设备直接相关的部分。\n功能： 充当“翻译官”的角色。它接收来自上层（设备无关层）的抽象命令（如“从这个设备读取 512 字节”），并将其翻译成设备控制器能够理解的具体指令（如向设备的某个寄存器写入特定的值）。 特点： 设备特定： 每种类型的设备（或一个设备家族）都有一个专门的驱动程序。例如，NVIDIA 显卡有其驱动，Intel 的网卡有它的驱动。 可加载模块： 现代操作系统通常将驱动程序实现为内核模块，可以在系统运行时动态加载或卸载，而无需重新编译整个内核。 工作流程： 驱动程序设置好设备寄存器，命令设备开始工作后，它通常会阻塞（等待）直到设备完成操作。 第 4 层：中断处理程序 (Interrupt Handlers) 这是处理硬件与软件交互最底层、最直接的部分。\n功能： 当 I/O 设备完成一项任务（例如，硬盘读完一个数据块）或者发生错误时，它会向 CPU 发送一个中断信号（Interrupt）。中断处理程序就是被这个信号触发而运行的一段代码。 工作流程： CPU 暂停当前正在执行的任何任务。 保存当前任务的上下文（寄存器状态等）。 跳转到预设的中断处理程序地址并开始执行。 中断处理程序分析中断原因，进行相应处理（例如，将从设备读取的数据放入缓冲区，并唤醒正在等待这个数据的设备驱动程序）。 处理完毕后，恢复之前被暂停任务的上下文，让它继续运行。 核心作用： 实现了真正的异步操作，让 CPU 在等待 I/O 时可以去做别的事情，而不是空闲等待。 第 5 层：硬件 (Hardware) 这是层次结构的最底层，包含了物理设备本身及其控制器。\n组成： 设备本身（如磁盘盘片、打印机喷头）和设备控制器（一块包含寄存器和逻辑电路的芯片，负责与 CPU 通信）。 功能： 真正执行 I/O 操作的物理实体。 一次 I/O 请求的完整流程（以读文件为例） 假设一个用户程序执行 read(fd, buffer, nbytes) 来读取文件：\n用户层： read() 库函数打包参数，并发起一个系统调用陷入内核。 设备无关层： 内核的设备无关软件接收到请求。 它首先检查内核的缓冲区缓存（Buffer Cache），看请求的数据是否已经存在。如果命中，则直接从缓存复制数据到用户 buffer，请求结束。 如果未命中，它会计算出需要从哪个设备的哪个物理位置读取数据。 然后调用该设备的驱动程序。 设备驱动层： 设备驱动程序接收到请求（例如，“读取硬盘的第 12345 号逻辑块”）。 它将这个抽象请求翻译成设备控制器能懂的命令，并把这些命令写入设备控制器的寄存器中。 驱动程序随后阻塞当前进程（将其放入等待队列），并让出 CPU。 硬件层： 设备控制器开始工作，驱动硬盘马达，移动磁头，读取数据到其内部缓冲区。 中断处理层（返回过程）： 当硬件完成数据读取后，它向 CPU 发送一个中断。 CPU 捕获中断，并执行对应的中断处理程序。 中断处理程序从设备控制器的缓冲区取出数据，放入内核的缓冲区缓存中。 然后，它唤醒之前被阻塞的设备驱动进程。 返回上层： 被唤醒的设备驱动程序得知操作已完成。 设备无关层将数据从内核的缓冲区缓存复制到用户程序指定的 buffer 中。 系统调用返回，用户程序从 read() 调用处继续执行。 层次 主要功能 例子 用户层软件 提供方便的编程接口，发起系统调用 printf(), fopen() 等库函数 设备无关OS软件 提供统一接口，设备命名，缓冲，错误报告，分配与释放 虚拟文件系统(VFS)，缓冲区缓存管理 设备驱动程序 设置设备寄存器，检查设备状态，将抽象命令翻译为具体指令 显卡驱动，网卡驱动，磁盘驱动 中断处理程序 响应硬件中断，保存CPU状态，唤醒驱动程序 I/O 完成中断，时钟中断 硬件 执行具体的I/O操作 磁盘控制器，键盘控制器，物理设备本身 (Output by Gemini2.5pro)\nDMA （DMA工作流程）\nDMA的出现就是为了将CPU从这种繁琐的搬运工作中解放出来。下面是DMA的工作流程，以及各层次扮演的角色：\n步骤 动作 负责的层次/组件 1 用户程序发起一个读操作（例如 read() 系统调用）。 用户层软件 2 系统调用陷入内核，请求被设备无关的OS软件接收。它可能会检查缓存，如果未命中，则确定需要调用哪个驱动。 设备无关的OS软件 3 设备驱动程序被调用。这是最关键的一步，驱动程序开始配置DMA：\u0026lt;br\u0026gt;1. 在内存中分配一个缓冲区（Buffer）。\u0026lt;br\u0026gt;2. 告诉DMA控制器四件事：\u0026lt;br\u0026gt; - 源地址：要从哪个设备寄存器读取数据。\u0026lt;br\u0026gt; - 目标地址：数据要存放到内存的哪个位置（即缓冲区地址）。\u0026lt;br\u0026gt; - 传输长度：要传输多少字节的数据。\u0026lt;br\u0026gt; - 传输方向：是从设备读到内存，还是从内存写到设备。\u0026lt;br\u0026gt;3. 驱动程序向设备控制器发出“开始传输数据给DMA”的命令。\u0026lt;br\u0026gt;4. 驱动程序将当前进程阻塞，并让出CPU给其他进程使用。 设备驱动程序 4 DMA控制器完全接管数据传输。它直接与设备控制器和内存总线交互，将数据块从设备搬运到内存缓冲区，整个过程无需CPU干预。 硬件层 (DMA控制器 \u0026amp; 设备控制器) 5 数据传输完成后，DMA控制器会向CPU发送一个中断信号，通知任务已完成。 硬件层 (DMA控制器) 6 CPU捕获中断，并跳转到中断处理程序执行。 中断处理程序 7 中断处理程序分析中断来源，发现是DMA完成中断。于是它唤醒之前被阻塞的设备驱动程序对应的进程。 中断处理程序 8 驱动程序被唤醒后，知道数据已经安全地存放在内存缓冲区里了。它进行一些清理工作，并将结果报告给上层。 设备驱动程序 9 设备无关的OS软件将数据从内核的缓冲区复制到用户程序的缓冲区，然后系统调用返回。 设备无关的OS软件 SPOOLing 引导过程 好的，我们来详细、系统地讲解一下计算机的引导过程（Booting Process 或 Bootstrap）。这个过程是指从按下电源按钮开始，到操作系统完全加载并准备好与用户交互为止的一系列复杂而有序的步骤。\n“Bootstrap”这个词源于一个古老的说法“pull oneself up by one\u0026rsquo;s bootstraps”（靠自己鞋带把自己拉起来），形象地比喻了计算机在没有任何外部帮助的情况下，如何一步步地“唤醒”自己。\n计算机的引导过程主要可以分为两种主流方式：传统的 BIOS-MBR 方式和现代的 UEFI-GPT 方式。我们分别来介绍。\n1. 传统的 BIOS-MBR 引导过程 这是在2010年之前个人电脑最常见的引导方式。\n阶段一：BIOS 阶段 (固件执行) 上电 (Power On)： 当你按下电源键，主板上的电源管理单元（PSU）向CPU发送一个“Power Good”信号。CPU接收到信号后，开始执行存储在主板上一个ROM芯片（通常是EEPROM或Flash）中的程序。这个程序就是 BIOS (Basic Input/Output System)。\nPOST (Power-On Self-Test - 开机自检)： BIOS 首先会运行开机自检程序。\n任务： 检查计算机最核心的硬件是否工作正常，包括 CPU、内存（RAM）、显卡、键盘等。 反馈： 如果自检通过，通常会发出一声短促的“嘀”声。如果发现严重故障（如内存没插好），它会通过不同的蜂鸣声组合来报警。 初始化硬件 (Initialization)： BIOS 初始化一些关键的硬件设备，为后续加载操作系统做准备。\n选择引导设备 (Boot Device Selection)：\nBIOS会根据预设的启动顺序（Boot Order，可在BIOS设置中修改），依次检查可引导的存储设备，如硬盘、U盘、光驱、网络等。 它会检查每个设备的第一个扇区（512字节）。 加载 MBR (Master Boot Record - 主引导记录)：\n当BIOS找到一个可引导的硬盘时，它会检查这个硬盘的第一个扇区（也称为0号扇区）的最后两个字节是否为 0x55AA（称为引导签名）。 如果签名正确，BIOS就会将这整个512字节的主引导记录（MBR）加载到内存的一个固定地址（通常是 0x7C00）处，然后将CPU的控制权转交给这段刚刚加载的代码。 到此，BIOS的任务彻底完成。 阶段二：MBR 与 Bootloader 阶段 (硬盘代码执行) MBR 执行： CPU 开始执行内存中 0x7C00 地址处的MBR代码。MBR非常小，只有不到446字节的代码空间。它的任务很简单：\n在MBR内部的分区表中，找到被标记为“活动”的那个分区（只有一个）。 将该活动分区的第一个扇区——称为**分区引导记录（PBR - Partition Boot Record）**或卷引导记录（VBR）——加载到内存中。 将CPU控制权转交给这段PBR代码。 Bootloader 执行： PBR中的代码通常是**操作系统加载器（Bootloader）**的第一部分。例如，Windows的 bootmgr 或 Linux 的 GRUB (GRand Unified Bootloader)。\n由于一个扇区太小，Bootloader通常会分为多个阶段。第一阶段的代码（在PBR中）非常简单，其唯一任务就是从文件系统中加载Bootloader的后续、更复杂的阶段代码。 Bootloader的功能要强大得多，它能够识别和解析文件系统（如NTFS, ext4），因为它需要找到并加载操作系统的核心文件。 阶段三：操作系统内核加载 加载内核 (Kernel Loading)： Bootloader（如GRUB）会根据其配置文件（如 grub.cfg）中的指令，找到操作系统内核文件（如Windows的 ntoskrnl.exe 或Linux的 vmlinuz）和初始内存盘（initrd.img）等，并将它们加载到内存中。\n启动内核 (Kernel Initialization)：\nBootloader将CPU控制权最终交给加载到内存中的操作系统内核。 内核开始执行，它会： 初始化更高级的硬件驱动程序。 启动核心的系统进程（如Windows的 System进程，Linux的 systemd或 init进程）。 挂载根文件系统。 启动用户界面的相关服务，最终显示登录界面或桌面。 至此，整个引导过程完成。\n2. 现代的 UEFI-GPT 引导过程 UEFI (Unified Extensible Firmware Interface) 是BIOS的现代替代品，它克服了BIOS的许多限制。GPT (GUID Partition Table) 是MBR的替代分区方案。\nUEFI的引导过程更直接、更灵活、更安全。\n阶段一：UEFI 固件执行 上电与 SEC (Security) 阶段： 与BIOS类似，系统上电，CPU开始执行UEFI固件代码。首先是安全验证阶段，为后续执行建立一个可信的环境。\nPEI (Pre-EFI Initialization) 阶段： 类似于POST，进行核心硬件（CPU、芯片组、内存）的初始化。\nDXE (Driver Execution Environment) 阶段： 这是UEFI的核心。UEFI固件会加载和执行大量的UEFI驱动程序。这使得UEFI在引导阶段就能识别复杂硬件，并能识别GPT分区表和FAT32等文件系统。这是UEFI与BIOS最本质的区别——BIOS不懂文件系统，而UEFI懂。\nBDS (Boot Device Select) 阶段：\nUEFI固件会读取存储在NVRAM（一种非易失性RAM）中的启动项配置。 它不再是盲目地去读设备的第一个扇区。相反，它直接去访问硬盘上一个特殊的、必需的、格式为FAT32的小分区，称为 EFI系统分区 (ESP - EFI System Partition)。 UEFI会根据启动项配置，在ESP分区中查找并执行指定的引导加载程序文件。这个文件是一个标准的 .efi 可执行文件，例如 \\EFI\\Microsoft\\Boot\\bootmgfw.efi (Windows) 或 \\EFI\\ubuntu\\shimx64.efi (Ubuntu)。 阶段二：操作系统加载 执行EFI引导程序： UEFI固件直接将CPU控制权交给从ESP分区加载的 .efi 文件。 加载操作系统： 这个 .efi引导程序（如Windows Boot Manager或GRUB2）接下来负责加载操作系统的内核和相关文件，并将控制权交给内核。 内核初始化： 后续步骤与BIOS-MBR方式基本相同，内核接管系统，完成初始化，并启动用户界面。 BIOS-MBR vs. UEFI-GPT 对比 特性 BIOS-MBR UEFI-GPT 优势 分区方案 MBR (Master Boot Record) GPT (GUID Partition Table) GPT支持超过2TB的硬盘和最多128个主分区，更可靠。 引导方式 读设备第一个扇区，链式加载 直接从ESP分区加载 .efi 文件 UEFI更直接、更快速，因为它认识文件系统，无需链式跳转。 代码架构 16位汇编，实模式 32/64位C语言，保护模式 UEFI像一个微型操作系统，功能强大，界面友好（支持鼠标）。 安全性 无原生安全机制 支持安全启动 (Secure Boot) Secure Boot可以防止未经签名的恶意引导程序（如Bootkit）加载。 兼容性 兼容性好，但技术老旧 现代主流标准，但老旧系统可能不支持 UEFI是未来趋势。 总而言之，计算机的引导过程是一个从固化在硬件中的最简单代码开始，一步步加载更复杂软件，最终将整个庞大的操作系统“唤醒”并交出控制权的接力过程。\n","date":"2025-08-04T20:51:06+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0804/","title":"0804学习日志"},{"content":"数学-拐点和极值点 二级结论 曲线的可导点不可同时为极值点和拐点；曲线的不可导点可同时为极值点和拐点\n设多项式$f(x)={(x-a)}^ng(x)(x\u0026gt;1)$,且$g(a)\\neq0$则当n为偶数时，$x=a$ 是$f(x)$的极值点；当n为奇数时，点$(a,0)$是曲线f(x)的拐点\n设多项式函数$f(x)=(x-a_1)^{n_1}(x-a_2)^{n_2}\\cdots(x-a_k)^{n_k}$其中$n_i$是正整数，$a_i$是实数且两两不等，则f(x)的极值为 $$ k_1+2k_2+k_3-1 $$ 拐点个数为 $$ k_1+2k_2+3k_3-2 $$ 其中$k_1$为$n_i=1$的个数，k_2为$n_i$为偶数的个数，$k_3$为$n_i$为奇数的个数\n数学-曲率证明 数学证明过程 曲率$\\kappa$被定义为 $$ \\kappa = \\left| \\frac{d\\theta}{ds} \\right| $$ 同时 $$ \\begin{align*} \\tan \\theta \u0026= \\frac{dy}{dx} = f'(x)\\\\ \\theta \u0026= \\arctan{ f'(x)}\\\\ d\\theta \u0026= \\frac{f''(x)}{1+{(f'(x))}^2}dx \\end{align*} $$ 弧长微分 $$ ds = \\sqrt{1+{(f'(x))}^2}dx $$ 于是 $$ \\kappa = \\left| \\dfrac{\\dfrac{d\\theta}{dx}}{\\dfrac{ds}{dx}} \\right|= \\frac{f''(x)}{\\left(1+{(f'(x))}^2\\right)^{\\frac{3}{2}}} $$物理证明视角\u0026ndash;参数方程 给定某个质点沿xy轴方向的位移$\\mathbf{x}(x,x)$参数方程 $$ \\begin{cases} x = \\varphi(t)\\\\ y = \\omega(t)\\\\ \\end{cases} $$给定某个质点沿xy轴方向的速度$\\mathbf{v}(v_x,v_y)$参数方程 $$ \\begin{cases} v_x = \\varphi'(t)\\\\ v_y = \\omega'(t)\\\\ \\end{cases} $$那么加速度$\\mathbf{a}=(a_x,a_y)$ $$ \\begin{cases} a_x = \\varphi''(t)\\\\ a_y = \\omega''(t)\\\\ \\end{cases} $$ 根据曲率半径的计算公式 $$ r = \\left|\\frac{\\mathbf{v}^2}{\\mathbf{a}_{\\perp}}\\right| $$ 又由于 $$ |\\mathbf{a}_{\\perp}| = |\\mathbf{a}\\sin \\theta|=\\frac{|\\mathbf{a\\times v}|}{|\\mathbf{v}|} $$ 因此 $$ \\begin{align*} \\kappa \u0026= \\frac{1}{r} = \\left|\\frac{\\mathbf{a}_{\\perp}}{\\mathbf{v}^2}\\right|\\\\ \u0026= \\frac{|\\mathbf{a\\times v}|}{|\\mathbf{v}|^3}\\\\ \u0026= \\frac{|\\varphi''(t)\\omega'(t)-\\varphi'(t)\\omega''(t)|}{\\left(\\varphi'(t)^2+\\omega'(t)^2\\right)^{\\frac{3}{2}}} \\end{align*} $$","date":"2025-08-03T23:58:07+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0803/","title":"0803学习笔记"},{"content":"数据结构-代码实现 下文为三种二叉树遍历的c语言代码实现，包括：\n前序遍历： 递归 非递归 中序遍历 递归 非递归 后序遍历 递归 非递归 以下为头文件tree.h对各种数据结构和函数的定义\n#include \u0026#34;stack.h\u0026#34; #define TREE_DATATYPE int typedef struct Btree { TREE_DATATYPE data; struct Btree *left_child; struct Btree *right_child; //.... } Btree; void bt_printf(Btree *node); Btree *bt_new_node(TREE_DATATYPE value); // Preorder Traversal void bt_pre_rec(Btree *node, void (*visit)(Btree *)); void bt_pre_nonrec(Btree *root, void (*visit)(Btree *)); // Inorder Traversal void bt_in_rec(Btree *root, void (*visit)(Btree *)); void bt_in_nonrec(Btree *root, void (*visit)(Btree *)); // Postorder Traversal void bt_post_rec(Btree *root, void (*visit)(Btree *)); void bt_post_rec(Btree *root, void (*visit)(Btree *)); 然后是各个代码的具体实现，在Btree.c\nvoid bt_printf(Btree *node);\nBtree *bt_new_node(TREE_DATATYPE value) { Btree *node = (Btree *)malloc(sizeof(Btree)); if (!node) { perror(\u0026#34;malloc failed\u0026#34;); exit(1); } node-\u0026gt;data = value; node-\u0026gt;left_child = NULL; node-\u0026gt;right_child = NULL; return node; } Btree *bt_new_node(TREE_DATATYPE value);\nvoid bt_printf(Btree *node) { if (node) { printf(\u0026#34;%d \u0026#34;, node-\u0026gt;data); } } Preorder 递归 void bt_pre_rec(Btree *node, void (*visit)(Btree *));\nvoid bt_pre_rec(Btree *node, void(*visit)(Btree *)) { if (!node) { return; } visit(node); // Visit the current node bt_pre_rec(node-\u0026gt;left_child, visit); bt_pre_rec(node-\u0026gt;right_child, visit); } 非递归 void bt_pre_nonrec(Btree *root, void (*visit)(Btree *));\nvoid bt_pre_nonrec(Btree *root, void(*visit)(Btree *)) { // Standard Algorithm: // pop a node; // visit the node; // push its right child; // push its left child; if (!root) return; Btree *p = root; StaticStack stack; ss_init(\u0026amp;stack); ss_push(\u0026amp;stack, (DATATYPE)p); // Push the root node onto the stack while (!ss_is_empty(\u0026amp;stack)) { DATATYPE value; ss_pop(\u0026amp;stack, \u0026amp;value); p = (Btree *)value; // Pop the top node from the stack if (!p) continue; // If the popped node is NULL, skip it // Process the current node visit(p); // Push right child first so that left child is processed first if (p-\u0026gt;right_child) { ss_push(\u0026amp;stack, (DATATYPE)p-\u0026gt;right_child); } if (p-\u0026gt;left_child) { ss_push(\u0026amp;stack, (DATATYPE)p-\u0026gt;left_child); } } // my poor attempt at a non-recursive preorder traversal // { // visit the current node // printf(\u0026#34;%d \u0026#34;, p-\u0026gt;data); // if (p-\u0026gt;right_child){ // ss_push(\u0026amp;stack, (DATATYPE) p-\u0026gt;right_child); // } // if (p-\u0026gt;left_child) // { // p = p-\u0026gt;left_child; // } // else if (ss_is_empty(\u0026amp;stack)) // { // break; // Exit if the stack is empty // } // else // { // DATATYPE value; // ss_pop(\u0026amp;stack, \u0026amp;value); // p = (Btree *) value; // } // } } Inorder 递归 void bt_in_rec(Btree *root, void (*visit)(Btree *));\nvoid bt_in_rec(Btree *root, void(*visit)(Btree *)) { if (!root) { return; } bt_in_rec(root-\u0026gt;left_child, visit); visit(root); // Visit the current node bt_in_rec(root-\u0026gt;right_child, visit); } 非递归 void bt_in_nonrec(Btree *root, void (*visit)(Btree *)); void bt_in_nonrec(Btree *root,void(*visit)(Btree *)) { if (!root) return; StaticStack stack; ss_init(\u0026amp;stack); Btree *p = root; while (p || !ss_is_empty(\u0026amp;stack)) { while (p) { ss_push(\u0026amp;stack, (DATATYPE)p); p = p-\u0026gt;left_child; } DATATYPE value; ss_pop(\u0026amp;stack, \u0026amp;value); p = (Btree *)value; // Pop the top node from the stack visit(p); // Visit the current node p = p-\u0026gt;right_child; // Move to the right child } } Postorder 递归 void bt_post_rec(Btree *root, void (*visit)(Btree *));\nvoid bt_post_rec(Btree *root, void(*visit)(Btree *)) { if (!root) { return; } bt_post_rec(root-\u0026gt;left_child, visit); bt_post_rec(root-\u0026gt;right_child, visit); visit(root); } 非递归 void bt_post_rec(Btree *root, void (*visit)(Btree *));\nvoid bt_post_nonrec(Btree *root, void(*visit)(Btree *)) { if (!root) return; StaticStack stack; ss_init(\u0026amp;stack); Btree *p = root; Btree *last_visit = NULL; while (p || !ss_is_empty(\u0026amp;stack)) { while (p) { ss_push(\u0026amp;stack, (DATATYPE)p); p = p-\u0026gt;left_child; } DATATYPE value; ss_top(\u0026amp;stack, \u0026amp;value); p = (Btree *)value; // Pop the top node from the stack if (!p) continue; // If the popped node is NULL, skip it if (!p-\u0026gt;right_child || p-\u0026gt;right_child == last_visit) { // If there is no right child or the right child has been visited ss_pop(\u0026amp;stack, \u0026amp;value); visit(p); // Visit the current node last_visit = p; // Update last visited node p = NULL; // Set p to NULL to continue backtracking } else { p = p-\u0026gt;right_child; // Move to the right child } } } ","date":"2025-08-01T20:10:27+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0801/","title":"0801学习笔记"},{"content":"操作系统 设备独立性软件 高速缓存与缓冲区\n磁盘高速缓存 缓冲区 缓冲CPU与I/O设备间速度不匹配的矛盾 减少对CPU的中断频率，放宽对CPU中断响应时间的限制 解决基本数据单元大小（数据粒度）不匹配的问题 提高CPU和IO设备之间的并行性 单缓冲 双缓冲 循环缓冲 缓冲池 设备分配与回收\n设备分配的数据结构 设备控制表（DCT） 设备控制表 设备类型 设备标识符 设备状态 指向控制器表的指针 重复执行次数或时间 设备队列的队首指针 控制器控制表（COCT） 通道控制表（CHCT） 系统设备表（SDT） 设备分配时应考虑的因素\n设备的固有属性 独占设备 共享设备 虚拟设备 设备分配算法 FCFS 最高优先级优先算法 设备分配中的安全性 安全分配方式 不安全分配方式 设备分配步骤 分配设备 分配控制器 分配通道 SPOOLing （假脱机技术）\n输入井和输出井 输入缓冲区和输出缓冲区 输入进程和输出进程 井管理程序 磁盘和固态硬盘 磁盘\n概念\n磁头 磁道 扇区 盘块 磁盘是一种主要的计算机辅助存储设备，它利用磁性记录来存储和检索数字信息。为了有效地组织和访问这些数据，磁盘被划分成多个层级的结构。\n物理结构：硬件层面 物理结构是磁盘驱动器本身的硬件构造，决定了数据是如何被物理存储的。\n盘片 (Platter) 盘片是构成硬盘的核心部件，它是一个或多个坚硬的、通常由铝、玻璃或陶瓷制成的圆形盘片。盘片的双面都涂有磁性材料，用于存储数据。一个硬盘驱动器通常包含多个堆叠在一起的盘片。 主轴 (Spindle) 主轴是一个马达，所有的盘片都围绕它以恒定且极高的速度旋转（例如，每分钟7200转）。主轴的稳定性和转速对硬盘的性能至关重要。 磁头 (Read/Write Head) 每个盘片的每个磁性表面都有一个对应的磁头。磁头负责读取盘片上的磁性信息（转换为数据）或向盘片写入磁性信息（存储数据）。在工作时，磁头在一个微小的气垫上“飞行”，与盘片表面保持极近但又不接触的距离。 磁道 (Track) 当盘片旋转时，磁头保持在某个固定位置，就会在盘片上划出一个看不见的同心圆，这个圆形的路径就是磁道。数据就是沿着这些磁道存储的。每个盘面都有数千个磁道。 柱面 (Cylinder) 在一个多盘片的硬盘中，所有盘片上半径相同的磁道共同构成了一个柱面。想象一下，从上到下穿过所有盘片，将所有相同编号的磁道连接起来，就形成了一个空心的圆柱体。当磁头臂不移动时，它可以在同一个柱面上访问所有盘面上的数据，这比移动磁头臂去访问不同磁道要快得多。因此，相关的数据通常会存储在同一个柱面内以提高访问速度。 扇区 (Sector) 为了进一步管理数据，每个磁道被划分为若干个小的弧段，这些弧段被称为扇区。扇区是磁盘上进行数据读写的最小物理单位，传统上每个扇区的大小为512字节。在进行读写操作时，磁盘控制器一次至少会读取或写入一个扇区的数据。 总结一下物理结构的层级关系： 硬盘驱动器 \u0026gt; 盘片 \u0026gt; 磁道 \u0026gt; 扇区\n逻辑结构：操作系统层面 操作系统为了更方便、更高效地管理磁盘空间，引入了逻辑结构的概念。它在物理结构的基础上进行了抽象。\n盘块 (Block) / 块 操作系统与磁盘进行I/O操作时，并不会直接以物理扇区为单位。因为如果每次只读写512字节，对于今天的大文件来说效率太低，会产生大量的I/O请求。因此，操作系统将一个或多个连续的扇区组合在一起，形成一个盘块或块。盘块是操作系统进行文件I/O的基本（逻辑）单位。例如，一个盘块可能由8个扇区组成，那么它的大小就是 4KB (8 * 512B)。当程序请求读取文件时，操作系统会一次性读取至少一个盘块的数据到内存中。\n簇 (Cluster) 簇是文件系统（如FAT32、NTFS）中用于分配磁盘空间的单位。它也是由一个或多个连续的盘块组成的。当你创建一个文件并写入数据时，文件系统会为这个文件分配一个或多个簇。即使一个文件非常小，比如只有1个字节，它也至少会占用一个完整的簇。这就导致了所谓的“空间浪费”，因为簇内未使用的空间无法被其他文件使用。簇的大小会影响磁盘空间的利用率和文件系统的性能。\n大簇：对于存储大文件的磁盘，使用较大的簇可以减少文件碎片，提高读写性能（因为文件占用的簇是连续的），但会增加小文件的空间浪费。 小簇：可以更有效地利用磁盘空间来存储小文件，但对于大文件，可能会导致其被分割成更多的簇，增加寻址开销。 总结与类比\n为了更好地理解这些概念，我们可以用一个“图书馆”来类比：\n硬盘驱动器 就像整个 图书馆大楼。 盘片 就像楼里的 某一层。 磁道 就像这一层书架上的 一排书架。 扇区 就像书架上的 一本书（这是最小的物理单位）。 盘块 (Block) 就像图书馆规定，你借书时不能只借一本，必须借走 一摞书（比如5本）。这是操作系统I/O的最小单位。 簇 (Cluster) 就像图书管理员为了方便管理，把书架划分成很多个 隔间，每个隔间放一摞或多摞书。当你要存放你的资料时，管理员会给你分配一个或多个隔间。这是文件分配的最小单位。 通过这种分层结构，磁盘既能通过物理设计实现高密度存储，又能通过操作系统和文件系统的逻辑抽象，实现对数据高效、便捷的管理和访问。\n磁盘的管理\n磁盘的初始化\n低级格式化（物理格式化）\n分区\n磁盘分区 逻辑格式化（高级格式化） 引导块\n坏块\n磁盘调度算法\n磁盘的存取时间\n寻道时间$T_S$：寻道时间是指将磁头臂（Read/Write Head）从当前所在的磁道移动到目标数据所在的磁道所需要的时间。这个时间除跨越$n$条磁道的时间外，还包括启动磁头臂的时间$s$\n$$ T_s = m\\times n+ s $$其中$m$是与磁盘驱动器速度有关的常熟。\n旋转延迟时间$T_r$。当磁头已经成功定位到目标磁道后，等待盘片旋转，直到目标数据的起始扇区（Sector）转到磁头正下方所需要的时间。设磁盘的旋转速度为$r$\n$$ T_r = \\frac{1}{2r} $$ 传输时间$T_t$。当目标扇区已经到达磁头下方后，实际从盘片上读取数据或向盘片写入数据所花费的时间。这个时间取决于每次所读/写的字节数$b$和磁盘的旋转速度$r$\n$$ T_t = \\frac{b}{rN} $$式中，$r$为磁盘每秒的转数，$N$为一个磁道上的字节数。\n磁盘调度算法\n先来先服务算法：这是最简单的调度算法。它完全按照请求到达队列的先后顺序来处理请求。不考虑磁头当前的位置和请求磁道的远近。 最短寻道时间优先(SSTF)：SSTF算法选择与磁头当前位置最近的那个请求作为下一个服务对象。这是一种贪心算法，其目标是每次都执行寻道成本最小的操作。 扫描算法(SCAN)：SCAN算法模仿了电梯的运行方式。磁头在一个方向上移动，沿途服务所有该方向上的请求，直到到达磁盘的最后一个磁道，然后调转方向，继续服务反向的请求。 循环扫描(C-SCAN)：C-SCAN是SCAN算法的改进版，旨在解决SCAN算法对两端磁道不公平的问题。它规定磁头只在一个方向上扫描并服务请求（例如从0到199）。当到达一端后，它会立即返回到起始端，然后重新开始下一次扫描，返回途中不服务任何请求。 算法名称 优点 (Advantages) 缺点 (Disadvantages) 先来先服务 (FCFS) 绝对公平：所有请求按到达顺序处理，不会有请求被无限期推迟（无饥饿现象）。实现简单：算法逻辑是所有调度算法中最简单的。 效率低下：磁头移动路径完全随机，平均寻道时间很长，导致磁盘整体性能差。`性能不稳定：性能好坏完全取决于请求序列。 最短寻道时间优先 (SSTF) 性能好：平均寻道时间显著短于FCFS，系统吞吐量高。效率高：总是选择代价最小的移动，局部性能最优。 可能产生“饥饿”现象：如果新请求总是在磁头当前位置附近产生，那么远离磁头的请求可能会长时间得不到服务。响应时间不均：对不同位置请求的响应机会不均等。 扫描算法 (SCAN) / 电梯算法 性能较好：是SSTF和FCFS的一种折中，兼顾了性能和公平性。无饥饿问题：磁头会规律地来回移动，确保所有位置的请求最终都能被处理。`` 对两端磁道不公平：位于磁盘中间区域的磁道比两端磁道的服务频率更高，响应更快。等待时间不均：磁头刚经过的位置需要等待近一个来回周期才能再次被服务。 循环扫描 (C-SCAN) 等待时间更均匀：通过单向服务和快速返回，使得所有请求的等待时间更加公平和可预测。解决了SCAN的不公平问题：对所有磁道位置的请求都一视同仁，响应时间方差小。 额外的寻道开销：磁头每次扫描到末端后，都需要一次长距离的“空载”返回（从一端直接跳到另一端），这部分移动不处理任何请求，增加了总的寻道距离。 减少延迟时间的方法\n盘面扇区的交替编号 磁盘盘面的错位命名 提高磁盘IO速度的方法\n采用磁盘高速缓存 调整磁盘请求顺序 提前读 延迟写 优化物理块的分布 虚拟盘 采用磁盘阵列RAID 固态硬盘\n固态硬盘的特性 磨损均衡 动态磨损均衡 静态磨损均衡 ","date":"2025-07-31T20:04:32+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0731/","title":"0731学习日志"},{"content":"月がきれい（月色真美）-東山奈央 前言 把\u0026quot;I love you\u0026quot; 翻译成\u0026quot;月色真美\u0026quot;的是太宰治?还是夏目漱石?\n不管是谁，这首作为动画《月色真美》ed的\u0026lt;月がきれい\u0026gt;，在东山奈央的倾情演绎下，将男女主人公青涩、胆怯又勇敢的恋爱氛围展现得淋漓尽致。这首歌在笔者看来，是一封娓娓道来的情书，是一封写给远方的恋人的情书。曾经在月光下青涩的告白，仲夏夜的游园花火，重叠在字里行间的日常，再到如今即使不得不暂时分离仍不断祈祷\u0026hellip;\u0026hellip;凡此种种，无不令笔者身临其间，在歌声中欢乐、悲伤，最后情绪爆发流下眼泪。\n因此，笔者愿借此机会，介绍这首歌以及学习其中的语法单词，若能因此喜欢这首歌以及背后的故事，笔者也将不胜荣幸。\n以下，笔者将根据自己对这首歌和故事的理解，将歌词分为几个小结，与副歌的进行是一一对应的。\n月静如水 夕暮れ落ちる前に白い月が昇る\n夜幕还未完全降临 洁白的月光便洒落大地\n春風優しく2つの影\n春风温柔地拂过二人的身影\n囁くように包んでいたよ\n静悄悄地围绕在你我身旁\n初めてこんなに誰かを想った\n第一次发现在脑海中 有着一个身影挥之不去\n词汇\n词汇 读音 词性 释义 夕暮れ （0）ゆうぐれ 名词 傍晚，黄昏 落ちる （2）おちる 自动词 落下，降落 白い （2）しろい 形容词 白色的 昇る （0）のぼる 自动词 升起 優しく （0）やさしく 副词 温柔地 優しい （0）やさしい 形容词 温柔的 囁く （3）ささやく 自动词 低声说话 解读\n这一段是歌曲的开场，是对场景的环境描写：春天，夜幕降临，满月，清风吹拂，两人独处。一切都是那么静谧，两颗心正被整个世界温柔的包围，但是仍有悸动。两人相视无言，只是心里一直在想着对方。接下来的副歌阶段就唱出的主角的心声，笔者认为这首歌是女孩的视角。\n告白之夜 いつもどうしていいのかわからなかった\n总是一直不知道该如何是好\n君への想いはこぼれるほどあるのに\n明明对你的思念早已溢满心田\nつないだ右手もぎこちないキスも\n紧紧握住的右手也好 笨拙生疏的接吻也好\nそれだけがこの世界の全てだった\n仅仅只是这些 却已然成为了我世界的一切\n今日も君からもらった言葉を抱きしめている\n今天又一次将你的言语拥入心中\n私にとってそれはまるで月明かり\n因那对于我而言宛若月明之光\n二人で見上げたあの時みたいにきれい\n正如我们那天一起仰望的 那般美丽\n词汇\n词汇 读音 词性 释义 いつも （0）いつも 副词 总是，一直 わからない （3）わからない 动词 不明白 こぼれる （0）こぼれる 自动词 溢出，流露 ほど （0）ほど 名词 程度 ぎこちない （1）ぎこちない 形容词 笨拙的 言葉 （0）ことば 名词 话语，语言 抱きしめる （3）だきしめる 动词 拥抱，怀抱 きれい（綺麗） （2）きれい 形容词 美丽 解读\n这部分是女孩站在现在（分别）的时刻回忆曾经，那天男孩借月色真美之口(月がきれい→月(tsuki)和好き(suki)读音相似)，借势向女孩表白。随后是渐渐接近产生的故事，紧握的手是男孩的占有欲，笨拙的初吻\u0026hellip;\u0026hellip;这一切，都源于那个夜晚，月色真美。\n盛夏祭典 暑い夏の日差し 揺れる風鈴の音\n夏季的烈日 摇动的风铃之音\n深呼吸して見つめた背中は\n深呼吸一口气 望着这后背\n思ったよりもすごく大きくて\n比想象的要更加宽广呢\n词汇\n词汇 读音 词性 释义 暑い （0）あつい 形容词 热的 日差し （0）ひざし 名词 阳光 揺れる （0）ゆれる 自动词 摇动，动摇 背中 （0）せなか 名词 背，背后 すごく （0）すごく 副词 非常 大きい （0）おおきい 形容词 大的 解读\n这一段稍微收回第一次副歌的情绪，接下来是一场令人难忘的夏祭り（夏日祭典）。这里女孩看向男孩背影，夏天的蝉鸣在耳边不停的聒噪，扰动心弦。原作这里，女孩要离开这个镇子，去别的地方上学，所以当自己慢慢落下脚步，看向前方，不免伤怀以后的分别。\n离别花火 どうしてこんなに切なくさせるの？\n而又为什么 心境会变得如此不平静了呢\nあの日二人で歩いた菓子屋横丁\n当时二人一起走过的点心小街\n君の歩幅に合わせてついていったね\n迎合着你的步伐终于跟上你了呢\nいつもの寝ぐせとほどけた靴ひも\n望着像是刚睡醒那样头发翘起着 鞋带也忘记系上的你\nこのまま刻を止めてしまいたかった\n我多么想将这一刻这幅画面定格于心\n夏祭りに二人で見上げた花火は今でも\n夏祭时共同仰望星空中绽放的烟火依旧历历在目\n私にとってかけがえない宝物\n因那对我而言是独一无二的宝物\n二人を見ていたあの月みたいにきれい\n正如我们那天一起仰望的 那般美丽\n词汇\n词汇 读音 词性 释义 切なく （0）せつなく 副词 悲伤地，心痛地 菓子屋 （0）かしや 名词 点心店 横丁 （0）よこちょう 名词 小巷，小街道 歩幅 （0）ほはば 名词 步幅 合わせる （3）あわせる 他动词 配合 寝ぐせ （0）ねぐせ 名词 睡觉时弄乱的头发 止める （3）とめる 他动词 停下 掛け替えない （0）かけがえない 形容词 独一无二的 宝物 （0）たからもの 名词 珍贵的东西，重要的人或物 解读\n其实看歌词就明白了，这是两人参加夏日庆典，观赏烟花的约会。其中每个细节都历历在目，直到打上花火，但想到前方两人的分别，有多么希望这一刻的幸福永远定格。\n剧透：两个人最后结婚了 どんなに遠く 離れていても 君と\n哪怕你我天各一方\nずっといつまででも 一緒にいられますようにと\n我都会一直祈祷着\n祈った\n希望我们可以永远都不分开\n夜空に今日も瞬く星を見つめて\n望着夜空中那颗闪烁着光芒的小星星\nこぼれる涙を一人こらえていたよ\n言葉を持たない月が私なら\n无法言语 如若我化作明月\n君という星見つめつづける\n我将会一直守护着 名为你的最亮的星\n词汇\n词汇 读音 词性 释义 遠く （2）とおく 名词，副词 远方，远远地 離れる （3）はなれる 自动词 分离 ずっと （0）ずっと 副词 一直 いつまで （0）いつまで 副词 到何时 一緒に （0）いっしょに 副词 一起 瞬く （3）またたく 自动词 闪烁 涙 （1）なみだ 名词 眼泪 こらえる （0）こらえる 他动词 忍耐，抑制 見つめる （0）みつめる 他动词 凝视 続ける （3）つづける 他动词 继续 解读\n这里歌词里的情绪已经难以控制，希望无论有多远，这份恋情能够持续下去。 不过这里为了不让读者过于担心，最后的最后两个人考上了同一所大学，在同一个城市生活，结婚，生孩子了。\n月色真美 いつもどうしていいのかわからなかった\n总是一直不知道该如何是好\n君への想いはこぼれるほどあるのに\n明明对你的思念早已溢满心田\nつないだ右手もぎこちないキスも\n紧紧握住的右手也好 笨拙生疏的接吻也好\nそれだけが この世界の全てだった\n仅仅只是这些 却已然成为了我世界的一切的一切\n今日も君からもらった言葉を抱きしめている\n今天又一次将你的言语拥入心中\n私にとってそれはまるで月明かり\n因那对于我而言宛若月明之光\n二人で見上げた あの時みたいに きれい\n正如我们那天一起仰望的 那般美丽\n这一段副歌和第一段的副歌的歌词是一样的，但在情感表达上有所变化。最开始是带着初恋的青涩，这一段除了怀念当时的美好，同时由于分别的现实，这一段相较于最开始多了一份怀念和坚守。毕竟这段故事一切的一切都来自那个夜晚，也是初心所在。\n附：什么是自动词，他动词 根据是否要求宾语，可以将动词分为他动词和自动词两类。\n同一词根、词义关联的自他动词，可以对事情从不同角度分别加以表述。\n自动词从动作的对象出发，侧重于表达变化的结果，或者用于描述状态；他动词从动作的主体出发，侧重表示动作的过程，描述主题对对象视角的影响、产生的作用。\n自他动词的词义特征\n自动词常常用于描述自然现象或自发的事项，一般没有动作执行者。有些情况，虽然存在着动作执行者，但事情的发生并不以其意志为转移，或者执行者不是叙述焦点。 他动词常常涉及动作执行者，虽然在使用时动作执行者未必都出现，但是动作执行者时隐含在动作的词义之中的。 自他动词的语感\n自他动词的语义各有侧重点，这就带来实际使用时选择自动词还是他动词的问题。\n自动词一般不含有动作执行者，或者描述的事项不是以人的意志为转移的，因此自动词常用来描写自然现象，是一种客观的陈述。\n用他动词进行描写时，常常带有动作执行者的意志，因此常用于表述在执行者主观意志下进行的动作。\n","date":"2025-07-31T16:01:32+08:00","image":"https://auroraemiya.github.io/npee_learning_log.github.io/interests/0731/shiawase_hu_fd22b5ed27748803.png","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/interests/0731/","title":"日语学习-月色真美"},{"content":"GCC manual-RTFM 今天心血来潮想要拜读gccman page，学到很多。有时候会思考，AI确实帮助了我快速上手一个领域，比如使用Rust编写一个植物大战僵尸的游戏，比如从零开始认识一个代码，但是一旦结束之后，回头再想就很难说我仍然可以再举一反三地做另一个好玩的事情，事实上Rust的语法和特性我也几乎忘记。\njyy老师在课堂上曾经向我们展示了许多很好玩的代码，很有意思的命令行，也曾经嘱咐我们一定要RTFM(Read The Friendly Manual)，现在的我毕业了，同时仍然是AI的重度依赖者，只是心里一直有一个地方在不断的问自己：AI的回答能否坦然接受？\n我的答案一直是：NO\n我始终在拥抱AI的同时留有一丝怀疑和谨慎。\n这是man page的部分内容，权当记录，明天还要更新更多的笔记。\nNAME gcc - GNU project C and C++ compiler gcc [-c|-S|-E] [-std=standard] [-g] [-pg] [-Olevel] [-Wwarn...] [-Wpedantic] [-Idir...] [-Ldir...] [-Dmacro[=defn]...] [-Umacro] [-foption...] [-mmachine-option...] [-o outfile] [@file] infile... Only the most useful options are listed here; see below for the remainder. g++ accepts mostly the same options as gcc. DESCRIPTION When you invoke GCC, it normally does preprocessing, compilation, assembly and linking. The \u0026#34;overall options\u0026#34; allow you to stop this process at an intermediate stage. For example, the -c option says not to run the linker. Then the output consists of object files output by the assembler. Other options are passed on to one or more stages of processing. Some options control the preprocessor and others the compiler itself. Yet other options control the assembler and linker; most of these are not documented here, since you rarely need to use any of them. Most of the command-line options that you can use with GCC are useful for C programs; when an option is only useful with another language (usually C++), the explanation says so explicitly. If the description for a particular option does not mention a source language, you can use that option with all supported languages. The usual way to run GCC is to run the executable called gcc, or machine-gcc when cross-compiling, or machine-gcc-version to run a specific version of GCC. When you compile C++ programs, you should invoke GCC as g++ instead. The gcc program accepts options and file names as operands. Many options have multi-letter names; therefore multiple single-letter options may not be grouped: -dv is very different from -d -v. You can mix options and other arguments. For the most part, the order you use doesn\u0026#39;t matter. Order does matter when you use several options of the same kind; for example, if you specify -L more than once, the directories are searched in the order specified. Also, the placement of the -l option is significant. Many options have long names starting with -f or with -W---for example, -fmove-loop-invariants, -Wformat and so on. Most of these have both positive and negative forms; the negative form of -ffoo is -fno-foo. This manual documents only one of these two forms, whichever one is not the default. Some options take one or more arguments typically separated either by a space or by the equals sign (=) from the option name. Unless documented otherwise, an argument can be either numeric or a string. Numeric arguments must typically be small unsigned decimal or hexadecimal integers. Hexadecimal arguments must begin with the 0x prefix. Arguments to options that specify a size threshold of some sort may be arbitrarily large decimal or hexadecimal integers followed by a byte size suffix designating a multiple of bytes such as \u0026#34;kB\u0026#34; and \u0026#34;KiB\u0026#34; for kilobyte and kibibyte, respectively, \u0026#34;MB\u0026#34; and \u0026#34;MiB\u0026#34; for megabyte and mebibyte, \u0026#34;GB\u0026#34; and \u0026#34;GiB\u0026#34; for gigabyte and gigibyte, and so on. Such arguments are designated by byte-size in the following text. Refer to the NIST, IEC, and other relevant national and international standards for the full listing and explanation of the binary and decimal byte size prefixes. Option Summary Here is a summary of all the options, grouped by type. Explanations are in the following sections. Overall Options -c -S -E -o file -x language -v -### --help[=class[,...]] --target-help --version -pass-exit-codes -pipe -specs=file -wrapper @file -ffile-prefix-map=old=new -fplugin=file -fplugin-arg-name=arg -fdump-ada-spec[-slim] -fada-spec-parent=unit -fdump-go-spec=file C Language Options -ansi -std=standard -fgnu89-inline -fpermitted-flt-eval-methods=standard -aux-info filename -fallow-parameterless-variadic-functions -fno-asm -fno-builtin -fno-builtin-function -fgimple -fhosted -ffreestanding -fopenacc -fopenacc-dim=geom -fopenmp -fopenmp-simd -fms-extensions -fplan9-extensions -fsso-struct=endianness -fallow-single-precision -fcond-mismatch -flax-vector-conversions -fsigned-bitfields -fsigned-char -funsigned-bitfields -funsigned-char C++ Language Options -fabi-version=n -fno-access-control -faligned-new=n -fargs-in-order=n -fchar8_t -fcheck-new -fconstexpr-depth=n -fconstexpr-loop-limit=n -fconstexpr-ops-limit=n -fno-elide-constructors -fno-enforce-eh-specs -fno-gnu-keywords -fno-implicit-templates -fno-implicit-inline-templates -fno-implement-inlines -fms-extensions -fnew-inheriting-ctors -fnew-ttp-matching -fno-nonansi-builtins -fnothrow-opt -fno-operator-names -fno-optional-diags -fpermissive -fno-pretty-templates -frepo -fno-rtti -fsized-deallocation -ftemplate-backtrace-limit=n -ftemplate-depth=n -fno-threadsafe-statics -fuse-cxa-atexit -fno-weak -nostdinc++ -fvisibility-inlines-hidden -fvisibility-ms-compat -fext-numeric-literals -Wabi=n -Wabi-tag -Wconversion-null -Wctor-dtor-privacy -Wdelete-non-virtual-dtor -Wdeprecated-copy -Wdeprecated-copy-dtor -Wliteral-suffix -Wmultiple-inheritance -Wno-init-list-lifetime -Wnamespaces -Wnarrowing -Wpessimizing-move -Wredundant-move -Wnoexcept -Wnoexcept-type -Wclass-memaccess -Wnon-virtual-dtor -Wreorder -Wregister -Weffc++ -Wstrict-null-sentinel -Wtemplates -Wno-non-template-friend -Wold-style-cast -Woverloaded-virtual -Wno-pmf-conversions -Wno-class-conversion -Wno-terminate -Wsign-promo -Wvirtual-inheritance Preprocessor Options -Aquestion=answer -A-question[=answer] -C -CC -Dmacro[=defn] -dD -dI -dM -dN -dU -fdebug-cpp -fdirectives-only -fdollars-in-identifiers -fexec-charset=charset -fextended-identifiers -finput-charset=charset -fmacro-prefix-map=old=new -fno-canonical-system-headers -fpch-deps -fpch-preprocess -fpreprocessed -ftabstop=width -ftrack-macro-expansion -fwide-exec-charset=charset -fworking-directory -H -imacros file -include file -M -MD -MF -MG -MM -MMD -MP -MQ -MT -no-integrated-cpp -P -pthread -remap -traditional -traditional-cpp -trigraphs -Umacro -undef -Wp,option -Xpreprocessor option Assembler Options -Wa,option -Xassembler option Linker Options object-file-name -fuse-ld=linker -llibrary -nostartfiles -nodefaultlibs -nolibc -nostdlib -e entry --entry=entry -pie -pthread -r -rdynamic -s -static -static-pie -static-libgcc -static-libstdc++ -static-libasan -static-libtsan -static-liblsan -static-libubsan -shared -shared-libgcc -symbolic -T script -Wl,option -Xlinker option -u symbol -z keyword Directory Options -Bprefix -Idir -I- -idirafter dir -imacros file -imultilib dir -iplugindir=dir -iprefix file -iquote dir -isysroot dir -isystem dir -iwithprefix dir -iwithprefixbefore dir -Ldir -no-canonical-prefixes --no-sysroot-suffix -nostdinc -nostdinc++ --sysroot=dir Code Generation Options -fcall-saved-reg -fcall-used-reg -ffixed-reg -fexceptions -fnon-call-exceptions -fdelete-dead-exceptions -funwind-tables -fasynchronous-unwind-tables -fno-gnu-unique -finhibit-size-directive -fno-common -fno-ident -fpcc-struct-return -fpic -fPIC -fpie -fPIE -fno-plt -fno-jump-tables -frecord-gcc-switches -freg-struct-return -fshort-enums -fshort-wchar -fverbose-asm -fpack-struct[=n] -fleading-underscore -ftls-model=model -fstack-reuse=reuse_level -ftrampolines -ftrapv -fwrapv -fvisibility=[default|internal|hidden|protected] -fstrict-volatile-bitfields -fsync-libcalls For any given input file, the file name suffix determines what kind of compilation is done: file.c C source code that must be preprocessed. file.i C source code that should not be preprocessed. file.ii C++ source code that should not be preprocessed. file.m Objective-C source code. Note that you must link with the libobjc library to make an Objective-C program work. file.mi Objective-C source code that should not be preprocessed. file.mm file.M Objective-C++ source code. Note that you must link with the libobjc library to make an Objective-C++ program work. Note that .M refers to a literal capital M. file.mii Objective-C++ source code that should not be preprocessed. file.h C, C++, Objective-C or Objective-C++ header file to be turned into a precompiled header (default), or C, C++ header file to be turned into an Ada spec (via the -fdump-ada-spec switch). file.cc file.cp file.cxx file.cpp file.CPP file.c++ file.C C++ source code that must be preprocessed. Note that in .cxx, the last two letters must both be literally x. Likewise, .C refers to a literal capital C. file.mm file.M Objective-C++ source code that must be preprocessed. file.mii Objective-C++ source code that should not be preprocessed. file.hh file.H file.hp file.hxx file.hpp file.HPP file.h++ file.tcc C++ header file to be turned into a precompiled header or Ada spec. file.f file.for file.ftn Fixed form Fortran source code that should not be preprocessed. file.F file.FOR file.fpp file.FPP file.FTN Fixed form Fortran source code that must be preprocessed (with the traditional preprocessor). file.f90 file.f95 file.f03 file.f08 Free form Fortran source code that should not be preprocessed. file.F90 file.F95 file.F03 file.F08 Free form Fortran source code that must be preprocessed (with the traditional preprocessor). file.go Go source code. file.brig BRIG files (binary representation of HSAIL). file.d D source code. file.di D interface file. file.dd D documentation code (Ddoc). file.ads Ada source code file that contains a library unit declaration (a declaration of a package, subprogram, or generic, or a generic instantiation), or a library unit renaming declaration (a package, generic, or subprogram renaming declaration). Such files are also called specs. file.adb Ada source code file containing a library unit body (a subprogram or package body). Such files are also called bodies. file.s Assembler code. file.S file.sx Assembler code that must be preprocessed. other An object file to be fed straight into linking. Any file name with no recognized suffix is treated this way. You can specify the input language explicitly with the -x option: -x language Specify explicitly the language for the following input files (rather than letting the compiler choose a default based on the file name suffix). This option applies to all following input files until the next -x option. Possible values for language are: c c-header cpp-output c++ c++-header c++-cpp-output objective-c objective-c-header objective-c-cpp-output objective-c++ objective-c++-header objective-c++-cpp-output assembler assembler-with-cpp ada d f77 f77-cpp-input f95 f95-cpp-input go brig -x none Turn off any specification of a language, so that subsequent files are handled according to their file name suffixes (as they are if -x has not been used at all). If you only want some of the stages of compilation, you can use -x (or filename suffixes) to tell gcc where to start, and one of the options -c, -S, or -E to say where gcc is to stop. Note that some combinations (for example, -x cpp-output -E) instruct gcc to do nothing at all. -c Compile or assemble the source files, but do not link. The linking stage simply is not done. The ultimate output is in the form of an object file for each source file. By default, the object file name for a source file is made by replacing the suffix .c, .i, .s, etc., with .o. Unrecognized input files, not requiring compilation or assembly, are ignored. -S Stop after the stage of compilation proper; do not assemble. The output is in the form of an assembler code file for each non-assembler input file specified. By default, the assembler file name for a source file is made by replacing the suffix .c, .i, etc., with .s. Input files that don\u0026#39;t require compilation are ignored. -E Stop after the preprocessing stage; do not run the compiler proper. The output is in the form of preprocessed source code, which is sent to the standard output. Input files that don\u0026#39;t require preprocessing are ignored. -o file Place output in file file. This applies to whatever sort of output is being produced, whether it be an executable file, an object file, an assembler file or preprocessed C code. If -o is not specified, the default is to put an executable file in a.out, the object file for source.suffix in source.o, its assembler file in source.s, a precompiled header file in source.suffix.gch, and all preprocessed C source on standard output. -v Print (on standard error output) the commands executed to run the stages of compilation. Also print the version number of the compiler driver program and of the preprocessor and the compiler proper. -### Like -v except the commands are not executed and arguments are quoted unless they contain only alphanumeric characters or \u0026#34;./-_\u0026#34;. This is useful for shell scripts to capture the driver-generated command lines. --help Print (on the standard output) a description of the command- line options understood by gcc. If the -v option is also specified then --help is also passed on to the various processes invoked by gcc, so that they can display the command-line options they accept. If the -Wextra option has also been specified (prior to the --help option), then command-line options that have no documentation associated with them are also displayed. --target-help Print (on the standard output) a description of target- specific command-line options for each tool. For some targets extra target-specific information may also be printed. --help={class|[^]qualifier}[,...] Print (on the standard output) a description of the command- line options understood by the compiler that fit into all specified classes and qualifiers. These are the supported classes: optimizers Display all of the optimization options supported by the compiler. warnings Display all of the options controlling warning messages produced by the compiler. target Display target-specific options. Unlike the --target-help option however, target-specific options of the linker and assembler are not displayed. This is because those tools do not currently support the extended --help= syntax. params Display the values recognized by the --param option. language Display the options supported for language, where language is the name of one of the languages supported in this version of GCC. common Display the options that are common to all languages. These are the supported qualifiers: undocumented Display only those options that are undocumented. joined Display options taking an argument that appears after an equal sign in the same continuous piece of text, such as: --help=target. separate Display options taking an argument that appears as a separate word following the original option, such as: -o output-file. Thus for example to display all the undocumented target- specific switches supported by the compiler, use: --help=target,undocumented The sense of a qualifier can be inverted by prefixing it with the ^ character, so for example to display all binary warning options (i.e., ones that are either on or off and that do not take an argument) that have a description, use: --help=warnings,^joined,^undocumented The argument to --help= should not consist solely of inverted qualifiers. Combining several classes is possible, although this usually restricts the output so much that there is nothing to display. One case where it does work, however, is when one of the classes is target. For example, to display all the target- specific optimization options, use: --help=target,optimizers The --help= option can be repeated on the command line. Each successive use displays its requested class of options, skipping those that have already been displayed. If --help is also specified anywhere on the command line then this takes precedence over any --help= option. If the -Q option appears on the command line before the --help= option, then the descriptive text displayed by --help= is changed. Instead of describing the displayed options, an indication is given as to whether the option is enabled, disabled or set to a specific value (assuming that the compiler knows this at the point where the --help= option is used). Here is a truncated example from the ARM port of gcc: % gcc -Q -mabi=2 --help=target -c The following options are target specific: -mabi= 2 -mabort-on-noreturn [disabled] -mapcs [disabled] The output is sensitive to the effects of previous command- line options, so for example it is possible to find out which optimizations are enabled at -O2 by using: -Q -O2 --help=optimizers Alternatively you can discover which binary optimizations are enabled by -O3 by using: gcc -c -Q -O3 --help=optimizers \u0026gt; /tmp/O3-opts gcc -c -Q -O2 --help=optimizers \u0026gt; /tmp/O2-opts diff /tmp/O2-opts /tmp/O3-opts | grep enabled --version Display the version number and copyrights of the invoked GCC. -pass-exit-codes Normally the gcc program exits with the code of 1 if any phase of the compiler returns a non-success return code. If you specify -pass-exit-codes, the gcc program instead returns with the numerically highest error produced by any phase returning an error indication. The C, C++, and Fortran front ends return 4 if an internal compiler error is encountered. -pipe Use pipes rather than temporary files for communication between the various stages of compilation. This fails to work on some systems where the assembler is unable to read from a pipe; but the GNU assembler has no trouble. -specs=file Process file after the compiler reads in the standard specs file, in order to override the defaults which the gcc driver program uses when determining what switches to pass to cc1, cc1plus, as, ld, etc. More than one -specs=file can be specified on the command line, and they are processed in order, from left to right. -wrapper Invoke all subcommands under a wrapper program. The name of the wrapper program and its parameters are passed as a comma separated list. gcc -c t.c -wrapper gdb,--args This invokes all subprograms of gcc under gdb --args, thus the invocation of cc1 is gdb --args cc1 .... -ffile-prefix-map=old=new When compiling files residing in directory old, record any references to them in the result of the compilation as if the files resided in directory new instead. Specifying this option is equivalent to specifying all the individual -f*-prefix-map options. This can be used to make reproducible builds that are location independent. See also -fmacro-prefix-map and -fdebug-prefix-map. -fplugin=name.so Load the plugin code in file name.so, assumed to be a shared object to be dlopen\u0026#39;d by the compiler. The base name of the shared object file is used to identify the plugin for the purposes of argument parsing (See -fplugin-arg-name-key=value below). Each plugin should define the callback functions specified in the Plugins API. -fplugin-arg-name-key=value Define an argument called key with a value of value for the plugin called name. -fdump-ada-spec[-slim] For C and C++ source and include files, generate corresponding Ada specs. -fada-spec-parent=unit In conjunction with -fdump-ada-spec[-slim] above, generate Ada specs as child units of parent unit. -fdump-go-spec=file For input files in any language, generate corresponding Go declarations in file. This generates Go \u0026#34;const\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;var\u0026#34;, and \u0026#34;func\u0026#34; declarations which may be a useful way to start writing a Go interface to code written in some other language. @file Read command-line options from file. The options read are inserted in place of the original @file option. If file does not exist, or cannot be read, then the option will be treated literally, and not removed. Options in file are separated by whitespace. A whitespace character may be included in an option by surrounding the entire option in either single or double quotes. Any character (including a backslash) may be included by prefixing the character to be included with a backslash. The file may itself contain additional @file options; any such options will be processed recursively. ","date":"2025-07-30T23:44:55+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0730/","title":"0730学习笔记"},{"content":"操作系统-I/O 文件系统 文件系统（自底向上）\nI/O控制层 基本文件系统 文件组织模块 逻辑文件系统 文件系统布局\n文件系统在磁盘中的结构 主引导记录 引导块 超级块 文件系统中空闲块的信息 文件系统在内存中的结构 内存中的安装表（mount table） 内存中的目录结构的缓存 整个系统的打开文件表 每个进程的打开文件表，包含进程打开文件的文件描述符 虚拟文件系统VFS 超级块对象 索引节点对象 目录项对象 文件对象 文件系统挂载 I/O I/O设备\n信息交换单位分类 块设备 字符设备 传输速率分类 低速设备 中速设备 高速设备 使用特性 存储设备 输入/输出设备 共享属性 独占设备 共享设备 虚拟设备 I/O接口\n设备控制器与CPU的接口 设备控制器与设备的接口 I/O逻辑 类型：\n数据传送方式：并行接口、串行接口 主机访问I/O设备的控制方式：程序查询接口、终端接口、DMA接口 功能选择的灵活性：可编程接口、不可编程接口 端口：\n数据寄存器 状态寄存器 控制寄存器 I/O端口编址方式：\n独立编址 统一编址 I/O控制方式\n程序直接控制方式 中断驱动方式 DMA方式（重要） 通道控制方式 I/O软件层次结构\n用户层软件 设备独立性软件 设备驱动软件 中断处理软件 硬件（非软件层次） 数学-极值点？拐点？ 极值的定义\n单调性与极值的判别\n单调性的判别 判别极值的第一充分条件 判别极值的第二充分条件 判别极值的第三充分条件 凹凸性与拐点的概念\n凹凸性的定义 拐点的定义 凹凸性与拐点的判别\n判别凹凸性 判别拐点的第一充分条件 判别拐点的第二充分条件 判别拐点的第三充分条件 渐近线\n铅直渐近线 水平渐近线 斜渐近线 最值或取值范围\n最值的定义 求区间[a,b]上的连续函数f(x)的最大值和最小值 求区间(a,b )上的连续函数f(x)的最值或取值范围 作函数图像\n一般步骤 确定定义域、奇偶性、周期性等 用导数工具确定函数的单调区间、极值点、凹凸区间、拐点 考查渐近线 作出函数图像 曲率及曲率半径（证明放在下一期笔记中） $$ \\begin{align*} k \u0026= \\dfrac{|y''|}{{[1+{(y')}^2]}^{\\frac{3}{2}}}\\\\ r \u0026= \\frac{1}{k} = \\dfrac{{[1+{(y')}^2]}^{\\frac{3}{2}}}{|y''|},{y}''\\neq0 \\end{align*} $$ 课程编号:第5讲\n","date":"2025-07-30T22:23:38+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0730/","title":"0730学习日志"},{"content":"操作系统-mkdir 文件的物理结构 连续分配 链接分配 隐式链接 显式链接(FAT,file allocation table) 索引分配 单级索引分配 多级索引分配 混合索引分配 磁盘的管理和组织 磁盘结构 surface track gap 磁盘访问时间 文件存储空间管理 空闲表法 空闲链表法 空闲盘块链 空闲盘区链 位示图 成组链表法 磁盘格式化 低级格式化 高级格式化 附：系统调用open(),read(),close()使用代码示例 #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;stdbool.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define MAX_BUFFER_SIZE 128 int do_the_same_thing(char *filename, bool sleep_enabled); int main(int argc, char *argv[]) { bool sleep_enabled = false; // Open a file in read-only mode if (argc \u0026lt; 2) { fprintf(stderr, \u0026#34;Usage: %s \u0026lt;filename\u0026gt; --sleep\\n\u0026#34;, argv[0]); return 1; } if (argc == 3 \u0026amp;\u0026amp; strcmp(argv[2], \u0026#34;--sleep\u0026#34;) == 0) { sleep_enabled = true; } char *filename = argv[1]; pid_t pid = fork(); // Get the current process ID if (pid \u0026lt; 0) { perror(\u0026#34;Failed to fork\u0026#34;); return 1; } else if (pid == 0) { // Child process do_the_same_thing(filename, sleep_enabled); exit(0); } else if (pid \u0026gt; 0) { do_the_same_thing(filename, sleep_enabled); } else { perror(\u0026#34;Failed to fork\u0026#34;); return 1; } return 0; } int do_the_same_thing(char *filename,bool sleep_enabled) { int fd = open(filename, O_RDONLY); // O_RDONLY means read-only if (fd == -1) { perror(\u0026#34;Failed to open file\u0026#34;); return 1; } // ... use fd ... ssize_t bytes_read; while (1) { char buffer[MAX_BUFFER_SIZE]; bytes_read = read(fd, buffer, MAX_BUFFER_SIZE - 1); // Read up to MAX_BUFFER_SIZE - 1 bytes if (bytes_read \u0026lt;= 0) { break; // Exit loop on error or EOF } buffer[bytes_read] = \u0026#39;\\0\u0026#39;; // Null-terminate the string printf(\u0026#34;%s\u0026#34;, buffer); if (sleep_enabled) sleep(1); // Sleep for 1 second to simulate processing time } close(fd); // This function is intentionally left empty. // It serves as a placeholder to demonstrate that the code can be extended. } 课程编号:25-28\n","date":"2025-07-29T23:17:02+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0729/","title":"0729学习日志"},{"content":"数学-微分学习题 错题必刷榜 设函数$f(x)$连续，给出下列条件\n(A) $\\lim\\limits_{x\\to 0}{\\dfrac{|f(x)|-f(0)}{x}}$存在\n(B) $\\lim\\limits_{x\\to 0}{\\dfrac{f(x)-|f(0)|}{x}}$存在\n(C) $\\lim\\limits_{x\\to 0}{\\dfrac{|f(x)|}{x}}$存在\n(D) $\\lim\\limits_{x\\to 0}{\\dfrac{|f(x)|-|f(0)|}{x}}$存在\n其中能得到\u0026quot;$f(x)$在$x=0$处可导\u0026quot;的条件为\n(C)$\\lim\\limits_{x\\to0}\\dfrac{|f(x)|}{x}=0\\Rightarrow\\forall \\epsilon\u0026gt;0,\\left|\\dfrac{|f(x)|}{x}-0\\right|\u0026lt;\\epsilon\\Rightarrow\\lim\\limits_{x\\to0}\\left|\\dfrac{f(x)}{x}\\right|=0\\Rightarrow f\u0026rsquo;(0)=0$\n(A)$f(0)=\\lim\\limits_{x\\to0}{|f(x)|}\\geq0\\Rightarrow$if $f(0)=0$,the same as (C);else if $f(0)\u0026gt;0$，保号性使得$\\exists \\delta\u0026gt;0,f(x)\u0026gt;0,x\\in(-\\delta,\\delta)$\n(B)$f(0)=\\lim\\limits_{x\\to0}{f(x)}=|f(0)|\\geq0\\Rightarrow$if $f(0)=0$,显然成立;else if $f(0)\u0026gt;0$，也显然成立。\n(D)if $f(0)=0$,the same as (C);else 保号性使得两个绝对值内部同号\n故四个全符合。\n一些重要的泰勒展开式 $$ \\begin{align*} \\text{e}^x \u0026= \\sum_{n=0}^{\\infty} \\frac{x^n}{n!} = 1 + x + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\cdots \\\\[1ex] \\sin x \u0026= \\sum_{n=0}^{\\infty} (-1)^n \\frac{x^{2n+1}}{(2n+1)!} = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\cdots \\\\[1ex] \\cos x \u0026= \\sum_{n=0}^{\\infty} (-1)^n \\frac{x^{2n}}{(2n)!} = 1 - \\frac{x^2}{2!} + \\frac{x^4}{4!} - \\frac{x^6}{6!} + \\cdots \\\\[1ex] \\ln(1+x) \u0026= \\sum_{n=1}^{\\infty} (-1)^{n+1} \\frac{x^n}{n} = x - \\frac{x^2}{2} + \\frac{x^3}{3} - \\frac{x^4}{4} + \\cdots \\quad (|x| \u003c 1) \\\\[1ex] \\frac{1}{1 - x} \u0026= \\sum_{n=0}^{\\infty} x^n = 1 + x + x^2 + x^3 + \\cdots \\quad (|x| \u003c 1) \\\\[1ex] \\frac{1}{1 + x} \u0026= \\sum_{n=0}^{\\infty} (-1)^n x^n = 1 - x + x^2 - x^3 + \\cdots \\quad (|x| \u003c 1) \\\\[1ex] \\arctan x \u0026= \\sum_{n=0}^{\\infty} (-1)^n \\frac{x^{2n+1}}{2n+1} = x - \\frac{x^3}{3} + \\frac{x^5}{5} - \\frac{x^7}{7} + \\cdots \\quad (|x| \\leq 1) \\end{align*} $$常用高阶导数 $$ \\begin{align*} \\left(e^{ax+b}\\right)^{(n)}\u0026=a^ne^{ax+b}\\\\ [\\sin{(ax+b)}]^{(n)}\u0026=a^n\\sin{\\left(ax+b+\\dfrac{n\\pi}{2}\\right)}\\\\ [\\cos{(ax+b)}]^{(n)}\u0026=a^n\\cos{\\left(ax+b+\\dfrac{n\\pi}{2}\\right)}\\\\ [\\ln(ax+b)]^{(n)}\u0026=(-1)^{n-1}a^n\\frac{(n-1)!}{(ax+b)^{n}}\\\\ (\\frac{1}{ax+b})^{(n)}\u0026=(-1)^na^n\\frac{n!}{(ax+b)^{n+1}} \\end{align*} $$","date":"2025-07-28T19:40:10+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0728/","title":"0728学习笔记"},{"content":"数学-一元函数微分学 一元函数微分学的概念 导数\n$$ f'(x_0) = \\lim\\limits_{x\\to x_0}\\frac{\\Delta y}{\\Delta x} = \\lim\\limits_{\\Delta x\\to 0}\\frac{f(x_0+\\Delta x)-f(x_0)}{\\Delta x} $$ 导数的几何意义\n$$ \\begin{align*} \\text{切线方程：}y-y_0\u0026=f'(x_0)(x-x_0) \\\\ \\text{法线方程：}y-y_0\u0026=-\\frac{1}{f'(x_0)}(x-x_0),(f'(x_0)\\neq0) \\end{align*} $$ 高阶导数\n$$ f^{(n)}(x_0) = \\lim\\limits_{\\Delta x\\to x_0}\\frac{f^{(n-1)}(x)-f^{(n-1)}(x_0)}{x-x_0} $$ 微分概念\n设函数$y=f(x)$在点$x_0$的某邻域内有定义，且$x_0+\\Delta x$在该邻域内，对于函数增量\n$$ \\Delta y = f(x_0+\\Delta x)- f(x_0) $$若存在与$\\Delta x$无关的常数$A$，使得\n$$ \\Delta y = A\\Delta x + o(\\Delta x) $$则称$f(x)$在$x=x_0$处可微，且$A\\Delta x$为线性主部也叫做$f(x) $在点$x_0$处的微分，记为\n$$ \\left.dy\\right|_{x=x_0}A\\Delta x = f'(x_0)\\mathbf{d}x $$一元函数微分学的计算 基本求导公式\n$$ \\begin{align*} \\left(x^{\\alpha}\\right)' \u0026= \\alpha x^{\\alpha-1}\\\\ \\left(a^x\\right)' \u0026= a^x\\ln{a},(a\u003e0,a\\neq 1)\\\\ \\left(e^x\\right)' \u0026=e^x\\\\ \\left(\\log_ax\\right)' \u0026=\\frac{1}{x\\ln a},(a\u003e0,a\\neq 1)\\\\ \\left(\\ln|x|\\right)' \u0026=\\frac{1}{x}\\\\ \\left(\\sin x \\right)' \u0026=\\cos x \\\\ \\left(\\cos x\\right)' \u0026=-\\sin x \\\\ \\left(\\arcsin x\\right)' \u0026=\\frac{1}{\\sqrt{1-x^2}}\\\\ \\left(\\arccos x\\right)' \u0026=-\\frac{1}{\\sqrt{1-x^2}}\\\\ \\left(\\tan x\\right)' \u0026=\\sec^2 x\\\\ \\left(\\cot x \\right)' \u0026=-\\csc^2 x\\\\ \\left(\\arctan x\\right)' \u0026=\\frac{1}{1+x^2}\\\\ \\left(\\text{arccot} x\\right)' \u0026=-\\frac{1}{1+x^2}\\\\ \\left(\\sec x\\right)' \u0026=\\sec x\\tan x\\\\ \\left(\\csc x\\right)' \u0026=-\\csc x \\cot x\\\\ \\left(\\ln(x+\\sqrt{x^2+1})\\right)' \u0026=\\frac{1}{x^2+1}\\\\ \\left(\\ln(x+\\sqrt{x^2-1})\\right)' \u0026=\\frac{1}{x^2-1}\\\\ \\end{align*} $$ 四则运算\n和差 积 商 复合函数的导数与微分形式的不变性\n$$ \\mathbf{d}f(u)=f'(u)\\mathbf{d}u $$ 分段函数的导数\n在分段点使用导数的定义 在非分段点使用导数公式 反函数的导数\n设$y=f(x)$单调、可导函数，且$f\u0026rsquo;(x)\\neq 0$,则存在反函数$x=\\varphi(y)$，且$\\frac{dx}{dy} = \\frac{1}{\\frac{dy}{dx}}$\n$$ \\varphi'(x) =\\dfrac{1}{ \\dfrac{\\mathbf{d} arc\\varphi(\\varphi(x)) }{\\mathbf{d}\\varphi(x)}} $$ 隐函数求导法\n参数方程所确定的函数的导数\n$$ \\begin{align} \\begin{cases} x\u0026= \\varphi(t)\\\\ y\u0026= \\omega(t)\\\\ \\end{cases}\\\\ \\frac{dy}{dx} = \\dfrac{\\frac{dy}{dt}}{\\frac{dx}{dt}} = \\dfrac{\\omega'(t)}{\\varphi'(t)} \\end{align} $$ 对数求导法 $$ \\begin{align*} \\ln y \u0026= \\ln f(x)\\\\ y' \u0026= \\frac{yf'(x)}{f(x)}\\\\ \\end{align*} $$ 幂指数求导法 $$ u(x)^{v(x)} = e^{v(x)\\ln u(x)} $$ 高阶导数\n归纳法\n莱布尼茨公式 $$ \\begin{align*} (u\\pm v)^{(n)}\u0026= u^{(n)}\\pm v^{(n)}\\\\ (u v)^{(n)}\u0026= \\sum\\limits_{k=0}^{n}C_{n}^{k}u^{(k)}v^{(n-k)} \\end{align*} $$ 泰勒展开式，利用展开唯一性\n课程编号：第三、四讲\n​\n","date":"2025-07-27T18:55:08+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0727/","title":"0727学习日志"},{"content":"Hello World 这是博主在某个深夜对着自己的博客网页捣鼓后，突然做出的决定：当网站有重大版本更新的时候，记录新版本的变化。\n其实这个博客页面已经长期维护了2周，一直没有认真上手去学习hugo和stack的相关配置，主页的样子也是主打一个能用就行。但是这就是我的网站，我认为有必要记录它和我的成长变化，也好在日后回忆中逐渐鲜活这一路走来的历程，现在博主锐意备战今年（2025）的考研，因此这个网站主要还是记录自己的学习进度和笔记。以后\u0026hellip;\u0026hellip;也许会变成一个更丰富的网站（吧？雾！）\n总之，姑且用一句计算机的经典开场白标志着这一切的开始！\nHello World！\n目前网站版本已经进入2.0时代，下面简单说明一下1.0版本\nVersion.1.0 这个版本主要更新了以下特性：\n使用stack默认模板作为主题 使用github 的Action 功能生成博客挂载到github上的个人网站 确定了三种主要的博客文章种类，即日志，日记，笔记 使用Katex作为数学公式的latex生成引擎 简单设计了个人主页的形式 Version.2.0 这个版本完成于07-27凌晨，目的是“让博客更有个人的风格”，因此不免要修改原来的模板，总的来说，这个版本进行了如下的变化\n主页右边的工具栏新增“Safari”(文章关键字检索),\u0026ldquo;Archive\u0026rdquo;(文章按照YY-MM进行分类汇总) 主页页脚添加友链，目前有大学舍友的个人网站 新增栏目：更新日志！ 丰富了主页左侧的目录显示风格 更新了新的个人签名（时不时会因为心情、中二病、心血来潮、喜欢某一句歌词怎么怎么的更新一下），之后也会在例行的更新中添加历史签名。 Git Commit 历史 Commit Hash Author Date Message d8586f Shy 2025-07-27 add a new column :update,upload the first update md and good night! 7d23d05 Shy 2025-07-27 delete the example page of the theme 363db66 Shy 2025-07-27 copy the partials dir into personal layout dir to make the theme customized 0b7f124 Shy 2025-07-27 refresh the outlook of the home page, add searching wiget: SAFARI, archives widget: ARCHIVES sorted by YY-MM and so on ffcc3ad Shy 2025-07-27 Added some supplementary notes to the original 0726 memo content b30977c Shy 2025-07-26 upload 0726 memo with OS and English part f0be782 Shy 2025-07-25 upload 0725 memo with new contents [tips] d2c2623 Shy 2025-07-25 upload 0725 memo 73ee5ce Shy 2025-07-24 upload 0723 log 774320b Shy 2025-07-23 success to adjusting the outlook of the equations cd814b0 Shy 2025-07-23 upload 0722.md but need to adjust the outlook of the equations 7020417 Shy 2025-07-22 upload 0721 memo about stack data structure 326f71e Shy 2025-07-21 upload 0721 log with more details 4f5c09e Shy 2025-07-21 upload 0721 log c96a603 Shy 2025-07-19 update my subtitle with a song of my favorite team YORUSHIKA 6166a2e Shy 2025-07-19 upload 0719 log 43e7c0c Shy 2025-07-18 upload 0718 memo 8c131da Shy 2025-07-17 upload 0717 memo 459dd19 Shy 2025-07-17 upload 0717 log 9c3b26b Shy 2025-07-15 upload 0715 log 3fa4544 Shy 2025-07-14 add the code of courses ad32158 Shy 2025-07-14 upload 0714 memo and make a Katex math environment available d665354 Shy 2025-07-14 upload 0714 log f465180 Shy 2025-07-14 upload the log and memo of 0713 f11a353 Shy 2025-07-13 fix some bugs 77f102e Shy 2025-07-12 upload a new memo about system call 51baa47 Shy 2025-07-12 just display the posts at the first page b2f1bce Shy 2025-07-12 forget to remove the draft tag 8338f47 Shy 2025-07-12 upload 0712 diary and log c11d079 Shy 2025-07-12 renew a theme of stack 4cce612 Shy 2025-07-12 renew a theme with stack 0859e5b Shy 2025-07-11 upload 0711 OS c639077 Shy 2025-07-1 ","date":"2025-07-27T02:31:05+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/update/0727/","title":"0727网站更新日志"},{"content":"操作系统-一些易错知识点 在计算平均访存时间时要注意快表TLB和页表的访问是串行还是并行的，也要注意页表是单级还是多级的 虚拟存储器的最大容量只和计算机的地址结构决定，实际容量和内存和外存有关 工作集不是驻留集的子集，只是数量要小于（不大于）驻留集的大小 一些你需要搞明白的概念：\n链接，包括静态和动态\n链接是将不同编译单元及其依赖库整合到一个统一逻辑地址空间的过程。根据发生时间不同，链接分为：\n静态链接：在编译阶段将所有代码打包进可执行文件中； 动态链接： 加载时链接（Load-Time Linking）：程序加载时操作系统自动加载依赖库； 运行时链接（Run-Time Linking）：程序运行过程中手动加载库，例如通过 dlopen() 等函数调用。 类别 链接时间 控制方式 示例函数 静态链接 编译/链接阶段 编译器自动处理 - 动态链接（加载时） 程序加载阶段 操作系统自动处理 - 动态链接（运行时） 程序运行阶段 程序员手动调用 dlopen, dlsym 等 $\u0026gt;dive into the procedure of linking of a C code program(Gemini 2.5 pro)\nThe Final Step: Unraveling the Linking Process of a C Program The journey from human-readable C code to an executable program culminates in a crucial, often-overlooked stage: linking. This final step in the compilation process is where all the disparate pieces of your program are brought together to create a single, functional executable file. The linker, a key component of the C toolchain, orchestrates this assembly, resolving references between different parts of your code and incorporating necessary library functions.\nThe compilation of a C program is a multi-stage process. First, the preprocessor handles directives like #include and #define. The preprocessed code is then compiled into assembly language, which is subsequently converted into machine-readable object files. These object files, however, are not yet ready to run. They are incomplete pieces of a larger puzzle, and it is the linker\u0026rsquo;s job to put them together.\nThe primary role of the linker is to take one or more object files, along with any necessary libraries, and combine them into a single executable file. A key function of the linker is symbol resolution. When you call a function in one C file that is defined in another, the compiler leaves a placeholder, or a reference, in the object file. The linker\u0026rsquo;s job is to find the actual memory address of that function in the other object file and replace the placeholder with this address. This ensures that when the program runs, the function call correctly jumps to the right location in memory.\nStatic vs. Dynamic Linking: Two Approaches to Integration There are two fundamental ways a linker can incorporate external code into your program: static linking and dynamic linking.\nStatic Linking: In this approach, all the required library code is copied directly into the final executable file. This creates a self-contained program that does not rely on external libraries to be present on the system where it is run.\nAdvantages of Static Linking:\nPortability: The executable can be run on systems that do not have the required libraries installed. Potentially Faster Execution: Since all the code is in one place, it can sometimes lead to faster execution as there is no need to load external libraries at runtime. Disadvantages of Static Linking:\nLarger Executable Size: Because all library code is included, the resulting executable file is larger. Inefficient Memory and Disk Space Usage: If multiple programs on a system use the same statically linked library, each will have its own copy, leading to redundant use of disk space and memory. Difficult to Update: To update a library, every program that uses it must be re-linked. Dynamic Linking: In contrast, dynamic linking does not copy the library code into the executable. Instead, it only includes the names of the shared libraries that the program needs. The actual linking of the library code happens at runtime when the program is loaded into memory.\nAdvantages of Dynamic Linking:\nSmaller Executable Size: The executables are smaller as they only contain references to the shared libraries. Efficient Memory and Disk Space Usage: A single copy of a shared library in memory can be used by multiple programs. Easier Updates: To update a library, you only need to replace the shared library file; all programs that use it will automatically benefit from the update without needing to be re-linked. Disadvantages of Dynamic Linking:\nDependencies: The program will not run if the required shared libraries are not present on the system or if the version is incompatible. Slightly Slower Startup: There can be a minor performance overhead at startup as the dynamic linker needs to find and load the necessary shared libraries. The Linking Process in Action with GCC The GNU Compiler Collection (GCC) is a popular toolchain for compiling and linking C programs. The linking process can be performed as a separate step or combined with compilation.\nTo compile a C source file (.c) into an object file (.o), you can use the -c flag with gcc:\ngcc -c my_program.c This will create an object file named my_program.o. If your program is split across multiple source files, you would compile each one into an object file.\nOnce you have all the necessary object files, you can link them together to create an executable file using the -o flag to specify the output file name:\ngcc -o my_executable my_program.o another_file.o This command tells gcc to link my_program.o and another_file.o and create an executable file named my_executable.\nCommon Linker Errors Errors that occur during the linking phase are known as linker errors. Some of the most common linker errors include:\nUndefined Symbol/Undefined Reference: This is the most frequent linker error. It occurs when the linker cannot find the definition for a function or variable that has been declared and used in the code. This often happens when you forget to link an object file that contains the definition or mistype a function name. Multiple Definitions: This error arises when the linker finds more than one definition for the same function or variable. This can happen if you define a function in a header file that gets included in multiple source files or if you link the same object file multiple times. In conclusion, the linking process is the essential final act in the creation of a C program. By understanding how the linker works, the differences between static and dynamic linking, and how to use tools like gcc to control the linking process, developers can gain a deeper insight into how their code is transformed into a runnable application and more effectively troubleshoot common errors.\n$\u0026gt;are there different categories of dynamic linking technique?(Gemini 2.5 pro)\nYes, there are different categories of dynamic linking techniques, each with its own timing and mechanism for connecting a program to the shared libraries it needs. The main distinctions lie in when the linking happens and who initiates it.\nHere\u0026rsquo;s a breakdown of the primary categories of dynamic linking:\n1. Load-Time Dynamic Linking (Implicit Linking) This is the most common form of dynamic linking. When you compile and link your program against a shared library, the linker embeds references to that library directly into the executable file.\nHow it works:\nAt compile time: The linker records the names of the shared libraries the program depends on and the symbols (functions and variables) it uses from them. At load time: When you run the executable, the operating system\u0026rsquo;s program loader (also known as the dynamic linker or runtime linker) reads this dependency information. It then locates the necessary shared libraries on the system, loads them into the process\u0026rsquo;s address space, and resolves all the symbol references before the program\u0026rsquo;s main function begins to execute. Key Characteristics:\nAutomatic: The entire process is handled automatically by the operating system. Dependencies are required at startup: If any of the required shared libraries are missing or incompatible, the program will fail to start. Slight startup overhead: There is a small performance cost at program launch while the dynamic linker does its work. 2. Run-Time Dynamic Linking (Explicit Linking or Dynamic Loading) This technique gives the programmer more control over the linking process. Instead of the operating system automatically loading libraries at startup, the program itself can explicitly load and unload libraries at any point during its execution.\nHow it works:\nProgrammatic Control: The program uses specific API calls (like dlopen(), dlsym(), and dlclose() on POSIX systems, or LoadLibrary(), GetProcAddress(), and FreeLibrary() on Windows) to manage shared libraries. dlopen() or LoadLibrary(): Loads a specified library into memory. dlsym() or GetProcAddress(): Retrieves the address of a specific function or variable within the loaded library. dlclose() or FreeLibrary(): Unloads the library from memory. Key Characteristics:\nFlexibility: Programs can decide which libraries to load based on runtime conditions. This is the foundation for a \u0026ldquo;plugin\u0026rdquo; architecture, where new functionality can be added to a running application by loading new shared libraries. No startup dependency: The program can start even if the optional libraries are not present. It can then check for their availability and load them if needed. More complex to implement: The programmer is responsible for managing the loading, symbol lookup, and unloading of libraries, which requires more code and error handling. A Special Case: Lazy Linking Lazy linking is an optimization often used with load-time dynamic linking to improve program startup time.\nHow it works:\nInstead of resolving all function addresses when the program is first loaded, the dynamic linker defers the resolution of each function until it is actually called for the first time. The first time a function in a shared library is called, a small piece of code (a \u0026ldquo;trampoline\u0026rdquo; or \u0026ldquo;stub\u0026rdquo;) in the program\u0026rsquo;s Procedure Linkage Table (PLT) transfers control to the dynamic linker. The dynamic linker then looks up the real address of the function, patches the PLT entry to point directly to it, and then calls the function. Subsequent calls to that same function will then go directly to the function\u0026rsquo;s address without involving the dynamic linker, resulting in minimal overhead. Key Characteristics:\nFaster startup: By avoiding the upfront cost of resolving every single function, the program can start executing more quickly. Minimal overhead on first call: There is a small performance penalty the very first time each dynamically linked function is called. Transparent to the developer: This is typically a default behavior of the dynamic linker and doesn\u0026rsquo;t require any special coding by the programmer. In essence, while load-time and run-time dynamic linking are the two main strategies, lazy linking is a common optimization that fine-tunes the performance of load-time linking. The choice between these techniques depends on the specific needs of the application, balancing ease of use, startup performance, and the flexibility to load code on demand.\n卡特兰数，用于计算给定输入栈序列，所有可能的输出排列 $$ \\frac{1}{n+1}\\binom{2n}{n}=\\frac{2n!}{(n+1)!n!} $$ 英语-单词（词根词缀分开） a vail mock gigantic zoom speci fication pa nel pre mise sovereign utter deem mono poly spec ulate con form ","date":"2025-07-26T11:19:57+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0726/","title":"0726学习笔记"},{"content":"操作系统-易错小知识 在多个进程并发执行时，所有进程的页表大多数驻留在内存中，在系统中只设置一个页表寄存器（PTR），它存放页表在内存中的始址和长度 分段方式对低级语言程序员和编译器是可见的，对高级语言程序员是透明的 在这四种动态分区分配算法中，（首次适应，最坏适应，最佳适应，循环首次适应），最佳适应由于其总是会选择和待分配空间“最接近”的空闲区，因此总是会产生难以利用的小的内存块。 [tips]页表项的数量最好刚好填满一整个页 数学-数列极限 一个积分小技巧,似乎跟傅里叶级数有关系，但是我没看出来（插个眼） $$ \\begin{align*} \\int_{0}^{\\frac{\\pi}{2}}{\\sin^{n+1} t \\text{d} t} \u0026= \\left.(-\\sin^nt\\cdot \\cos t)\\right|_{0}^{\\frac{\\pi}{2}} - \\int_{0}^{\\frac{\\pi}{2}}{-\\cos t \\text{d} \\sin^n t}\\\\ \u0026=n\\int_{0}^{\\frac{\\pi}{2}}{\\cos^2 t \\sin^{n-1} \\text{d} t}\\\\ \u0026=n\\int_{0}^{\\frac{\\pi}{2}}{(1-\\sin^2t) \\sin^{n-1} \\text{d} t}\\\\ \\\\ \\int_{0}^{\\frac{\\pi}{2}}{\\sin^{n+1} t \\text{d} t}\u0026=\\frac{n}{n+1}\\int_{0}^{\\frac{\\pi}{2}}{\\sin^{n-1} t \\text{d} t} \\end{align*} $$ 英语-即使是认识的单词也有不认识的词根词缀 ac company mono poly di lute trans action re sent con temporary spec u late in cur im plement pro ce dure ","date":"2025-07-25T20:24:54+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0725/","title":"0725学习笔记"},{"content":"数学-1000题 对于$x_{n+1}=f(x_n)$的数列极限的判定的过程 单调有界 拉格朗日中值定理 放缩 对于行列式的计算的方法 上下三角行列式 反三角行列式 范德蒙德行列式 递推 归纳 英语-不背单词 twist\nultimate\nstrike\ncrucial\nsubordinate\nanguish\nsubtle\nconstitute\nsuffice\neminent\nprudent\ncourtesy\nharsh\nindispensable\n","date":"2025-07-23T23:53:15+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0723/","title":"0723学习日志"},{"content":"操作系统- (LA-PA-CA) 带快表的两级系统的地址翻译过程 从逻辑地址映射到物理地址（虚拟存储器） 从物理地址映射到Cache地址（主存-Cache系统） 文件和文件系统 构成文件的基本单位 文件的定义 文件属性 文件的基本操作 文件的打开和关闭的操作 文件的逻辑结构 目录管理 目录的概念 文件控制块和索引节点 目录结构 英语-VocabularyBuilder CRIM,comes from the Latin words for \u0026ldquo;fault or crime\u0026rdquo; or \u0026ldquo;accusation.\u0026rdquo; criminology decriminalize incriminate recrimination PROB,comes from the Latin words for \u0026ldquo;prove or proof \u0026ldquo;and \u0026ldquo;honesy or integrity.\u0026rdquo; approbation probate probity reprobate GRAV, comes from the Latin word meaning \u0026ldquo;heavy ,weighty ,serious\u0026rdquo; grave gravitas gravitate aggravate LEV,comes from the Latin adjective $levis$,meaning \u0026ldquo;light\u0026rdquo;,and the verb $levare$,meaning \u0026ldquo;to raise or lighten.\u0026rdquo; alleviate elevation contilever levity 数学-行列式 行列式的本质定义\n行列式的性质\n$|A|=|A^T|$ 若行列式中某行(列)元素全为零，则行列式为零\n若行列式中某行(列) 元素有公因子$k\\neq0$，则$k$可提到行列式外面\n行列式中某行(列)元素均是两个数之和，则可拆成两个行列式之和\n行列式中两行(列)互换，行列式变号\n行列式中的两行(列)元素相等或对应成比例，则行列式为零\n行列式的逆序法定义 $$ \\begin{vmatrix} a_{11} \u0026 a_{12} \u0026 \\cdots\u0026a_{1n}\\\\ a_{21} \u0026 a_{22} \u0026 \\cdots\u0026a_{2n}\\\\ \\vdots \u0026 \\vdots \u0026 \u0026\\vdots\\\\ a_{n1} \u0026 a_{n2} \u0026 \\cdots\u0026a_{nn}\\\\ \\end{vmatrix}=\\sum\\limits_{j_1j_2\\cdots j_n}{(-1)^{\\tau(j_1j_2\\cdots j_n)}}a_{j_1}a_{j_2}\\cdots a_{j_n} $$ 行列式的展开定理 $$ |A| = \\sum\\limits_{j=1}^na_{ij}A_{ij} $$ 几个重要的行列式\n主对角线行列式(上(下)三角形行列式) $$ \\begin{vmatrix} a_{11} \u0026 a_{12} \u0026 \\cdots\u0026a_{1n}\\\\ 0 \u0026 a_{22} \u0026 \\cdots\u0026a_{2n}\\\\ \\vdots \u0026 \\vdots \u0026 \u0026\\vdots\\\\ 0 \u0026 0 \u0026 \\cdots\u0026a_{nn}\\\\ \\end{vmatrix}=\\begin{vmatrix} a_{11} \u0026 0 \u0026 \\cdots\u00260\\\\ a_{21} \u0026 a_{22} \u0026 \\cdots\u00260\\\\ \\vdots \u0026 \\vdots \u0026 \u0026\\vdots\\\\ a_{n1} \u0026 a_{n2} \u0026 \\cdots\u0026a_{nn}\\\\ \\end{vmatrix}=\\begin{vmatrix} a_{11} \u0026 0 \u0026 \\cdots\u00260\\\\ 0 \u0026 a_{22} \u0026 \\cdots\u00260\\\\ \\vdots \u0026 \\vdots \u0026 \u0026\\vdots\\\\ 0 \u0026 0 \u0026 \\cdots\u0026a_{nn}\\\\ \\end{vmatrix}=\\prod\\limits_{i=1}^n a_{ii} $$ 副对角线行列式 $$ \\begin{vmatrix} a_{11} \u0026 \\cdots \u0026 a_{1,n-1}\u0026a_{1n}\\\\ a_{21} \u0026 \\cdots \u0026 a_{2,n-1}\u00260\\\\ \\vdots \u0026 \u0026\\vdots \u0026\\vdots\\\\ a_{n1} \u0026\\cdots\u00260 \u00260\\\\ \\end{vmatrix}=\\begin{vmatrix} 0 \u0026 \\cdots \u0026 0\u0026a_{1n}\\\\ 0 \u0026\\cdots \u0026 a_{2,n-1}\u0026a_{2n}\\\\ \\vdots \u0026 \u0026 \\vdots \u0026\\vdots\\\\ a_{n1} \u0026\\cdots \u0026 a_{n,n-1}\u0026a_{nn}\\\\ \\end{vmatrix}=\\begin{vmatrix} 0 \u0026 \\cdots \u0026 0\u0026a_{1n}\\\\ 0 \u0026 \\cdots \u0026 a_{2,n-1}\u00260\\\\ \\vdots \u0026 \u0026 \\vdots\u0026\\vdots\\\\ a_{n1} \u0026 \\cdots \u0026 0\u00260\\\\ \\end{vmatrix}=(-1)^{\\frac{n(n-1)}{2}}\\prod\\limits_{i=1}^n a_{i(n+1-i)} $$ 拉普拉斯展开式($A\\in R^{m\\times m},B\\in R^{n\\times n}$) $$ \\begin{vmatrix} A\u0026O\\\\ O\u0026B \\end{vmatrix}=\\begin{vmatrix} A\u0026C\\\\ O\u0026B \\end{vmatrix}=\\begin{vmatrix} A\u0026O\\\\ C\u0026B \\end{vmatrix}=|A||B| $$$$ \\begin{vmatrix} O\u0026A\\\\ B\u0026O \\end{vmatrix}=\\begin{vmatrix} C\u0026A\\\\ B\u0026O \\end{vmatrix}=\\begin{vmatrix} O\u0026A\\\\ B\u0026C \\end{vmatrix}=(-1)^{mn}|A||B| $$ 范德蒙德行列式,$(1\\leq i \u0026lt;j\\leq n)$ $$ \\begin{vmatrix} 1\u00261\u0026\\cdots\u00261\\\\ x_1\u0026x_2\u0026\\cdots\u0026x_n\\\\ x_1^2\u0026x_2^2\u0026\\cdots\u0026x_n^2\\\\ \\vdots\u0026\\vdots\u0026\u0026\\vdots\\\\ x_1^n\u0026x_2^n\u0026\\cdots\u0026x_n^n \\end{vmatrix}=\\prod\\limits_{i,j}{(x_i-x_j)} $$ ","date":"2025-07-22T23:31:50+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0722/","title":"0722学习日志"},{"content":"数据结构-代码(待完善) 栈的定义\nstack.h #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdbool.h\u0026gt; #define STATIC_STACK #define DYNAMIC_STACK #define DATATYPE void * #ifdef STATIC_STACK #define STACK_H 100 typedef struct StaticStack { DATATYPE stack[STACK_H]; int max_depth; int top; } StaticStack; bool initialize_static_stack(StaticStack * s); bool static_stack_push(StaticStack *s, DATATYPE value); bool static_stack_pop(StaticStack *s, DATATYPE *value); bool static_stack_top(StaticStack *s, DATATYPE *value); #endif #ifdef DYNAMIC_STACK typedef struct DynamicStack { DATATYPE data; DynamicStack *next; } DynamicStack; //returns a top-pointer to a new dynamic stack DynamicStack *initialize_dynamic_stack(); bool dynamic_stack_push(DynamicStack *top, DATATYPE value); bool dynamic_stack_pop(DynamicStack *top, DATATYPE *value); bool dynamic_stack_top(DynamicStack *top, DATATYPE *value); #endif stack.c #include \u0026#34;stack.h\u0026#34; #ifdef STATIC_STACK bool initialize_static_stack(StaticStack * s) { s-\u0026gt;top = -1; s-\u0026gt;max_depth = STACK_H; // Initialize depth to 0 return true; } bool static_stack_push(StaticStack *s, DATATYPE value) { if (s-\u0026gt;top \u0026gt;= s-\u0026gt;max_depth - 1) { printf(\u0026#34;Static stack overflow\\n\u0026#34;); return false; // Stack is full } s-\u0026gt;stack[++(s-\u0026gt;top)] = value; return true; } bool static_stack_pop(StaticStack *s, DATATYPE *value) { if (s-\u0026gt;top \u0026lt; 0) { printf(\u0026#34;Static stack underflow\\n\u0026#34;); return false; // Stack is empty } *value = s-\u0026gt;stack[(s-\u0026gt;top)--]; return true; } bool static_stack_top(StaticStack *s, DATATYPE *value) { if (s-\u0026gt;top \u0026lt; 0) { printf(\u0026#34;Static stack is empty\\n\u0026#34;); return false; // Stack is empty } *value = s-\u0026gt;stack[s-\u0026gt;top]; // Get the top value return true; // Successfully retrieved the top value } #endif #ifdef DYNAMIC_STACK DynamicStack *initialize_dynamic_stack() { DynamicStack *new_stack = (DynamicStack *)malloc(sizeof(DynamicStack)); if(new_stack == NULL) { return NULL; // Memory allocation failed }else { new_stack-\u0026gt;next = NULL; return new_stack; } } bool dynamic_stack_push(DynamicStack *top, DATATYPE value) { DynamicStack *new_item = (DynamicStack *)malloc(sizeof(DynamicStack)); if(!new_item) { printf(\u0026#34;Failed to push %d onto dynamic stack\\n\u0026#34;, value); return false; // Memory allocation failed } new_item-\u0026gt;data = value; new_item-\u0026gt;next = top-\u0026gt;next; top-\u0026gt;next = new_item; return true; } bool dynamic_stack_pop(DynamicStack *top, DATATYPE *value) { if(top-\u0026gt;next == NULL) { printf(\u0026#34;Dynamic stack is empty\\n\u0026#34;); return false; // Stack is empty } DynamicStack *temp = top-\u0026gt;next; *value = temp-\u0026gt;data; top-\u0026gt;next = temp-\u0026gt;next; free(temp); return true; } bool dynamic_stack_top(DynamicStack *top, DATATYPE *value) { if(top-\u0026gt;next == NULL) { printf(\u0026#34;Dynamic stack is empty\\n\u0026#34;); return false; // Stack is empty } *value = top-\u0026gt;next-\u0026gt;data; // Get the data from the top item return true; // Successfully retrieved the top value } #endif ","date":"2025-07-21T22:59:30+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0721/","title":"0721学习笔记"},{"content":"英语-vocabulary builder 使用 The Merriam-Webster Vocabulary Builder作为词根法扩充词汇量的工具书(由网友canon提供)\nBENE , latin for well benediction benefactor benefaciary benevolence AM, comes form the latin admare amicable enamored amorous paramour BELL,comes from the latin word meaning war.Bellona was the little-known goddess of war . antebellum belligerence bellicose rebellion PAC,is related to the Latin words for \u0026ldquo;agree\u0026rdquo; and \u0026ldquo;peace\u0026rdquo; pacify pacifist pact pace 操作系统-page \u0026amp; segment 基本分页内存\npage\npage frame page table 页号 页内偏移量 虚拟地址 = 页号 + 页内偏移\nLRU（最近最少使用）\nFIFO（先进先出）\nCLOCK（近似LRU）\nTLB（Translation Lookaside Buffer）\n两级以及多级页表\n基本分段内存管理\n基本原理\n基本结构\n段号 段内地址 段表\n地址变换机制\n虚拟存储器\n页表机制 缺页中断机制 地址变换机制 课程编号：019-021\n数据结构-二叉树 线索二叉树\n定义 构造 遍历 树、森林与二叉树\n相互转换 遍历 哈夫曼树\nWPL 构造 哈夫曼编码 哈夫曼树的特点 并查集\n定义 操作 实现 课程编号：033-037\n","date":"2025-07-21T17:53:02+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0721/","title":"0721学习日志"},{"content":"数学-是不动点的味道 数列的极限 概念 数列极限的定义 数列收敛的性质 唯一性 有界性 保号性 海涅定理（归结原则） 夹逼准则 单调有界准则 ${x_n}$收敛于$a$的速度问题 数据结构-前序中序后序blablabla 树的性质 let $T_m$ denote a tree with degree $m$.\nlet $D(n)$ denote the out degree of the node $x$ in the tree $T_m$.\nlet $n_i$ denote the number of notes with degree $i$.\nlet $H$ denote the depth/height of the tree $T_m$.\nlet $N$ denote the total number of nodes in tree.$N=\\sum\\limits_{i=0}^mn_i$.\nlet $N_i$ denote the number of nodes at layer $i\\in \\mathcal{N^*}$\n$N=1 + \\sum\\limits_{i=1}^mi\\cdot n_i$. $n_0 =1 + \\sum\\limits_{i=2}^m(i-1)\\cdot n_i$ $N_i\\leq m^{i-1}$ if not an empty tree with degree m. $N\\leq \\frac{m^H-1}{m-1}$ $H\\geq \\lceil\\log_{m}\\left((N(m-1))+1\\right)\\rceil$ 二叉树 二叉树的性质 $N_i\\leq 2^{i-1}$ if not an empty tree. $N\\leq 2^H-1$ $n_0 =1 + n_2$ $H\\geq \\lceil\\log_{2}(N+1)\\rceil$ 完全二叉树 满二叉树 二叉树的构造 前序加中序 后序加中序 层次加中序 前序加树形结构 中序加树形结构 后序加树形结构 层次加树形结构 二叉树的遍历 前序 中序 后序 层次 操作系统-nice of linux Multi-Level Feedback Queue (cpu-sched-mlfq) Basic Rules Rule 1:If Priority(A) $\u0026gt;$ Priority(B), A runs (B doesn’t). Rule 2:If Priority(A) $=$ Priority(B), A \u0026amp; B run in RR(Round Robin). However: Those with low Priority will get starved! Therefore: We need to change the Priority over time. To change Priority Rule 3: When a job enters the system, it is placed at the highest priority (the topmost queue). Rule 4a: If a job uses up its allotment while running, its priority is reduced (i.e., it moves down one queue). Rule 4b: If a job gives up the CPU (for example, by performing an I/O operation) before the allotment is up, it stays at the same priority level (i.e., its allotment is reset). However: Those with long cpu-time will get starved as them move down to the lowest! Those with smart heart will game the scheduler as they I/O at the last ms of the allotment. Therefore: We need to change rule4a,b and boost periodically. The Priority Boost Rule 5: After some time period S, move all the jobs in the system to the topmost queue. Better Accounting Rule 4: Once a job uses up its time allotment at a given level (re gardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue). Proportional share(cpu-sched-lottery) Basic Concept: Tickets Represent Your Share Stride Scheduling The Linux Completely Fair Scheduler (CFS) ","date":"2025-07-19T22:41:19+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0719/","title":"0719学习日志"},{"content":"数学 若$\\lim\\limits_{x\\to0}f(x) = A\\neq0,\\lim\\limits_{x\\to0}h(x)=0$,且在$x\\to 0$时，$h(x)\\neq 0$,则 $$ \\int^{h(x)}_0f(t)dt\\sim Ah(x),(x\\to0) $$ 当$x\\to 0$时，$f(x) \\sim ax^m,g(x)\\sim bx^n,ab\\neq0,m,n\\in N^*$,则 $$ \\int^{g(x)}_0f(t)dt\\sim \\int^{bx^n}_0at^mdt,(x\\to0) $$ 以$\\frac{x}{\\cos x} $为例计算分式的泰勒展开： $$ \\cos x = 1 - \\frac{1}{2!}x^2 + \\frac{1}{4!}x^4 + ... $$ 随着对分子和分母进行多项式除法，取需要的项即可\n时不时看看这道题： $$ \\lim\\limits_{x\\to0}\\frac{\\int_{0}^{x}{[e^{{(t-x)}^2}-1]\\sin t}\\text{d} t}{x ^2(e^{x^2}-1)} $$ ","date":"2025-07-18T19:23:00+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0718/","title":"0718学习笔记"},{"content":"关于数学，cool stuff 首先，泰勒吧\n设$f(x)$在点$x=0$处$n$阶可导，则存在$x=0$的一个领域，对于该领域内的任一点$x$，有\n$$ f(x) = f(0) + f{'}(0)x + \\frac{f^{''}(0)}{2!}x^2 + \\frac{f^{'''}(0)}{3!}x^3 + ...+ \\frac{f^{(n)}(0)}{n!}x^n + o(x^n) $$ 其次，记住吧\n一些食品级的等价无穷小\n$x-\\sin{x}\\sim\\frac{1}{6}x^3,(x\\to 0)$ $\\text{arcsin}x-x\\sim\\frac{1}{6}x^3,(x\\to 0)$ $x-\\text{arctan}x\\sim\\frac{1}{3}x^3,(x\\to 0)$ $\\tan{x}-x\\sim\\frac{1}{3}x^3,(x\\to 0)$ 一些重要的泰勒展开\n$\\sin x = x - \\frac{1}{3!}x^3 + o(x^3)$ $\\text{arcsin} x = x + \\frac{1}{3!}x^3 + o(x^3)$ $\\cos x = 1 - \\frac{1}{2!}x^2 + \\frac{1}{4!}x^4 + o(x^4)$ $\\tan x = x + \\frac{1}{3}x^3 + o(x^3)$ $\\text{arctan} x = x - \\frac{1}{3}x^3 + o(x^3)$ $\\ln (x+1) = x - \\frac{1}{2}x^2 + \\frac{1}{3}x^3 + o(x^3)$ $e^x =1 + x + \\frac{1}{2!}x^2 + \\frac{1}{3!}x^3 + o(x^3)$ ${(1+a)}^{\\alpha} = 1 + \\alpha x - \\frac{\\alpha(\\alpha-1)}{2!}x^2 +o(x^2)$ 易错栏目-时不时更新一些易错的知识点 临界区和临界资源，以及进程处于临界区是否可以进行调度 $\\lim\\limits_{x\\to\\infty}e^x$,$\\lim\\limits_{x\\to-\\infty}e^x$,$\\lim\\limits_{x\\to+\\infty}e^x$ 系统调用的过程，谁保存了什么上下文信息（操作系统，硬件）。 安全状态，不安全状态，死锁发生的时间的关系 ","date":"2025-07-17T23:07:05+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0717/","title":"0717学习笔记"},{"content":"数学-纸上得来终觉浅 函数极限的定义($\\epsilon,\\delta$语言)\n函数极限的性质\n唯一性 局部有界性 局部保号性 无穷小(let $\\alpha$ be infinitesimal)\n性质 $\\sum\\limits_{k}^{N}{\\alpha_k}=\\alpha,(N \\text{ is finite})$ $\\alpha\u0026rsquo;\\cdot f(x)=\\alpha $,where $f(x)$ is limited at the interval $\\prod\\limits_{k}^{N}{\\alpha_k}=\\alpha,(N \\text{ is finite})$ 比阶($\\lim\\alpha(x)=0$,$\\lim\\beta(x)=0$,$\\beta(x)\\neq0$) $\\alpha(x)$是$\\beta(x)$的高阶无穷小$\\Leftrightarrow\\lim{\\frac{\\alpha(x)}{\\beta(x)}}=0$ $\\alpha(x)$是$\\beta(x)$的低阶无穷小$\\Leftrightarrow\\lim{\\frac{\\alpha(x)}{\\beta(x)}}=\\infty$ $\\alpha(x)$是$\\beta(x)$的同阶无穷小$\\Leftrightarrow\\lim{\\frac{\\alpha(x)}{\\beta(x)}}=c,(\\text{constant }c\\neq 0)$ $\\alpha(x)$是$\\beta(x)$的等价无穷小$\\Leftrightarrow\\lim{\\frac{\\alpha(x)}{\\beta(x)}}=1$ $\\alpha(x)$是$\\beta(x)$的$k$阶无穷小$\\Leftrightarrow\\lim{\\frac{\\alpha(x)}{\\beta^k(x)}}=0$ 极限的运算\n四则运算 洛必达法则 泰勒展开 夹逼准则 七种未定式：$\\frac{0}{0},\\frac{\\infty}{\\infty},0\\cdot\\infty,\\infty-\\infty,\\infty^0,0^0,1^{\\infty}$ 函数的连续和两类间断点\n超实数(hyperreal number)\n操作系统-three easy piece cpu-intro the Process Process API create Destory Wait Miscellaneous Control Status Process status Proc data structure:(PCB) cpu-api fork() wait() exec() spawn()* cpu-mechanisms from Directed Execution to Limited Directed Execution: user mode and kernel mode system call switch between Processes,Os need to retain CPU from process A Cooperative Approach: Wait For System Calls A Non-Cooperative Approach: The OS Takes Control reboot (x timer interrupt Saving and Restoring Context cpu-sched(reading) cpu-sched-mlfq(reading) 数据结构-排好队一个一个FIFO 队列 顺序队列的性质和操作 循环队列的性质和操作 链式队列的性质和操作 双端队列 课程编号018-027\n","date":"2025-07-17T22:04:43+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0717/","title":"0717学习日志"},{"content":"操作系统-jyy的map永远的噩梦 死锁 死锁的必要条件 互斥条件 请求和保持条件 不可剥夺条件 循环等待条件 预防死锁的方法 破坏互斥：非但不能破坏还要保护 破坏不可剥夺条件 破坏请求和保持条件 破坏循环等待条件 死锁避免 安全状态 银行家算法 死锁检测和解除 资源分配图 死锁定理 死锁的解除 剥夺资源 撤销进程 内存管理 基本概念 逻辑地址 物理地址 外部碎片 内部碎片 内存连续分配管理方式 单一连续分配 固定分区分配 动态分区分配 首次适应FF 循环首次适应NF 最佳适应BF 最坏适应WF 课程编号016-018\n数学-什么？！超实数？ 函数极限的概念与性质 超实数 课程编号第一讲\n","date":"2025-07-15T21:43:17+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0715/","title":"0715学习日志"},{"content":"朝花夕拾 先回答一下昨天的疑问：\n什么是用户级线程和内核级线程？\n以下是chatgpt编写的ULT和KLT的示例c代码\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;ucontext.h\u0026gt; #define STACK_SIZE 1024*64 ucontext_t ctx_main, ctx_thread1, ctx_thread2; void thread_func1() { for (int i = 0; i \u0026lt; 5; i++) { printf(\u0026#34;Thread 1: %d\\n\u0026#34;, i); swapcontext(\u0026amp;ctx_thread1, \u0026amp;ctx_thread2); // 切换到线程2 } printf(\u0026#34;Thread 1 finished\\n\u0026#34;); setcontext(\u0026amp;ctx_main); // 结束返回主程序 } void thread_func2() { for (int i = 0; i \u0026lt; 5; i++) { printf(\u0026#34;Thread 2: %d\\n\u0026#34;, i); swapcontext(\u0026amp;ctx_thread2, \u0026amp;ctx_thread1); // 切换到线程1 } printf(\u0026#34;Thread 2 finished\\n\u0026#34;); setcontext(\u0026amp;ctx_main); } int main() { char stack1[STACK_SIZE]; char stack2[STACK_SIZE]; // 初始化线程1上下文 getcontext(\u0026amp;ctx_thread1); ctx_thread1.uc_stack.ss_sp = stack1; ctx_thread1.uc_stack.ss_size = sizeof(stack1); ctx_thread1.uc_link = \u0026amp;ctx_main; // 线程结束返回主上下文 makecontext(\u0026amp;ctx_thread1, thread_func1, 0); // 初始化线程2上下文 getcontext(\u0026amp;ctx_thread2); ctx_thread2.uc_stack.ss_sp = stack2; ctx_thread2.uc_stack.ss_size = sizeof(stack2); ctx_thread2.uc_link = \u0026amp;ctx_main; makecontext(\u0026amp;ctx_thread2, thread_func2, 0); // 从主线程切换到线程1开始执行 swapcontext(\u0026amp;ctx_main, \u0026amp;ctx_thread1); printf(\u0026#34;Main finished\\n\u0026#34;); return 0; } #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; void* func1(void* arg) { for (int i = 0; i \u0026lt; 5; i++) { printf(\u0026#34;pthread func1: %d\\n\u0026#34;, i); sleep(1); // 模拟阻塞 } return NULL; } void* func2(void* arg) { for (int i = 0; i \u0026lt; 5; i++) { printf(\u0026#34;pthread func2: %d\\n\u0026#34;, i); sleep(1); } return NULL; } int main() { pthread_t t1, t2; pthread_create(\u0026amp;t1, NULL, func1, NULL); pthread_create(\u0026amp;t2, NULL, func2, NULL); pthread_join(t1, NULL); pthread_join(t2, NULL); printf(\u0026#34;All pthreads finished\\n\u0026#34;); return 0; 可以看出，实际上ULT是在模拟KLT的实现思想，其调度和上下文切换都是用户程序自己显式实现的，但对于系统来说这仅仅是一个进程而已。那看来多对多的模型就是先申请多个内核，再在每个内核内使用ULT编程。\nPCB都包含什么？\n类别 信息 进程标识信息 PID（进程ID）、PPID（父进程ID）、UID（用户ID）、GID（组ID） 进程状态 就绪、运行、等待、终止等 寄存器现场 程序计数器（PC）、栈指针（SP）、通用寄存器等 内存管理信息 代码段、数据段、堆、栈、页表指针 调度信息 优先级、时间片、调度队列信息、调度策略（如 SCHED_NORMAL） 文件系统信息 文件描述符表、当前工作目录、打开文件列表 会计信息 CPU时间、用户时间、系统时间、起始时间 信号处理信息 信号屏蔽字、信号处理函数 其他资源信息 IPC 资源（消息队列、共享内存）、网络信息等 等配一个linux docker 用命令行敲一下。\n访管中断和自陷指令有和关系？\n自陷指令 访管中断 CPU 支持的汇编指令，用于产生陷入 操作系统级的概念，指的是进程通过自陷调用系统服务 比如：int 0x80（x86）、svc（ARM）、ecall（RISC-V） 访管中断就是自陷指令触发的中断，用来“访问管态（内核态）”服务 本质是硬件机制 本质是软件设计 “访管中断”是\n“用自陷指令引发的，主动请求操作系统服务的中断”。\n数学 三角函数大家族 一些恒等式 $$ \\sin^2{\\theta} + \\cos^2{\\theta} = 1 $$ $$ 1 + \\tan^2{\\theta} = \\sec^2{\\theta} $$ $$ 1 + \\cot^2{\\theta} = \\csc^2{\\theta} $$ $$ \\sin(\\arcsin{x}) = x(x\\in[-1,1]) $$ $$ \\sin(\\arccos{x}) = \\sqrt{1-x^2}(x\\in[-1,1]) $$ $$ \\cos(\\arccos{x}) = x(x\\in[-1,1]) $$ $$ \\cos(\\arcsin{x}) = \\sqrt{1-x^2}(x\\in[-1,1]) $$双曲正弦/余弦函数 双曲正弦函数 $$ \\sinh{x} = \\frac{e^x-e^{-x}}{2} $$ 反双曲正弦函数 $$ \\text{arcsinh}\\ {x} = \\ln(x+\\sqrt{1+x^2}) $$ $$ \\text{arcsinh}'\\ {x} = \\frac{1}{\\sqrt{1+x^2}} $$ 双曲余弦函数 $$ \\cosh{x} = \\frac{e^x+e^{-x}}{2} $$ 反双曲余弦函数 $$ \\text{arccosh}\\ {x} = \\ln(x+\\sqrt{x^2-1}),\\ x\\geq 1\\\\ $$$$ \\text{arccosh}'\\ {x} = \\frac{1}{\\sqrt{x^2-1}},\\ x\u003e1 $$双曲正切函数 $$ \\tanh{x} = \\frac{\\sinh{x}}{\\cosh{x}}=\\frac{e^x-e^{-x}}{e^x+e^{-x}} $$ 反双曲正切函数 $$ \\text{arctanh}\\ {x} = \\frac{1}{2}\\ln(\\frac{1+x}{1-x}),\\ x\\in(-1,1) $$$$ \\text{arctanh}'\\ {x} = \\frac{1}{1-x^2} $$","date":"2025-07-14T21:15:16+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0714/","title":"0714学习笔记"},{"content":"操作系统-这什么查一下这什么查一下 经典同步问题 生产者消费者问题 哲学家进餐问题 读者-写者问题 理发师问题 抽烟者问题 处理机调度 处理及调度的层次\n高级调度（作业调度、长程调度）\n作业选择\n从**后备队列（外存中等待的作业）**中选择作业 判断系统资源（内存、CPU、I/O）是否充足 资源分配\n为选中的作业分配内存、I/O、文件等资源 进程创建\n将作业转化为一个或多个进程，放入就绪队列 中级调度（内存调度、中程调度）\n选择部分进程挂起（移出内存到外存） 选择挂起的进程恢复（从外存调回内存） 低级调度（进程调度、线程调度、短程调度）\n从就绪队列中选择一个进程 把 CPU 分配给选中的进程 保存和恢复进程的上下文（进程切换 Context Switch） 控制 CPU 的执行顺序 处理机的调度方式\n非抢占式 抢占式 选择调度算法的若干准则\nCPU利用率\n$$ \\frac{\\text{worktime of CPU}}{\\text{total time}} $$ 系统吞吐量\n$$ \\frac{\\text{number of tasks}}{\\text{total time}} $$ 周转时间(Turnaround Time)\n$$ \\text{Completion Time - Arrival Time} $$ 平均周转时间\n$$ \\frac{\\sum\\limits_{N}\\text{Turnaround Time of all processes}}{N} $$ 带权周转时间\n$$ \\frac{\\text{Turnaround Time}}{\\text{Service Time}} $$ 平均带权周转时间\n$$ \\frac{\\sum\\limits_{N}\\text{Weighted Turnaround Time of all processes}}{N} $$ 等待时间\n调度算法 FCFS（先来先服务）\nSJF（最短作业优先）\n抢占 非抢占 SRTF（最短剩余时间优先）\nPriority Scheduling（高优先权优先调度）\n抢占 非抢占 Highest Response Ratio Next (HRRN)（高响应比有点调度算法）\nRound Robin（时间片轮转）\nMultilevel Feedback Queue（多级反馈队列调度）\n上下文切换\nCPU上下文切换 系统调用上下文切换 进程上下文切换 用户级 系统级 线程上下文切换 中断上下文切换 课程编号:012-015\n数据结构-致敬传奇栈帧PC程序计数器 栈 静态顺序栈\n判空 判满 进栈 出栈 获取栈顶元素 动态顺序栈\n判空 判满 进栈 出栈 获取栈顶元素 链栈\n判空 判满 进栈 出栈 获取栈顶元素 栈的应用\n括号匹配 进制转换（辗转相除） 函数递归调用 表达式求值 前缀 中缀（重要） 后缀 课程编号：014-017\n数学-太好了是张宇老师我们有救了！ 函数的概念与特性 函数 反函数 复合函数 隐函数 函数的四种特性 有界性 单调性 奇偶性 周期性 基本初等函数与初等函数 常函数 幂函数 指数函数 对数函数 三角函数 sin x cos x csc x sec x tan x cot x 反三角函数 arcsin x arccos x arctanx arccot x 分段函数 高数第一讲\n","date":"2025-07-14T21:15:02+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0714/","title":"0714学习日志"},{"content":"数据结构-喜欢在头指针存数据的扣1 线性表的链式存储\n单链表 静态链表 其他链表 单向循环链表 双向链表 双向循环链表 课程代码010-013\n操作系统-谦让是美德 进程与线程 进程\nPCB 进程的特点： 动态性 并发性 独立性 异步性 进程的基本状态及管理切换 运行 阻塞 就绪 创建 终止 线程\n线程的特性 线程的状态 线程与进程的联系和不同 用户级线程与内核级线程的映射关系 互斥与同步 临界区实现互斥的原则\n空闲让进 忙则等待 有限等待 让权等待（非必须） 临界区实现互斥的基本方法\n软件实现方法 单标志法 双标志法 先检查法 后检查法 Peterson算法 硬件实现方法 中断屏蔽 TestAndSet指令 Swap指令 互斥锁（mutex lock）\nLockOne类 LockTwo类 Peterson锁 Barkley锁 信号量\n整型信号量 记录型信号量 管程 管程的定义 管程的组成 管程的特性 管程与进程的异同 条件变量 进程通信 管道通信 消息传递系统 共享存储器系统 课程编号005-011\n","date":"2025-07-13T23:27:16+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0713/","title":"0713学习日志"},{"content":"今天看来是无法解决所有当下的疑问了，故先列出清单：\n什么是用户级线程和内核级线程？ PCB都包含什么？ 访管中断和自陷指令有和关系？ ","date":"2025-07-13T23:27:16+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0713/","title":"0713学习笔记"},{"content":"操作系统 系统调用 功能 设备管理：设备的启动、请求和释放等。 文件管理：文件的读写、创建和删除等。 进程管理：进程的创建、撤销、阻塞和唤醒等。 进程通信：进程之间的消息或信号的传递等。 内存管理：内存的分配、回收以及获取作业占用内存区大小和起始地址等。 处理过程 用户程序将系统调用号和所需的参数压入堆栈；接着，调用实际的调用指令，然后执行一个陷入指令，将CPU从用户态转为核心态；再由硬件和操作系统内核程序保护被中断进程的现场。将程序计数器PC、程序状态字PSW及通用寄存器内容压入堆栈。 分析系统调用类型，转入相应的系统调用处理子程序。在系统中配置了一张系统调用入口表，表中的每个表项都对应一个系统调用，根据系统调用号找到该系统调用处理子程序的入口地址。 在系统调用处理子程序执行结束后，恢复被中断的或设置新进程的CPU现场，然后返回被中断进程或新进程，继续往下执行。 ","date":"2025-07-12T23:17:40+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/memo/0712/","title":"0712学习笔记"},{"content":"今天带刚来杭州的太阳(应当事人的要求使用该昵称)去西湖游玩。其实天气预报有雨，但东坡先生有诗为证：\n水光潋滟晴方好，山色空蒙雨亦奇。 欲把西湖比西子，淡妆浓抹总相宜。\n雨中西湖，让我陷入无穷大的浪漫遐想和无穷小的现实担忧。\n出了地铁站，人潮涌动；\n走到西湖畔，黑云从远处压来。\n走到白堤，下雨了。\n起先，觉得东坡先生诚不欺我，湖面落入无数雨珠，游船驶向远处，远处的山朦朦胧胧。\n我很兴奋，直到鞋被完全浸湿，直到暴雨驱散所有的游客。还没走完苏堤，到断桥，水已经漫过脚踝。\n最后不得已灰溜溜的挤进公交车，公交车在水中乘风破浪，我们像两株水草。\n虽然结局略微狼狈，不过也略微读懂了东坡先生的另一首诗：\n莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。\n“因为在雨中，我们看着落下雨幕的远方，牵着手笑着前行。”\n","date":"2025-07-12T22:27:55+08:00","image":"https://auroraemiya.github.io/npee_learning_log.github.io/diary/westlake-with-haruko/westlake_in_strom_hu_10ad18bd7f5a9650.jpg","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/diary/westlake-with-haruko/","title":"暴雨西湖"},{"content":"操作系统-int 0x80 操作系统的运行环境\n内核程序 特权指令 核心态，管态 应用程序 非特权指令 用户态，目态 操作系统的内核\n时钟管理 中断机制 内部异常 故障（Fault）（软件中断） 自陷（Trap）（软件中断） 终止（Abort）（硬件中断） 外部中断（硬件） 可屏蔽中断 INTR 不可屏蔽中断 NMI 课程编号 ：003-004\n英语-英语构词法 前缀包含两种作用：\n方向 性质 后缀一般表示词性，例外：able,\u0026hellip;.\n","date":"2025-07-12T22:05:39+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0712/","title":"0712学习日志"},{"content":"数据结构-太好了是死记硬背 数据的逻辑和物理结构 算法的时间空间复杂度 线性表的顺序表以及相关算法 课程编号001-009\n操作系统-想念jyy的第n天 操作系统概述 并发 共享 虚拟 异步 操作系统的发展历程 批处理器 单道 多道 分时操作系统 实时操作系统 网络操作系统 分布式操作系统 \u0026hellip;\u0026hellip; 课程编号001-002\n","date":"2025-07-11T20:29:14+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/posts/0711/","title":"0711学习日志"},{"content":"写在一切的前面 欢迎来到我的博客，这是我 （笔者自称小shy)为了记录参加2026考研全过程而开始的新栏目。\n我准备参加今年年底的2026NPEE(The national entrance examination for postgraduate)，科目是11408。\n此后我将更新自己从7月初到12月底的备考全过程日志，具体包括三个栏目：\n日记：这个部分属于随便写点感想什么的（随缘更新）。 日志：这个部分属于日常更新自己的学习/复习进度，欢迎监督！ 笔记：这个部分用于记录自己的学习心得和一些易错知识点。 可能以后还会补充，但是目前就先这样。\n联系方式可能以后会留一个收信的邮箱，这里打一个(TODO)（笑\n","date":"2025-07-11T16:35:21+08:00","permalink":"https://auroraemiya.github.io/npee_learning_log.github.io/diary/intro/","title":"Intro-全部の始まり"}]