<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Memo on shyの考研日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/categories/memo/</link>
        <description>Recent content in Memo on shyの考研日志</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 12 Aug 2025 11:20:48 +0800</lastBuildDate><atom:link href="https://auroraemiya.github.io/npee_learning_log.github.io/categories/memo/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>0812学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/</link>
        <pubDate>Tue, 12 Aug 2025 11:20:48 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/</guid>
        <description>&lt;h2 id=&#34;数据结构&#34;&gt;数据结构
&lt;/h2&gt;&lt;h3 id=&#34;红黑树&#34;&gt;红黑树
&lt;/h3&gt;&lt;h4 id=&#34;rule&#34;&gt;RULE
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Every node is either black or red.&lt;/li&gt;
&lt;li&gt;The root is black&lt;/li&gt;
&lt;li&gt;All leaves(NIL/null nodes) are black.&lt;/li&gt;
&lt;li&gt;Red node rule : &lt;strong&gt;If a node is red ,both its children and parents are black.&lt;/strong&gt;(no two red in a row)&lt;/li&gt;
&lt;li&gt;Black height rule: Every path from a node to its descendant NIL node contains  &lt;strong&gt;the same number of black nodes.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h4 id=&#34;construction-insertion&#34;&gt;Construction (Insertion)
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Case 1: Parent node is BLACK, go ahead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Case 2: RED parent,See your uncle:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Case 2.1 :BLACK uncle , Rotation to make things in balance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/Case2.1l.png&#34;
	width=&#34;969&#34;
	height=&#34;759&#34;
	srcset=&#34;https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/Case2.1l_hu_e2a977b617f265b1.png 480w, https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/Case2.1l_hu_32210b6c6b327c94.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Case2.1 LL&amp;LR&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;306px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/Case2.1r.png&#34;
	width=&#34;874&#34;
	height=&#34;762&#34;
	srcset=&#34;https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/Case2.1r_hu_388296b4c50491dd.png 480w, https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/Case2.1r_hu_40f33465402eeb38.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Case2.1 RL&amp;RR&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;114&#34;
		data-flex-basis=&#34;275px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Case 2.2 :RED uncle, BLACK-lize your parent and uncle,RED-lize your grand.&lt;/p&gt;
&lt;p&gt;Now consider the process of your grand and repeat cases above.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/Case2.2.png&#34;
	width=&#34;861&#34;
	height=&#34;390&#34;
	srcset=&#34;https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/Case2.2_hu_2bb9d3b36231e15c.png 480w, https://auroraemiya.github.io/npee_learning_log.github.io/memo/0812/Case2.2_hu_a2caedb5d994483b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Case2.2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;220&#34;
		data-flex-basis=&#34;529px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;b树&#34;&gt;B树
&lt;/h3&gt;&lt;h4 id=&#34;rules&#34;&gt;RULES
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Key properties&lt;/strong&gt; of a B-Tree of order $m$:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Every node can have at most &lt;strong&gt;m&lt;/strong&gt; children&lt;/li&gt;
&lt;li&gt;Every node (except root )has at least $\lceil \frac{m}{2}\rceil$ children&lt;/li&gt;
&lt;li&gt;Every non-leaf node with $k$ children has exactly $k-1$ keys&lt;/li&gt;
&lt;li&gt;Keys in each node are sorted&lt;/li&gt;
&lt;li&gt;All leaves appear on the same level&lt;/li&gt;
&lt;/ol&gt;
$$
\lfloor\log_{\lceil\frac{m}{2}\rceil}(\frac{n+1}{2})\rfloor +1 \geq h\geq \lceil\log_{m}(n+1)\rceil
$$&lt;p&gt;推理过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;左式：对于一个m阶的具有n个关键字的B树，其第二层至少有2个结点，第三层至少有$2\lceil\frac{m}{2}\rceil$个结点,以此类推，第$h+1$层至少有$2\lceil\frac{m}{2}\rceil^{h-1}$,这一层为查找失败的叶节点，结点数为$n+1$，因此有&lt;/li&gt;
&lt;/ol&gt;
$$
n+1\geq 2\lceil\frac{m}{2}\rceil^{h-1}
$$&lt;p&gt;​	化简得左式&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;右式：对于一个m阶的具有n个关键字的B树，其满足不等式
$$
   n\leq (m-1)(1+m+\cdots+m^{h-1})=m^h-1
   $$
化简得右式&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;constructioninsertion&#34;&gt;Construction(Insertion)
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Find the correct leaf&lt;/strong&gt;
Use the same logic as binary search but in multi-key nodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compare the new key to the existing keys in the current node.&lt;/li&gt;
&lt;li&gt;Descend into the correct child pointer until you reach a leaf.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Insert key in sorted order&lt;/strong&gt; in that leaf.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If the node has ≤ m − 1 keys after insertion&lt;/strong&gt; → done.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If the node overflows&lt;/strong&gt; (has m keys):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Split&lt;/strong&gt; the node into two nodes:
&lt;ul&gt;
&lt;li&gt;Middle key moves &lt;strong&gt;up&lt;/strong&gt; to the parent.&lt;/li&gt;
&lt;li&gt;Left half of keys go to the left child.&lt;/li&gt;
&lt;li&gt;Right half of keys go to the right child.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If the parent also overflows, split it &lt;strong&gt;recursively&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If the root splits&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a &lt;strong&gt;new root&lt;/strong&gt; containing the middle key.&lt;/li&gt;
&lt;li&gt;The height of the B-Tree increases by 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;deletion&#34;&gt;Deletion
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;If the key is in a leaf → just remove it.&lt;/li&gt;
&lt;li&gt;If the key is in an internal node:
&lt;ul&gt;
&lt;li&gt;Replace it with the &lt;strong&gt;predecessor&lt;/strong&gt; (largest in left subtree) or &lt;strong&gt;successor&lt;/strong&gt; (smallest in right subtree).&lt;/li&gt;
&lt;li&gt;Then delete that replacement key from the leaf.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If a node falls below &lt;strong&gt;⌈m/2⌉ − 1 keys&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Borrow&lt;/strong&gt; a key from a sibling if possible.&lt;/li&gt;
&lt;li&gt;Otherwise, &lt;strong&gt;merge&lt;/strong&gt; with a sibling.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the root becomes empty → its only child becomes the new root.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>0806学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0806/</link>
        <pubDate>Wed, 06 Aug 2025 20:32:29 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0806/</guid>
        <description>&lt;h2 id=&#34;数学-一些不等式&#34;&gt;数学-一些不等式
&lt;/h2&gt;&lt;h3 id=&#34;分析中常用的不等式&#34;&gt;&lt;strong&gt;分析中常用的不等式&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-伯努利不等式-bernoulli&#34;&gt;&lt;strong&gt;1. 伯努利不等式 (Bernoulli&amp;rsquo;s Inequality)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;对于任意实数 $x &amp;gt; -1$ 和整数 $n \ge 1$，有：
&lt;/p&gt;
$$
(1+x)^n \ge 1+nx
$$&lt;p&gt;
当且仅当 $n=1$或 $x=0$ 时等号成立。&lt;/p&gt;
&lt;p&gt;对于实数 &lt;/p&gt;
$$x \ge -1$$&lt;p&gt; 和实数 $\alpha \ge 1$，有更广义的形式：
&lt;/p&gt;
$$
(1+x)^\alpha \ge 1+\alpha x
$$&lt;hr&gt;
&lt;h4 id=&#34;2-均值不等式-mean-inequalities&#34;&gt;&lt;strong&gt;2. 均值不等式 (Mean Inequalities)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;对于一组非负实数 $x_1, x_2, \dots, x_n$，有以下关系：
&lt;/p&gt;
$$
\frac{n}{\sum_{i=1}^n \frac{1}{x_i}} \le \sqrt[n]{\prod_{i=1}^n x_i} \le \frac{\sum_{i=1}^n x_i}{n} \le \sqrt{\frac{\sum_{i=1}^n x_i^2}{n}}
$$&lt;p&gt;
这可以简记为：&lt;strong&gt;调和平均数 ≤ 几何平均数 ≤ 算术平均数 ≤ 平方平均数&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;3-琴生不等式-jensen&#34;&gt;&lt;strong&gt;3. 琴生不等式 (Jensen&amp;rsquo;s Inequality)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;如果 $f(x)$ 是一个凸函数，$\lambda_i \ge 0$ 且 $\sum\limits_{i=1}^n \lambda_i = 1$，则对于任意点 $x_1, x_2, \dots, x_n$，有：
&lt;/p&gt;
$$
f\left(\sum_{i=1}^n \lambda_i x_i\right) \le \sum_{i=1}^n \lambda_i f(x_i)
$$&lt;p&gt;
对于凹函数，不等号方向相反。琴生不等式在概率论和信息论中也有重要应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;4-绝对值不等式-triangle-inequality&#34;&gt;&lt;strong&gt;4. 绝对值不等式 (Triangle Inequality)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;对于任意实数或复数 $a$ 和 $b$，或者对于向量 $a$ 和 $b$，有：
&lt;/p&gt;
$$
|a+b| \le |a| + |b|
$$&lt;p&gt;
其推广形式为：
&lt;/p&gt;
$$
\left|\sum_{i=1}^n x_i\right| \le \sum_{i=1}^n |x_i|
$$&lt;hr&gt;
&lt;h3 id=&#34;代数与几何中的不等式&#34;&gt;&lt;strong&gt;代数与几何中的不等式&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-柯西-施瓦茨不等式-cauchy-schwarz-inequality&#34;&gt;&lt;strong&gt;1. 柯西-施瓦茨不等式 (Cauchy-Schwarz Inequality)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;对于任意两组实数 $a_1, a_2, \dots, a_n$ 和 $b_1, b_2, \dots, b_n$，有：
&lt;/p&gt;
$$
\left(\sum_{i=1}^n a_i b_i\right)^2 \le \left(\sum_{i=1}^n a_i^2\right) \left(\sum_{i=1}^n b_i^2\right)
$$&lt;p&gt;
在向量空间中，它可以表示为：
&lt;/p&gt;
$$
|\langle \mathbf{u}, \mathbf{v} \rangle|^2 \le \langle \mathbf{u}, \mathbf{u} \rangle \cdot \langle \mathbf{v}, \mathbf{v} \rangle = \|\mathbf{u}\|^2 \cdot \|\mathbf{v}\|^2
$$&lt;hr&gt;
&lt;h4 id=&#34;2-赫尔德不等式-hölder&#34;&gt;&lt;strong&gt;2. 赫尔德不等式 (Hölder&amp;rsquo;s Inequality)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;设 $p, q$为正实数，满足 &lt;/p&gt;
$$\frac{1}{p} + \frac{1}{q} = 1$$&lt;p&gt;。对于两组实数或复数 $x_1, \dots, x_n$和 $y_1, \dots, y_n$，有：
&lt;/p&gt;
$$
\sum_{i=1}^n |x_i y_i| \le \left(\sum_{i=1}^n |x_i|^p\right)^{1/p} \left(\sum_{i=1}^n |y_i|^q\right)^{1/q}
$$&lt;p&gt;
柯西-施瓦茨不等式是赫尔德不等式在 $p=q=2$ 时的特例。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;3-闵可夫斯基不等式-minkowski-inequality&#34;&gt;&lt;strong&gt;3. 闵可夫斯基不等式 (Minkowski Inequality)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;对于任意实数 $p \ge 1$ 和两组实数或复数 $x_1, \dots, x_n$ 和 $y_1, \dots, y_n$，有：
&lt;/p&gt;
$$
\left(\sum_{i=1}^n |x_i + y_i|^p\right)^{1/p} \le \left(\sum_{i=1}^n |x_i|^p\right)^{1/p} + \left(\sum_{i=1}^n |y_i|^p\right)^{1/p}
$$&lt;p&gt;
这个不等式是向量空间中范数的三角不等式的推广。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;4-排序不等式-rearrangement-inequality&#34;&gt;&lt;strong&gt;4. 排序不等式 (Rearrangement Inequality)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;设有两组实数 $a_1 \le a_2 \le \dots \le a_n$ 和 $b_1 \le b_2 \le \dots \le b_n$。令 $(c_1, c_2, \dots, c_n)$ 是 $(b_1, b_2, \dots, b_n)$ 的任意一个排列，则有：
&lt;/p&gt;
$$
\sum_{i=1}^n a_i b_{n-i+1} \le \sum_{i=1}^n a_i c_i \le \sum_{i=1}^n a_i b_i
$$&lt;p&gt;
即“反序和 ≤ 乱序和 ≤ 顺序和”。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;微积分中的不等式&#34;&gt;&lt;strong&gt;微积分中的不等式&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-杨氏不等式-young&#34;&gt;&lt;strong&gt;1. 杨氏不等式 (Young&amp;rsquo;s Inequality)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;设 $a, b$ 为非负实数，$p, q$ 为正实数且满足 &lt;/p&gt;
$$\frac{1}{p} + \frac{1}{q} = 1$$&lt;p&gt;，则：
&lt;/p&gt;
$$
ab \le \frac{a^p}{p} + \frac{b^q}{q}
$$&lt;h4 id=&#34;2-切比雪夫总和不等式-chebyshev&#34;&gt;&lt;strong&gt;2. 切比雪夫总和不等式 (Chebyshev&amp;rsquo;s Sum Inequality)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;设有两组单调序列 $a_1 \le a_2 \le \dots \le a_n$ 和 $b_1 \le b_2 \le \dots \le b_n$，则有：
&lt;/p&gt;
$$
\frac{1}{n} \sum_{i=1}^n a_i b_i \ge \left(\frac{1}{n} \sum_{i=1}^n a_i\right) \left(\frac{1}{n} \sum_{i=1}^n b_i\right)
$$&lt;p&gt;
如果一个序列单调递增，另一个单调递减，则不等号方向相反。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0803学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0803/</link>
        <pubDate>Sun, 03 Aug 2025 23:58:07 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0803/</guid>
        <description>&lt;h2 id=&#34;数学-拐点和极值点&#34;&gt;数学-拐点和极值点
&lt;/h2&gt;&lt;h3 id=&#34;二级结论&#34;&gt;二级结论
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;曲线的可导点不可同时为极值点和拐点；曲线的不可导点可同时为极值点和拐点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设多项式$f(x)={(x-a)}^ng(x)(x&amp;gt;1)$,且$g(a)\neq0$则当n为偶数时，$x=a$ 是$f(x)$的极值点；当n为奇数时，点$(a,0)$是曲线f(x)的拐点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设多项式函数$f(x)=(x-a_1)^{n_1}(x-a_2)^{n_2}\cdots(x-a_k)^{n_k}$其中$n_i$是正整数，$a_i$是实数且两两不等，则f(x)的极值为
&lt;/p&gt;
$$
   k_1+2k_2+k_3-1
   $$&lt;p&gt;
拐点个数为
&lt;/p&gt;
$$
   k_1+2k_2+3k_3-2
   $$&lt;p&gt;
其中$k_1$为$n_i=1$的个数，k_2为$n_i$为偶数的个数，$k_3$为$n_i$为奇数的个数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数学-曲率证明&#34;&gt;数学-曲率证明
&lt;/h2&gt;&lt;h3 id=&#34;数学证明过程&#34;&gt;数学证明过程
&lt;/h3&gt;&lt;p&gt;曲率$\kappa$被定义为
&lt;/p&gt;
$$
\kappa = \left| \frac{d\theta}{ds} \right|
$$&lt;p&gt;
同时
&lt;/p&gt;
$$
\begin{align*}
\tan \theta &amp;= \frac{dy}{dx} = f&#39;(x)\\
\theta &amp;= \arctan{ f&#39;(x)}\\
d\theta &amp;= \frac{f&#39;&#39;(x)}{1+{(f&#39;(x))}^2}dx
\end{align*}
$$&lt;p&gt;
弧长微分
&lt;/p&gt;
$$
ds = \sqrt{1+{(f&#39;(x))}^2}dx
$$&lt;p&gt;
于是
&lt;/p&gt;
$$
\kappa = \left| \dfrac{\dfrac{d\theta}{dx}}{\dfrac{ds}{dx}} \right|= \frac{f&#39;&#39;(x)}{\left(1+{(f&#39;(x))}^2\right)^{\frac{3}{2}}}
$$&lt;h3 id=&#34;物理证明视角参数方程&#34;&gt;物理证明视角&amp;ndash;参数方程
&lt;/h3&gt;&lt;p&gt;给定某个质点沿xy轴方向的位移$\mathbf{x}(x,x)$参数方程
&lt;/p&gt;
$$
\begin{cases}
x = \varphi(t)\\
y = \omega(t)\\
\end{cases}
$$&lt;p&gt;给定某个质点沿xy轴方向的速度$\mathbf{v}(v_x,v_y)$参数方程
&lt;/p&gt;
$$
\begin{cases}
v_x = \varphi&#39;(t)\\
v_y = \omega&#39;(t)\\
\end{cases}
$$&lt;p&gt;那么加速度$\mathbf{a}=(a_x,a_y)$
&lt;/p&gt;
$$
\begin{cases}
a_x = \varphi&#39;&#39;(t)\\
a_y = \omega&#39;&#39;(t)\\
\end{cases}
$$&lt;p&gt;
根据曲率半径的计算公式
&lt;/p&gt;
$$
r = \left|\frac{\mathbf{v}^2}{\mathbf{a}_{\perp}}\right|
$$&lt;p&gt;
又由于
&lt;/p&gt;
$$
|\mathbf{a}_{\perp}| = |\mathbf{a}\sin \theta|=\frac{|\mathbf{a\times v}|}{|\mathbf{v}|}
$$&lt;p&gt;
因此
&lt;/p&gt;
$$
\begin{align*}
\kappa &amp;= \frac{1}{r} = \left|\frac{\mathbf{a}_{\perp}}{\mathbf{v}^2}\right|\\
&amp;= \frac{|\mathbf{a\times v}|}{|\mathbf{v}|^3}\\
&amp;= \frac{|\varphi&#39;&#39;(t)\omega&#39;(t)-\varphi&#39;(t)\omega&#39;&#39;(t)|}{\left(\varphi&#39;(t)^2+\omega&#39;(t)^2\right)^{\frac{3}{2}}}
\end{align*}
$$</description>
        </item>
        <item>
        <title>0801学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0801/</link>
        <pubDate>Fri, 01 Aug 2025 20:10:27 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0801/</guid>
        <description>&lt;h2 id=&#34;数据结构-代码实现&#34;&gt;数据结构-代码实现
&lt;/h2&gt;&lt;p&gt;下文为三种二叉树遍历的c语言代码实现，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前序遍历：
&lt;ol&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;li&gt;非递归&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;中序遍历
&lt;ol&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;li&gt;非递归&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;后序遍历
&lt;ol&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;li&gt;非递归&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下为头文件&lt;code&gt;tree.h&lt;/code&gt;对各种数据结构和函数的定义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stack.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define TREE_DATATYPE int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Btree
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TREE_DATATYPE data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;left_child;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;right_child;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//....
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;} Btree;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_printf&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bt_new_node&lt;/span&gt;(TREE_DATATYPE value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Preorder Traversal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_pre_rec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_pre_nonrec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Inorder Traversal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_in_rec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_in_nonrec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Postorder Traversal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_post_rec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_post_rec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后是各个代码的具体实现，在&lt;code&gt;Btree.c&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;void bt_printf(Btree *node);&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bt_new_node&lt;/span&gt;(TREE_DATATYPE value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(Btree));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;node)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;malloc failed&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Btree *bt_new_node(TREE_DATATYPE value);&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_printf&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;preorder&#34;&gt;Preorder
&lt;/h3&gt;&lt;h4 id=&#34;递归&#34;&gt;递归
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;void bt_pre_rec(Btree *node, void (*visit)(Btree *));&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_pre_rec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;node)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(node); &lt;span style=&#34;color:#75715e&#34;&gt;// Visit the current node
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_pre_rec&lt;/span&gt;(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left_child, visit);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_pre_rec&lt;/span&gt;(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right_child, visit);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;非递归&#34;&gt;非递归
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;void bt_pre_nonrec(Btree *root, void (*visit)(Btree *));&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_pre_nonrec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Standard Algorithm:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// pop a node;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// visit the node;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// push its right child;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// push its left child;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;root)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StaticStack stack;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_init&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_push&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack, (DATATYPE)p); &lt;span style=&#34;color:#75715e&#34;&gt;// Push the root node onto the stack
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ss_is_empty&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        DATATYPE value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_pop&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)value; &lt;span style=&#34;color:#75715e&#34;&gt;// Pop the top node from the stack
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// If the popped node is NULL, skip it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Process the current node
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Push right child first so that left child is processed first
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right_child)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_push&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack, (DATATYPE)p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right_child);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left_child)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_push&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack, (DATATYPE)p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left_child);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// my poor attempt at a non-recursive preorder traversal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     visit the current node
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     printf(&amp;#34;%d &amp;#34;, p-&amp;gt;data);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     if (p-&amp;gt;right_child){
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//         ss_push(&amp;amp;stack, (DATATYPE) p-&amp;gt;right_child);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     if (p-&amp;gt;left_child)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//         p = p-&amp;gt;left_child;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     else if (ss_is_empty(&amp;amp;stack))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//         break; // Exit if the stack is empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     else
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//         DATATYPE value;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//         ss_pop(&amp;amp;stack, &amp;amp;value);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//         p = (Btree *) value;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;inorder&#34;&gt;Inorder
&lt;/h3&gt;&lt;h4 id=&#34;递归-1&#34;&gt;递归
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;void bt_in_rec(Btree *root, void (*visit)(Btree *));&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_in_rec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;root)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_in_rec&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left_child, visit);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(root); &lt;span style=&#34;color:#75715e&#34;&gt;// Visit the current node
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_in_rec&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right_child, visit);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;非递归-1&#34;&gt;非递归
&lt;/h4&gt;&lt;h4 id=&#34;void-bt_in_nonrecbtree-root-void-visitbtree-&#34;&gt;&lt;code&gt;void bt_in_nonrec(Btree *root, void (*visit)(Btree *));&lt;/code&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_in_nonrec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root,&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;root)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StaticStack stack;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_init&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ss_is_empty&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_push&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack, (DATATYPE)p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left_child;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        DATATYPE value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_pop&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)value; &lt;span style=&#34;color:#75715e&#34;&gt;// Pop the top node from the stack
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(p);          &lt;span style=&#34;color:#75715e&#34;&gt;// Visit the current node
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right_child; &lt;span style=&#34;color:#75715e&#34;&gt;// Move to the right child
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;postorder&#34;&gt;Postorder
&lt;/h3&gt;&lt;h4 id=&#34;递归-2&#34;&gt;递归
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;void bt_post_rec(Btree *root, void (*visit)(Btree *));&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_post_rec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;root)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_post_rec&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left_child, visit);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_post_rec&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right_child, visit);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(root);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;非递归-2&#34;&gt;非递归
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;void bt_post_rec(Btree *root, void (*visit)(Btree *));&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bt_post_nonrec&lt;/span&gt;(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;root, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;visit)(Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;root)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StaticStack stack;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_init&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;last_visit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ss_is_empty&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_push&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack, (DATATYPE)p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left_child;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        DATATYPE value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_top&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Btree &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)value; &lt;span style=&#34;color:#75715e&#34;&gt;// Pop the top node from the stack
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// If the popped node is NULL, skip it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right_child &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right_child &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; last_visit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// If there is no right child or the right child has been visited
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ss_pop&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stack, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(p); &lt;span style=&#34;color:#75715e&#34;&gt;// Visit the current node
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            last_visit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p; &lt;span style=&#34;color:#75715e&#34;&gt;// Update last visited node
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;       &lt;span style=&#34;color:#75715e&#34;&gt;// Set p to NULL to continue backtracking
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right_child; &lt;span style=&#34;color:#75715e&#34;&gt;// Move to the right child
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>0730学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0730/</link>
        <pubDate>Wed, 30 Jul 2025 23:44:55 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0730/</guid>
        <description>&lt;h2 id=&#34;gcc-manual-rtfm&#34;&gt;GCC manual-RTFM
&lt;/h2&gt;&lt;p&gt;今天心血来潮想要拜读&lt;code&gt;gcc&lt;/code&gt;man page，学到很多。有时候会思考，AI确实帮助了我快速上手一个领域，比如使用Rust编写一个植物大战僵尸的游戏，比如从零开始认识一个代码，但是一旦结束之后，回头再想就很难说我仍然可以再举一反三地做另一个好玩的事情，事实上Rust的语法和特性我也几乎忘记。&lt;/p&gt;
&lt;p&gt;jyy老师在课堂上曾经向我们展示了许多很好玩的代码，很有意思的命令行，也曾经嘱咐我们一定要RTFM(Read The Friendly Manual)，现在的我毕业了，同时仍然是AI的重度依赖者，只是心里一直有一个地方在不断的问自己：AI的回答能否坦然接受？&lt;/p&gt;
&lt;p&gt;我的答案一直是：NO&lt;/p&gt;
&lt;p&gt;我始终在拥抱AI的同时留有一丝怀疑和谨慎。&lt;/p&gt;
&lt;p&gt;这是man page的部分内容，权当记录，明天还要更新更多的笔记。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GNU project C and C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; compiler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       gcc [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|-&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;|-&lt;/span&gt;E] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;standard]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;g] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pg] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Olevel]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wwarn...] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wpedantic]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Idir...] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Ldir...]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dmacro[&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;defn]...] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Umacro]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;foption...] [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mmachine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;option...]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o outfile] [&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;file] infile...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Only the most useful options are listed here; see below &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       remainder.  g&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; accepts mostly the same options as gcc.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DESCRIPTION      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       When you invoke GCC, it normally does preprocessing, compilation,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       assembly and linking.  The &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;overall options&amp;#34;&lt;/span&gt; allow you to stop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       this process at an intermediate stage.  For example, the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c option
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       says not to run the linker.  Then the output consists of object
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       files output by the assembler.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Other options are passed on to one or more stages of processing.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Some options control the preprocessor and others the compiler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       itself.  Yet other options control the assembler and linker; most
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       of these are not documented here, since you rarely need to use any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       of them.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Most of the command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line options that you can use with GCC are
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       useful &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; C programs; when an option is only useful with another
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;language&lt;/span&gt; (usually C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;), the explanation says so explicitly.  If
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       the description &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a particular option does not mention a source
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       language, you can use that option with all supported languages.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       The usual way to run GCC is to run the executable called gcc, or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       machine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gcc when cross&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;compiling, or machine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gcc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;version to run a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       specific version of GCC.  When you compile C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; programs, you
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       should invoke GCC as g&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; instead.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       The gcc program accepts options and file names as operands.  Many
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       options have multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;letter names; therefore multiple single&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;letter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       options may not be grouped: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dv is very different from &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       You can mix options and other arguments.  For the most part, the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       order you use doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t matter.  Order does matter when you use
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       several options of the same kind; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you specify &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;L
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       more than once, the directories are searched in the order
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       specified.  Also, the placement of the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l option is significant.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Many options have &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; names starting with &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f or with &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       example, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fmove&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;invariants, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wformat and so on.  Most of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       these have both positive and negative forms; the negative form of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ffoo is &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;foo.  This manual documents only one of these two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       forms, whichever one is not the &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Some options take one or more arguments typically separated either
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       by a space or by the equals &lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;) from the option name.  Unless
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       documented otherwise, an argument can be either numeric or a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       string.  Numeric arguments must typically be small &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       decimal or hexadecimal integers.  Hexadecimal arguments must begin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       with the &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;x prefix.  Arguments to options that specify a size
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       threshold of some sort may be arbitrarily large decimal or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       hexadecimal integers followed by a byte size suffix designating a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       multiple of bytes such as &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kB&amp;#34;&lt;/span&gt; and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KiB&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; kilobyte and
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       kibibyte, respectively, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MB&amp;#34;&lt;/span&gt; and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MiB&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; megabyte and mebibyte,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GB&amp;#34;&lt;/span&gt; and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GiB&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; gigabyte and gigibyte, and so on.  Such
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       arguments are designated by byte&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;size in the following text.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Refer to the NIST, IEC, and other relevant national and
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       international standards &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the full listing and explanation of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       the binary and decimal byte size prefixes.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Option Summary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Here is a summary of all the options, grouped by type.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Explanations are in the following sections.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Overall Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;S  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o file  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x language &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help[&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;class[,...]]  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;help  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;codes  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pipe  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;wrapper &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ffile&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;old&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;new &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplugin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplugin&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;arg&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;slim]  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;parent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;unit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;go&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       C Language Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ansi  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;standard  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fgnu89&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpermitted&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;flt&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;eval&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;standard &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;aux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;info filename
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fallow&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;parameterless&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;variadic&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;functions &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;asm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;builtin  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;builtin&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;function  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fgimple &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fhosted
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ffreestanding &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fopenacc  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fopenacc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;geom &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fopenmp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fopenmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;simd &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fms&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;extensions  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplan9&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;extensions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fsso&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;endianness &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fallow&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;single&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;precision
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fcond&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mismatch  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;flax&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;conversions &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fsigned&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bitfields
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fsigned&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;funsigned&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bitfields  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;funsigned&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; Language Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fabi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;access&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;control &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;faligned&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;new&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fargs&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fchar8_t&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fcheck&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;new &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fconstexpr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fconstexpr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fconstexpr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ops&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;elide&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;constructors &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enforce&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;eh&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;keywords &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;implicit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;templates
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;implicit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;templates &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;implement&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;inlines
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fms&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;extensions &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fnew&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;inheriting&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ctors &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fnew&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ttp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;matching
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nonansi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;builtins  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fnothrow&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;opt  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;operator&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;names
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;optional&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;diags  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpermissive &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pretty&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;templates &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;frepo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rtti  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fsized&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;deallocation &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftemplate&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;backtrace&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftemplate&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;threadsafe&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;statics  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fuse&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cxa&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;atexit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;weak  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nostdinc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fvisibility&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;inlines&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hidden
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fvisibility&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ms&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;compat &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fext&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;numeric&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;literals &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wabi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wabi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tag  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wconversion&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;null  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wctor&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dtor&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;privacy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wdelete&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;virtual&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dtor  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wdeprecated&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;copy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wdeprecated&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;copy&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dtor &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wliteral&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;suffix &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wmultiple&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;inheritance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;init&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lifetime &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wnamespaces  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wnarrowing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wpessimizing&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;move  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wredundant&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;move &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wnoexcept
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wnoexcept&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wclass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;memaccess &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wnon&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;virtual&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dtor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wreorder  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wregister &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Weffc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wstrict&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;null&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sentinel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wtemplates &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;template&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;friend  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wold&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cast
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Woverloaded&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;virtual  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pmf&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;conversions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;class&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;conversion  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;terminate &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wsign&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;promo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wvirtual&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;inheritance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Preprocessor Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Aquestion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;answer &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;A&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;question[&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;answer] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;CC  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dmacro[&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;defn]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dD  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dI  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dM  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dN  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dU &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdebug&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdirectives&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;only
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdollars&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;identifiers &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fexec&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;charset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fextended&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;identifiers &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;finput&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;charset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fmacro&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;old&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;new &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;canonical&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;system&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;headers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpch&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;deps  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpch&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;preprocess &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpreprocessed  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftabstop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;width
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftrack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;macro&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;expansion &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fwide&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exec&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;charset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fworking&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;directory &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;imacros file  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;include file &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MF  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MG  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MM  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MMD  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MP  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MQ  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MT &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;no&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;integrated&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pthread  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;remap &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;traditional  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;traditional&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;trigraphs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Umacro  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;undef &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wp,option  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Xpreprocessor option
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Assembler Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wa,option  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Xassembler option
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Linker Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           object&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fuse&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ld&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linker  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;llibrary &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nostartfiles
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nodefaultlibs  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nolibc  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nostdlib &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e entry  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;entry&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;entry
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pie  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pthread  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rdynamic &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pie
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libgcc  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libstdc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libasan
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libtsan  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;liblsan  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libubsan &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shared
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shared&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libgcc  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;symbolic &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;T script  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wl,option  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Xlinker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           option &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;u symbol  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;z keyword
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Directory Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Bprefix  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Idir  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;idirafter dir &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;imacros file  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;imultilib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           dir &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;iplugindir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dir  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;iprefix file &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;iquote dir  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;isysroot dir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;isystem dir &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;iwithprefix dir  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;iwithprefixbefore dir &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Ldir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;no&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;canonical&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefixes  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;no&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sysroot&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;suffix &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nostdinc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nostdinc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;sysroot&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Code Generation Options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fcall&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;saved&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reg  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fcall&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;used&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reg &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ffixed&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reg  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fexceptions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fnon&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;call&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exceptions  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdelete&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dead&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exceptions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;funwind&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tables &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fasynchronous&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;unwind&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tables &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;unique
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;finhibit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;directive  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;common  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ident
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpcc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpic  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fPIC  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpie  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fPIE  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;plt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fno&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;jump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tables &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;frecord&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gcc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;switches &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;freg&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fshort&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enums  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fshort&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;wchar &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fverbose&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;asm&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fleading&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;underscore  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftls&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;model
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fstack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reuse&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;reuse_level &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftrampolines  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ftrapv  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fwrapv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fvisibility&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;internal&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;hidden&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;protected]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fstrict&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bitfields  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fsync&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libcalls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      For any given input file, the file name suffix determines what
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       kind of compilation is done:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C source code that must be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.ii
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C source code.  Note that you must link with the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           libobjc library to make an Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C program work.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.mi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.mm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code.  Note that you must link with the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           libobjc library to make an Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; program work.  Note
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           that .M refers to a literal capital M.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.mii
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C, C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;, Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C or Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; header file to be turned
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           into a precompiled &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;), or C, C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; header file to
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           be turned into an Ada &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt; (via the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.cc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.cp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.cxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.CPP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.C
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code that must be preprocessed.  Note that in .cxx,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the last two letters must both be literally x.  Likewise, .C
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           refers to a literal capital C.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.mm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code that must be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.mii
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.hh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.H
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.hp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.hxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.hpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.HPP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.tcc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; header file to be turned into a precompiled header or Ada
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           spec.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.ftn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Fixed form Fortran source code that should not be
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.F
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.FOR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.fpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.FPP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.FTN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Fixed form Fortran source code that must be &lt;span style=&#34;color:#a6e22e&#34;&gt;preprocessed&lt;/span&gt; (with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the traditional preprocessor).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.f90
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.f95
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.f03
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.f08
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Free form Fortran source code that should not be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.F90
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.F95
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.F03
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.F08
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Free form Fortran source code that must be &lt;span style=&#34;color:#a6e22e&#34;&gt;preprocessed&lt;/span&gt; (with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the traditional preprocessor).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Go source code.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.brig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           BRIG &lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt; (binary representation of HSAIL).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           D source code.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.di
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           D interface file.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.dd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           D documentation &lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; (Ddoc).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.ads
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Ada source code file that contains a library unit &lt;span style=&#34;color:#a6e22e&#34;&gt;declaration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (a declaration of a package, subprogram, or generic, or a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           generic instantiation), or a library unit renaming &lt;span style=&#34;color:#a6e22e&#34;&gt;declaration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (a package, generic, or subprogram renaming declaration).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Such files are also called specs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.adb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Ada source code file containing a library unit &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt; (a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           subprogram or package body).  Such files are also called
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           bodies.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Assembler code.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.S
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       file.sx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Assembler code that must be preprocessed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       other
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           An object file to be fed straight into linking.  Any file name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           with no recognized suffix is treated this way.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       You can specify the input language explicitly with the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x option:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x language
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Specify explicitly the language &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the following input &lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (rather than letting the compiler choose a &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; based on
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the file name suffix).  This option applies to all following
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           input files until the next &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x option.  Possible values &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           language are:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   c  c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;header  cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;  c&lt;span style=&#34;color:#f92672&#34;&gt;++-&lt;/span&gt;header  c&lt;span style=&#34;color:#f92672&#34;&gt;++-&lt;/span&gt;cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c  objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;header  objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;++-&lt;/span&gt;header objective&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;++-&lt;/span&gt;cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   assembler  assembler&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   ada
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   f77  f77&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;input f95  f95&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;input
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   brig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Turn off any specification of a language, so that subsequent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           files are handled according to their file name &lt;span style=&#34;color:#a6e22e&#34;&gt;suffixes&lt;/span&gt; (as
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           they are &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x has not been used at all).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       If you only want some of the stages of compilation, you can use &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (or filename suffixes) to tell gcc where to start, and one of the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       options &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;S, or &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E to say where gcc is to stop.  Note that some
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;combinations&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x cpp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E) instruct gcc to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       nothing at all.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c  Compile or assemble the source files, but &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not link.  The
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           linking stage simply is not done.  The ultimate output is in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the form of an object file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each source file.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           By &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;, the object file name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a source file is made by
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           replacing the suffix .c, .i, .s, etc., with .o.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Unrecognized input files, not requiring compilation or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           assembly, are ignored.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;S  Stop after the stage of compilation proper; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not assemble.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           The output is in the form of an assembler code file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;assembler input file specified.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           By &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;, the assembler file name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a source file is made
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           by replacing the suffix .c, .i, etc., with .s.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Input files that don&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t require compilation are ignored.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E  Stop after the preprocessing stage; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not run the compiler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           proper.  The output is in the form of preprocessed source
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           code, which is sent to the standard output.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Input files that don&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t require preprocessing are ignored.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Place output in file file.  This applies to whatever sort of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           output is being produced, whether it be an executable file, an
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           object file, an assembler file or preprocessed C code.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           If &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o is not specified, the &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; is to put an executable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           file in a.out, the object file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; source.suffix in source.o,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           its assembler file in source.s, a precompiled header file in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           source.suffix.gch, and all preprocessed C source on standard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           output.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v  &lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt; (on standard error output) the commands executed to run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the stages of compilation.  Also print the version number of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the compiler driver program and of the preprocessor and the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           compiler proper.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;###&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Like &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v except the commands are not executed and arguments are
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           quoted unless they contain only alphanumeric characters or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./-_&amp;#34;&lt;/span&gt;.  This is useful &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; shell scripts to capture the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           driver&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;generated command lines.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt; (on the standard output) a description of the command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           line options understood by gcc.  If the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v option is also
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specified then &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help is also passed on to the various
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           processes invoked by gcc, so that they can display the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line options they accept.  If the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Wextra option has
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           also been &lt;span style=&#34;color:#a6e22e&#34;&gt;specified&lt;/span&gt; (prior to the &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help option), then
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line options that have no documentation associated
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           with them are also displayed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt; (on the standard output) a description of target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specific command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line options &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each tool.  For some targets
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           extra target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specific information may also be printed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{class&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;]qualifier}[,...]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt; (on the standard output) a description of the command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           line options understood by the compiler that fit into all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specified classes and qualifiers.  These are the supported
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           classes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           optimizers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display all of the optimization options supported by the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               compiler.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           warnings
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display all of the options controlling warning messages
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               produced by the compiler.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           target
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specific options.  Unlike the &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               option however, target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specific options of the linker and
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               assembler are not displayed.  This is because those tools
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not currently support the extended &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; syntax.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           params
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display the values recognized by the &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;param option.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           language
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display the options supported &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; language, where language
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               is the name of one of the languages supported in this
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               version of GCC.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           common
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display the options that are common to all languages.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           These are the supported qualifiers:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           undocumented
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display only those options that are undocumented.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           joined
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display options taking an argument that appears after an
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               equal sign in the same continuous piece of text, such as:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;target.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           separate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Display options taking an argument that appears as a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               separate word following the original option, such as: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               output&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;file.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Thus &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example to display all the undocumented target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specific switches supported by the compiler, use:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;target,undocumented
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           The sense of a qualifier can be inverted by prefixing it with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; character, so &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example to display all binary warning
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt; (i.e., ones that are either on or off and that &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           take an argument) that have a description, use:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;warnings,&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;joined,&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;undocumented
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           The argument to &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; should not consist solely of inverted
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           qualifiers.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Combining several classes is possible, although this usually
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           restricts the output so much that there is nothing to display.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           One &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; where it does work, however, is when one of the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           classes is target.  For example, to display all the target&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specific optimization options, use:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;target,optimizers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           The &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; option can be repeated on the command line.  Each
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           successive use displays its requested class of options,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           skipping those that have already been displayed.  If &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help is
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           also specified anywhere on the command line then this takes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           precedence over any &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; option.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           If the &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q option appears on the command line before the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; option, then the descriptive text displayed by &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           is changed.  Instead of describing the displayed options, an
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           indication is given as to whether the option is enabled,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           disabled or set to a specific &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (assuming that the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           compiler knows this at the point where the &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; option is
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           used).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Here is a truncated example from the ARM port of gcc:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mabi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     The following options are target specific:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mabi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;                                &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mabort&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;on&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;noreturn                   [disabled]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mapcs                                [disabled]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           The output is sensitive to the effects of previous command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           line options, so &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example it is possible to find out which
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           optimizations are enabled at &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O2 by using:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O2 &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;optimizers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Alternatively you can discover which binary optimizations are
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           enabled by &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O3 by using:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O3 &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;optimizers &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;O3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;opts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O2 &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;optimizers &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;O2&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;opts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   diff &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;O2&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;opts &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;O3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;opts &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; grep enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Display the version number and copyrights of the invoked GCC.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;codes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Normally the gcc program exits with the code of &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; any phase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           of the compiler returns a non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;success &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; code.  If you
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specify &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;codes, the gcc program instead returns with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the numerically highest error produced by any phase returning
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           an error indication.  The C, C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;, and Fortran front ends
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; an internal compiler error is encountered.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pipe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Use pipes rather than temporary files &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; communication
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           between the various stages of compilation.  This fails to work
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           on some systems where the assembler is unable to read from a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           pipe; but the GNU assembler has no trouble.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Process file after the compiler reads in the standard specs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           file, in order to override the defaults which the gcc driver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           program uses when determining what switches to pass to cc1,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           cc1plus, as, ld, etc.  More than one &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;specs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file can be
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specified on the command line, and they are processed in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           order, from left to right.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;wrapper
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Invoke all subcommands under a wrapper program.  The name of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the wrapper program and its parameters are passed as a comma
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           separated list.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c t.c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;wrapper gdb,&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;args
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           This invokes all subprograms of gcc under gdb &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;args, thus the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           invocation of cc1 is gdb &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;args cc1 ....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ffile&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;old&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;new
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           When compiling files residing in directory old, record any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           references to them in the result of the compilation as &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           files resided in directory new instead.  Specifying this
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           option is equivalent to specifying all the individual
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;*-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map options.  This can be used to make reproducible
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           builds that are location independent.  See also
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fmacro&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map and &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdebug&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;map.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplugin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Load the plugin code in file name.so, assumed to be a shared
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           object to be dlopen&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;d by the compiler.  The base name of the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           shared object file is used to identify the plugin &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           purposes of argument &lt;span style=&#34;color:#a6e22e&#34;&gt;parsing&lt;/span&gt; (See &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplugin&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;arg&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           below).  Each plugin should define the callback functions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specified in the Plugins API.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fplugin&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;arg&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Define an argument called key with a value of value &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           plugin called name.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;slim]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           For C and C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; source and include files, generate corresponding
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Ada specs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;parent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;unit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           In conjunction with &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ada&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;slim] above, generate Ada
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           specs as child units of parent unit.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fdump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;go&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           For input files in any language, generate corresponding Go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           declarations in file.  This generates Go &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;const&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;var&amp;#34;&lt;/span&gt;, and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;func&amp;#34;&lt;/span&gt; declarations which may be a useful way to
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           start writing a Go interface to code written in some other
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           language.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Read command&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line options from file.  The options read are
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           inserted in place of the original &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;file option.  If file does
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           not exist, or cannot be read, then the option will be treated
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           literally, and not removed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Options in file are separated by whitespace.  A whitespace
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           character may be included in an option by surrounding the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           entire option in either single or &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; quotes.  Any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;character&lt;/span&gt; (including a backslash) may be included by prefixing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           the character to be included with a backslash.  The file may
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           itself contain additional &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;file options; any such options will
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           be processed recursively.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>0728学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0728/</link>
        <pubDate>Mon, 28 Jul 2025 19:40:10 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0728/</guid>
        <description>&lt;h2 id=&#34;数学-微分学习题&#34;&gt;数学-微分学习题
&lt;/h2&gt;&lt;h3 id=&#34;错题必刷榜&#34;&gt;错题必刷榜
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设函数$f(x)$连续，给出下列条件&lt;/p&gt;
&lt;p&gt;(A) $\lim\limits_{x\to 0}{\dfrac{|f(x)|-f(0)}{x}}$存在&lt;/p&gt;
&lt;p&gt;(B) $\lim\limits_{x\to 0}{\dfrac{f(x)-|f(0)|}{x}}$存在&lt;/p&gt;
&lt;p&gt;(C) $\lim\limits_{x\to 0}{\dfrac{|f(x)|}{x}}$存在&lt;/p&gt;
&lt;p&gt;(D) $\lim\limits_{x\to 0}{\dfrac{|f(x)|-|f(0)|}{x}}$存在&lt;/p&gt;
&lt;p&gt;其中能得到&amp;quot;$f(x)$在$x=0$处可导&amp;quot;的条件为&lt;/p&gt;
&lt;p&gt;(C)$\lim\limits_{x\to0}\dfrac{|f(x)|}{x}=0\Rightarrow\forall \epsilon&amp;gt;0,\left|\dfrac{|f(x)|}{x}-0\right|&amp;lt;\epsilon\Rightarrow\lim\limits_{x\to0}\left|\dfrac{f(x)}{x}\right|=0\Rightarrow f&amp;rsquo;(0)=0$&lt;/p&gt;
&lt;p&gt;(A)$f(0)=\lim\limits_{x\to0}{|f(x)|}\geq0\Rightarrow$if $f(0)=0$,the same as (C);else if $f(0)&amp;gt;0$，保号性使得$\exists \delta&amp;gt;0,f(x)&amp;gt;0,x\in(-\delta,\delta)$&lt;/p&gt;
&lt;p&gt;(B)$f(0)=\lim\limits_{x\to0}{f(x)}=|f(0)|\geq0\Rightarrow$if $f(0)=0$,显然成立;else if $f(0)&amp;gt;0$，也显然成立。&lt;/p&gt;
&lt;p&gt;(D)if $f(0)=0$,the same as (C);else 保号性使得两个绝对值内部同号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;故四个全符合。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;一些重要的泰勒展开式&#34;&gt;一些重要的泰勒展开式
&lt;/h3&gt;$$
\begin{align*}
\text{e}^x &amp;= \sum_{n=0}^{\infty} \frac{x^n}{n!} 
            = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \cdots \\[1ex]
\sin x     &amp;= \sum_{n=0}^{\infty} (-1)^n \frac{x^{2n+1}}{(2n+1)!} 
            = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + \cdots \\[1ex]
\cos x     &amp;= \sum_{n=0}^{\infty} (-1)^n \frac{x^{2n}}{(2n)!} 
            = 1 - \frac{x^2}{2!} + \frac{x^4}{4!} - \frac{x^6}{6!} + \cdots \\[1ex]
\ln(1+x)   &amp;= \sum_{n=1}^{\infty} (-1)^{n+1} \frac{x^n}{n} 
            = x - \frac{x^2}{2} + \frac{x^3}{3} - \frac{x^4}{4} + \cdots \quad (|x| &lt; 1) \\[1ex]
\frac{1}{1 - x} &amp;= \sum_{n=0}^{\infty} x^n 
                 = 1 + x + x^2 + x^3 + \cdots \quad (|x| &lt; 1) \\[1ex]
\frac{1}{1 + x} &amp;= \sum_{n=0}^{\infty} (-1)^n x^n 
                 = 1 - x + x^2 - x^3 + \cdots \quad (|x| &lt; 1) \\[1ex]
\arctan x  &amp;= \sum_{n=0}^{\infty} (-1)^n \frac{x^{2n+1}}{2n+1} 
            = x - \frac{x^3}{3} + \frac{x^5}{5} - \frac{x^7}{7} + \cdots \quad (|x| \leq 1)
\end{align*}
$$&lt;h3 id=&#34;常用高阶导数&#34;&gt;常用高阶导数
&lt;/h3&gt;$$
\begin{align*}
\left(e^{ax+b}\right)^{(n)}&amp;=a^ne^{ax+b}\\
[\sin{(ax+b)}]^{(n)}&amp;=a^n\sin{\left(ax+b+\dfrac{n\pi}{2}\right)}\\
[\cos{(ax+b)}]^{(n)}&amp;=a^n\cos{\left(ax+b+\dfrac{n\pi}{2}\right)}\\
[\ln(ax+b)]^{(n)}&amp;=(-1)^{n-1}a^n\frac{(n-1)!}{(ax+b)^{n}}\\
(\frac{1}{ax+b})^{(n)}&amp;=(-1)^na^n\frac{n!}{(ax+b)^{n+1}}
\end{align*}
$$</description>
        </item>
        <item>
        <title>0726学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0726/</link>
        <pubDate>Sat, 26 Jul 2025 11:19:57 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0726/</guid>
        <description>&lt;h2 id=&#34;操作系统-一些易错知识点&#34;&gt;操作系统-一些易错知识点
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在计算平均访存时间时要注意快表TLB和页表的访问是&lt;strong&gt;串行&lt;/strong&gt;还是并行的，也要注意页表是&lt;strong&gt;单级&lt;/strong&gt;还是多级的&lt;/li&gt;
&lt;li&gt;虚拟存储器的&lt;strong&gt;最大容量&lt;/strong&gt;只和计算机的地址结构决定，&lt;strong&gt;实际容量&lt;/strong&gt;和内存和外存有关&lt;/li&gt;
&lt;li&gt;工作集不是驻留集的子集，只是数量要小于（不大于）驻留集的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一些你需要搞明白的概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;链接，包括静态和动态&lt;/p&gt;
&lt;p&gt;链接是将不同编译单元及其依赖库整合到一个统一逻辑地址空间的过程。根据发生时间不同，链接分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;静态链接&lt;/strong&gt;：在编译阶段将所有代码打包进可执行文件中；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态链接&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加载时链接（Load-Time Linking）&lt;/strong&gt;：程序加载时操作系统自动加载依赖库；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时链接（Run-Time Linking）&lt;/strong&gt;：程序运行过程中手动加载库，例如通过 &lt;code&gt;dlopen()&lt;/code&gt; 等函数调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类别&lt;/th&gt;
          &lt;th&gt;链接时间&lt;/th&gt;
          &lt;th&gt;控制方式&lt;/th&gt;
          &lt;th&gt;示例函数&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;静态链接&lt;/td&gt;
          &lt;td&gt;编译/链接阶段&lt;/td&gt;
          &lt;td&gt;编译器自动处理&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;动态链接（加载时）&lt;/td&gt;
          &lt;td&gt;程序加载阶段&lt;/td&gt;
          &lt;td&gt;操作系统自动处理&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;动态链接（运行时）&lt;/td&gt;
          &lt;td&gt;程序运行阶段&lt;/td&gt;
          &lt;td&gt;程序员手动调用&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;dlopen&lt;/code&gt;, &lt;code&gt;dlsym&lt;/code&gt; 等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;$&amp;gt;dive into the procedure of linking of a C code program(Gemini 2.5 pro)&lt;/p&gt;
&lt;h3 id=&#34;the-final-step-unraveling-the-linking-process-of-a-c-program&#34;&gt;The Final Step: Unraveling the Linking Process of a C Program
&lt;/h3&gt;&lt;p&gt;The journey from human-readable C code to an executable program culminates in a crucial, often-overlooked stage: linking. This final step in the compilation process is where all the disparate pieces of your program are brought together to create a single, functional executable file. The linker, a key component of the C toolchain, orchestrates this assembly, resolving references between different parts of your code and incorporating necessary library functions.&lt;/p&gt;
&lt;p&gt;The compilation of a C program is a multi-stage process. First, the preprocessor handles directives like &lt;code&gt;#include&lt;/code&gt; and &lt;code&gt;#define&lt;/code&gt;. The preprocessed code is then compiled into assembly language, which is subsequently converted into machine-readable object files. These object files, however, are not yet ready to run. They are incomplete pieces of a larger puzzle, and it is the linker&amp;rsquo;s job to put them together.&lt;/p&gt;
&lt;p&gt;The primary role of the linker is to take one or more object files, along with any necessary libraries, and combine them into a single executable file. A key function of the linker is &lt;strong&gt;symbol resolution&lt;/strong&gt;. When you call a function in one C file that is defined in another, the compiler leaves a placeholder, or a reference, in the object file. The linker&amp;rsquo;s job is to find the actual memory address of that function in the other object file and replace the placeholder with this address. This ensures that when the program runs, the function call correctly jumps to the right location in memory.&lt;/p&gt;
&lt;h3 id=&#34;static-vs-dynamic-linking-two-approaches-to-integration&#34;&gt;Static vs. Dynamic Linking: Two Approaches to Integration
&lt;/h3&gt;&lt;p&gt;There are two fundamental ways a linker can incorporate external code into your program: static linking and dynamic linking.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Static Linking:&lt;/strong&gt; In this approach, all the required library code is copied directly into the final executable file. This creates a self-contained program that does not rely on external libraries to be present on the system where it is run.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Advantages of Static Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Portability:&lt;/strong&gt; The executable can be run on systems that do not have the required libraries installed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Potentially Faster Execution:&lt;/strong&gt; Since all the code is in one place, it can sometimes lead to faster execution as there is no need to load external libraries at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages of Static Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Larger Executable Size:&lt;/strong&gt; Because all library code is included, the resulting executable file is larger.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inefficient Memory and Disk Space Usage:&lt;/strong&gt; If multiple programs on a system use the same statically linked library, each will have its own copy, leading to redundant use of disk space and memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Difficult to Update:&lt;/strong&gt; To update a library, every program that uses it must be re-linked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Linking:&lt;/strong&gt; In contrast, dynamic linking does not copy the library code into the executable. Instead, it only includes the names of the shared libraries that the program needs. The actual linking of the library code happens at runtime when the program is loaded into memory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Advantages of Dynamic Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Smaller Executable Size:&lt;/strong&gt; The executables are smaller as they only contain references to the shared libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient Memory and Disk Space Usage:&lt;/strong&gt; A single copy of a shared library in memory can be used by multiple programs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easier Updates:&lt;/strong&gt; To update a library, you only need to replace the shared library file; all programs that use it will automatically benefit from the update without needing to be re-linked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages of Dynamic Linking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dependencies:&lt;/strong&gt; The program will not run if the required shared libraries are not present on the system or if the version is incompatible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slightly Slower Startup:&lt;/strong&gt; There can be a minor performance overhead at startup as the dynamic linker needs to find and load the necessary shared libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-linking-process-in-action-with-gcc&#34;&gt;The Linking Process in Action with GCC
&lt;/h3&gt;&lt;p&gt;The GNU Compiler Collection (GCC) is a popular toolchain for compiling and linking C programs. The linking process can be performed as a separate step or combined with compilation.&lt;/p&gt;
&lt;p&gt;To compile a C source file (&lt;code&gt;.c&lt;/code&gt;) into an object file (&lt;code&gt;.o&lt;/code&gt;), you can use the &lt;code&gt;-c&lt;/code&gt; flag with &lt;code&gt;gcc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -c my_program.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create an object file named &lt;code&gt;my_program.o&lt;/code&gt;. If your program is split across multiple source files, you would compile each one into an object file.&lt;/p&gt;
&lt;p&gt;Once you have all the necessary object files, you can link them together to create an executable file using the &lt;code&gt;-o&lt;/code&gt; flag to specify the output file name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -o my_executable my_program.o another_file.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command tells &lt;code&gt;gcc&lt;/code&gt; to link &lt;code&gt;my_program.o&lt;/code&gt; and &lt;code&gt;another_file.o&lt;/code&gt; and create an executable file named &lt;code&gt;my_executable&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;common-linker-errors&#34;&gt;Common Linker Errors
&lt;/h3&gt;&lt;p&gt;Errors that occur during the linking phase are known as linker errors. Some of the most common linker errors include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Undefined Symbol/Undefined Reference:&lt;/strong&gt; This is the most frequent linker error. It occurs when the linker cannot find the definition for a function or variable that has been declared and used in the code. This often happens when you forget to link an object file that contains the definition or mistype a function name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Definitions:&lt;/strong&gt; This error arises when the linker finds more than one definition for the same function or variable. This can happen if you define a function in a header file that gets included in multiple source files or if you link the same object file multiple times.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, the linking process is the essential final act in the creation of a C program. By understanding how the linker works, the differences between static and dynamic linking, and how to use tools like &lt;code&gt;gcc&lt;/code&gt; to control the linking process, developers can gain a deeper insight into how their code is transformed into a runnable application and more effectively troubleshoot common errors.&lt;/p&gt;
&lt;p&gt;$&amp;gt;are there different categories of dynamic linking technique?(Gemini 2.5 pro)&lt;/p&gt;
&lt;p&gt;Yes, there are different categories of dynamic linking techniques, each with its own timing and mechanism for connecting a program to the shared libraries it needs. The main distinctions lie in &lt;em&gt;when&lt;/em&gt; the linking happens and &lt;em&gt;who&lt;/em&gt; initiates it.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a breakdown of the primary categories of dynamic linking:&lt;/p&gt;
&lt;h3 id=&#34;1-load-time-dynamic-linking-implicit-linking&#34;&gt;1. Load-Time Dynamic Linking (Implicit Linking)
&lt;/h3&gt;&lt;p&gt;This is the most common form of dynamic linking. When you compile and link your program against a shared library, the linker embeds references to that library directly into the executable file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;At compile time:&lt;/strong&gt; The linker records the names of the shared libraries the program depends on and the symbols (functions and variables) it uses from them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At load time:&lt;/strong&gt; When you run the executable, the operating system&amp;rsquo;s program loader (also known as the dynamic linker or runtime linker) reads this dependency information. It then locates the necessary shared libraries on the system, loads them into the process&amp;rsquo;s address space, and resolves all the symbol references before the program&amp;rsquo;s main function begins to execute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automatic:&lt;/strong&gt; The entire process is handled automatically by the operating system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependencies are required at startup:&lt;/strong&gt; If any of the required shared libraries are missing or incompatible, the program will fail to start.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slight startup overhead:&lt;/strong&gt; There is a small performance cost at program launch while the dynamic linker does its work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-run-time-dynamic-linking-explicit-linking-or-dynamic-loading&#34;&gt;2. Run-Time Dynamic Linking (Explicit Linking or Dynamic Loading)
&lt;/h3&gt;&lt;p&gt;This technique gives the programmer more control over the linking process. Instead of the operating system automatically loading libraries at startup, the program itself can explicitly load and unload libraries at any point during its execution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programmatic Control:&lt;/strong&gt; The program uses specific API calls (like &lt;code&gt;dlopen()&lt;/code&gt;, &lt;code&gt;dlsym()&lt;/code&gt;, and &lt;code&gt;dlclose()&lt;/code&gt; on POSIX systems, or &lt;code&gt;LoadLibrary()&lt;/code&gt;, &lt;code&gt;GetProcAddress()&lt;/code&gt;, and &lt;code&gt;FreeLibrary()&lt;/code&gt; on Windows) to manage shared libraries.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dlopen()&lt;/code&gt; or &lt;code&gt;LoadLibrary()&lt;/code&gt;: Loads a specified library into memory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dlsym()&lt;/code&gt; or &lt;code&gt;GetProcAddress()&lt;/code&gt;: Retrieves the address of a specific function or variable within the loaded library.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dlclose()&lt;/code&gt; or &lt;code&gt;FreeLibrary()&lt;/code&gt;: Unloads the library from memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; Programs can decide which libraries to load based on runtime conditions. This is the foundation for a &amp;ldquo;plugin&amp;rdquo; architecture, where new functionality can be added to a running application by loading new shared libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No startup dependency:&lt;/strong&gt; The program can start even if the optional libraries are not present. It can then check for their availability and load them if needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More complex to implement:&lt;/strong&gt; The programmer is responsible for managing the loading, symbol lookup, and unloading of libraries, which requires more code and error handling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a-special-case-lazy-linking&#34;&gt;A Special Case: Lazy Linking
&lt;/h3&gt;&lt;p&gt;Lazy linking is an optimization often used with load-time dynamic linking to improve program startup time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of resolving all function addresses when the program is first loaded, the dynamic linker defers the resolution of each function until it is actually called for the first time.&lt;/li&gt;
&lt;li&gt;The first time a function in a shared library is called, a small piece of code (a &amp;ldquo;trampoline&amp;rdquo; or &amp;ldquo;stub&amp;rdquo;) in the program&amp;rsquo;s Procedure Linkage Table (PLT) transfers control to the dynamic linker. The dynamic linker then looks up the real address of the function, patches the PLT entry to point directly to it, and then calls the function.&lt;/li&gt;
&lt;li&gt;Subsequent calls to that same function will then go directly to the function&amp;rsquo;s address without involving the dynamic linker, resulting in minimal overhead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Faster startup:&lt;/strong&gt; By avoiding the upfront cost of resolving every single function, the program can start executing more quickly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimal overhead on first call:&lt;/strong&gt; There is a small performance penalty the very first time each dynamically linked function is called.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transparent to the developer:&lt;/strong&gt; This is typically a default behavior of the dynamic linker and doesn&amp;rsquo;t require any special coding by the programmer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In essence, while &lt;strong&gt;load-time&lt;/strong&gt; and &lt;strong&gt;run-time&lt;/strong&gt; dynamic linking are the two main strategies, &lt;strong&gt;lazy linking&lt;/strong&gt; is a common optimization that fine-tunes the performance of load-time linking. The choice between these techniques depends on the specific needs of the application, balancing ease of use, startup performance, and the flexibility to load code on demand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卡特兰数，用于计算给定输入栈序列，所有可能的输出排列
&lt;/p&gt;
$$
   \frac{1}{n+1}\binom{2n}{n}=\frac{2n!}{(n+1)!n!}
   $$&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;英语-单词词根词缀分开&#34;&gt;英语-单词（词根词缀分开）
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;a vail&lt;/li&gt;
&lt;li&gt;mock&lt;/li&gt;
&lt;li&gt;gigantic&lt;/li&gt;
&lt;li&gt;zoom&lt;/li&gt;
&lt;li&gt;speci fication&lt;/li&gt;
&lt;li&gt;pa nel&lt;/li&gt;
&lt;li&gt;pre mise&lt;/li&gt;
&lt;li&gt;sovereign&lt;/li&gt;
&lt;li&gt;utter&lt;/li&gt;
&lt;li&gt;deem&lt;/li&gt;
&lt;li&gt;mono poly&lt;/li&gt;
&lt;li&gt;spec ulate&lt;/li&gt;
&lt;li&gt;con form&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0725学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0725/</link>
        <pubDate>Fri, 25 Jul 2025 20:24:54 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0725/</guid>
        <description>&lt;h2 id=&#34;操作系统-易错小知识&#34;&gt;操作系统-易错小知识
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在多个进程并发执行时，所有进程的页表大多数驻留在内存中，在系统中只设置一个页表寄存器（PTR），它存放页表在内存中的始址和长度&lt;/li&gt;
&lt;li&gt;分段方式对低级语言程序员和编译器是可见的，对高级语言程序员是透明的&lt;/li&gt;
&lt;li&gt;在这四种动态分区分配算法中，（首次适应，最坏适应，最佳适应，循环首次适应），最佳适应由于其总是会选择和待分配空间“最接近”的空闲区，因此总是会产生难以利用的小的内存块。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[tips]&lt;/code&gt;页表项的数量最好刚好填满一整个页&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数学-数列极限&#34;&gt;数学-数列极限
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一个积分小技巧,似乎跟傅里叶级数有关系，但是我没看出来（插个眼）
$$
   \begin{align*}
   \int_{0}^{\frac{\pi}{2}}{\sin^{n+1} t \text{d} t} &amp;= \left.(-\sin^nt\cdot \cos t)\right|_{0}^{\frac{\pi}{2}} - \int_{0}^{\frac{\pi}{2}}{-\cos t \text{d} \sin^n t}\\
   &amp;=n\int_{0}^{\frac{\pi}{2}}{\cos^2 t \sin^{n-1} \text{d}  t}\\
   &amp;=n\int_{0}^{\frac{\pi}{2}}{(1-\sin^2t) \sin^{n-1} \text{d}  t}\\
   \\
   \int_{0}^{\frac{\pi}{2}}{\sin^{n+1} t \text{d} t}&amp;=\frac{n}{n+1}\int_{0}^{\frac{\pi}{2}}{\sin^{n-1} t \text{d} t}
   \end{align*}
   $$&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;英语-即使是认识的单词也有不认识的词根词缀&#34;&gt;英语-即使是认识的单词也有不认识的词根词缀
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ac company&lt;/li&gt;
&lt;li&gt;mono poly&lt;/li&gt;
&lt;li&gt;di lute&lt;/li&gt;
&lt;li&gt;trans action&lt;/li&gt;
&lt;li&gt;re sent&lt;/li&gt;
&lt;li&gt;con temporary&lt;/li&gt;
&lt;li&gt;spec u late&lt;/li&gt;
&lt;li&gt;in cur&lt;/li&gt;
&lt;li&gt;im plement&lt;/li&gt;
&lt;li&gt;pro ce dure&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0721学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0721/</link>
        <pubDate>Mon, 21 Jul 2025 22:59:30 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0721/</guid>
        <description>&lt;h2 id=&#34;数据结构-代码待完善&#34;&gt;数据结构-代码(待完善)
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;栈的定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;stack.h&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define STATIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define DYNAMIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define DATATYPE void *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef STATIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define STACK_H 100
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; StaticStack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATATYPE stack[STACK_H];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max_depth;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; top;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} StaticStack;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_static_stack&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_push&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_pop&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_top&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef DYNAMIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; DynamicStack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATATYPE data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} DynamicStack;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//returns a top-pointer to a new dynamic stack
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_dynamic_stack&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_push&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_pop&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_top&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;stack.c&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stack.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef STATIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_static_stack&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STACK_H; &lt;span style=&#34;color:#75715e&#34;&gt;// Initialize depth to 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_push&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;max_depth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Static stack overflow&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Stack is full
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stack[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;(s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_pop&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Static stack underflow&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Stack is empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stack[(s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top)&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;static_stack_top&lt;/span&gt;(StaticStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Static stack is empty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Stack is empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stack[s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top]; &lt;span style=&#34;color:#75715e&#34;&gt;// Get the top value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true; &lt;span style=&#34;color:#75715e&#34;&gt;// Successfully retrieved the top value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef DYNAMIC_STACK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_dynamic_stack&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;new_stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(DynamicStack));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(new_stack &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL; &lt;span style=&#34;color:#75715e&#34;&gt;// Memory allocation failed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       new_stack&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; new_stack;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_push&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;new_item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(DynamicStack));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;new_item) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to push %d onto dynamic stack&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Memory allocation failed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_item;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_pop&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dynamic stack is empty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Stack is empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;free&lt;/span&gt;(temp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamic_stack_top&lt;/span&gt;(DynamicStack &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;top, DATATYPE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dynamic stack is empty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// Stack is empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data; &lt;span style=&#34;color:#75715e&#34;&gt;// Get the data from the top item
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true; &lt;span style=&#34;color:#75715e&#34;&gt;// Successfully retrieved the top value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}                                               
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0718学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0718/</link>
        <pubDate>Fri, 18 Jul 2025 19:23:00 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0718/</guid>
        <description>&lt;h2 id=&#34;数学&#34;&gt;数学
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;若$\lim\limits_{x\to0}f(x) = A\neq0,\lim\limits_{x\to0}h(x)=0$,且在$x\to 0$时，$h(x)\neq 0$,则
&lt;/p&gt;
$$
   \int^{h(x)}_0f(t)dt\sim Ah(x),(x\to0)
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当$x\to 0$时，$f(x) \sim ax^m,g(x)\sim bx^n,ab\neq0,m,n\in N^*$,则
&lt;/p&gt;
$$
   \int^{g(x)}_0f(t)dt\sim \int^{bx^n}_0at^mdt,(x\to0)
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以$\frac{x}{\cos x} $为例计算分式的泰勒展开：
&lt;/p&gt;
$$
   \cos x = 1 - \frac{1}{2!}x^2 + \frac{1}{4!}x^4 + ... 
   $$&lt;p&gt;
随着对分子和分母进行多项式除法，取需要的项即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时不时看看这道题：
&lt;/p&gt;
$$
   \lim\limits_{x\to0}\frac{\int_{0}^{x}{[e^{{(t-x)}^2}-1]\sin t}\text{d} t}{x
   ^2(e^{x^2}-1)}
   $$&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0717学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0717/</link>
        <pubDate>Thu, 17 Jul 2025 23:07:05 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0717/</guid>
        <description>&lt;h2 id=&#34;关于数学cool-stuff&#34;&gt;关于数学，cool stuff
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先，泰勒吧&lt;/p&gt;
&lt;p&gt;设$f(x)$在点$x=0$处$n$阶可导，则存在$x=0$的一个领域，对于该领域内的任一点$x$，有&lt;/p&gt;
$$
   f(x) = f(0) + f{&#39;}(0)x + \frac{f^{&#39;&#39;}(0)}{2!}x^2 + \frac{f^{&#39;&#39;&#39;}(0)}{3!}x^3 + ...+ \frac{f^{(n)}(0)}{n!}x^n + o(x^n)
   $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其次，记住吧&lt;/p&gt;
&lt;p&gt;一些食品级的等价无穷小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$x-\sin{x}\sim\frac{1}{6}x^3,(x\to 0)$&lt;/li&gt;
&lt;li&gt;$\text{arcsin}x-x\sim\frac{1}{6}x^3,(x\to 0)$&lt;/li&gt;
&lt;li&gt;$x-\text{arctan}x\sim\frac{1}{3}x^3,(x\to 0)$&lt;/li&gt;
&lt;li&gt;$\tan{x}-x\sim\frac{1}{3}x^3,(x\to 0)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些重要的泰勒展开&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\sin x = x - \frac{1}{3!}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;$\text{arcsin} x = x + \frac{1}{3!}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;$\cos x = 1 - \frac{1}{2!}x^2 + \frac{1}{4!}x^4 + o(x^4)$&lt;/li&gt;
&lt;li&gt;$\tan x = x + \frac{1}{3}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;$\text{arctan} x = x - \frac{1}{3}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;$\ln (x+1) = x - \frac{1}{2}x^2 + \frac{1}{3}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;$e^x =1 + x + \frac{1}{2!}x^2 + \frac{1}{3!}x^3 + o(x^3)$&lt;/li&gt;
&lt;li&gt;${(1+a)}^{\alpha} = 1 + \alpha x - \frac{\alpha(\alpha-1)}{2!}x^2 +o(x^2)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;易错栏目-时不时更新一些易错的知识点&#34;&gt;易错栏目-时不时更新一些易错的知识点
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;临界区和临界资源，以及进程处于临界区是否可以进行调度&lt;/li&gt;
&lt;li&gt;$\lim\limits_{x\to\infty}e^x$,$\lim\limits_{x\to-\infty}e^x$,$\lim\limits_{x\to+\infty}e^x$&lt;/li&gt;
&lt;li&gt;系统调用的过程，谁保存了什么上下文信息（操作系统，硬件）。&lt;/li&gt;
&lt;li&gt;安全状态，不安全状态，死锁发生的时间的关系&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0714学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0714/</link>
        <pubDate>Mon, 14 Jul 2025 21:15:16 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0714/</guid>
        <description>&lt;h2 id=&#34;朝花夕拾&#34;&gt;朝花夕拾
&lt;/h2&gt;&lt;p&gt;先回答一下昨天的疑问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;什么是用户级线程和内核级线程？&lt;/p&gt;
&lt;p&gt;以下是chatgpt编写的ULT和KLT的示例c代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;ucontext.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define STACK_SIZE 1024*64
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ucontext_t&lt;/span&gt; ctx_main, ctx_thread1, ctx_thread2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;thread_func1&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread 1: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;swapcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread1, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread2);  &lt;span style=&#34;color:#75715e&#34;&gt;// 切换到线程2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread 1 finished&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;setcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_main);  &lt;span style=&#34;color:#75715e&#34;&gt;// 结束返回主程序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;thread_func2&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread 2: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;swapcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread2, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread1);  &lt;span style=&#34;color:#75715e&#34;&gt;// 切换到线程1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread 2 finished&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;setcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_main);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; stack1[STACK_SIZE];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; stack2[STACK_SIZE];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 初始化线程1上下文
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;getcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread1.uc_stack.ss_sp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread1.uc_stack.ss_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(stack1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread1.uc_link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_main;  &lt;span style=&#34;color:#75715e&#34;&gt;// 线程结束返回主上下文
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;makecontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread1, thread_func1, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 初始化线程2上下文
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;getcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread2.uc_stack.ss_sp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread2.uc_stack.ss_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(stack2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx_thread2.uc_link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_main;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;makecontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread2, thread_func2, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 从主线程切换到线程1开始执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;swapcontext&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_main, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx_thread1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Main finished&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func1&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; arg) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pthread func1: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);  &lt;span style=&#34;color:#75715e&#34;&gt;// 模拟阻塞
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func2&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; arg) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pthread func2: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pthread_t&lt;/span&gt; t1, t2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_create&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;t1, NULL, func1, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_create&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;t2, NULL, func2, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_join&lt;/span&gt;(t1, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_join&lt;/span&gt;(t2, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All pthreads finished&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看出，实际上ULT是在模拟KLT的实现思想，其调度和上下文切换都是用户程序自己显式实现的，但对于系统来说这仅仅是一个进程而已。那看来多对多的模型就是先申请多个内核，再在每个内核内使用ULT编程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PCB都包含什么？&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;类别&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;信息&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;进程标识信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;PID（进程ID）、PPID（父进程ID）、UID（用户ID）、GID（组ID）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;进程状态&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;就绪、运行、等待、终止等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;寄存器现场&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;程序计数器（PC）、栈指针（SP）、通用寄存器等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;内存管理信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;代码段、数据段、堆、栈、页表指针&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;调度信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;优先级、时间片、调度队列信息、调度策略（如 SCHED_NORMAL）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;文件系统信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;文件描述符表、当前工作目录、打开文件列表&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;会计信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;CPU时间、用户时间、系统时间、起始时间&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;信号处理信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;信号屏蔽字、信号处理函数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;其他资源信息&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;IPC 资源（消息队列、共享内存）、网络信息等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;等配一个linux docker 用命令行敲一下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访管中断和自陷指令有和关系？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;自陷指令&lt;/th&gt;
          &lt;th&gt;访管中断&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;CPU 支持的汇编指令&lt;/strong&gt;，用于产生陷入&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;操作系统级的概念&lt;/strong&gt;，指的是进程通过自陷调用系统服务&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;比如：&lt;code&gt;int 0x80&lt;/code&gt;（x86）、&lt;code&gt;svc&lt;/code&gt;（ARM）、&lt;code&gt;ecall&lt;/code&gt;（RISC-V）&lt;/td&gt;
          &lt;td&gt;访管中断就是&lt;strong&gt;自陷指令触发的中断，用来“访问管态（内核态）”服务&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;本质是硬件机制&lt;/td&gt;
          &lt;td&gt;本质是软件设计&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;“访管中断”是&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“用自陷指令引发的，主动请求操作系统服务的中断”。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;数学&#34;&gt;数学
&lt;/h2&gt;&lt;h3 id=&#34;三角函数大家族&#34;&gt;三角函数大家族
&lt;/h3&gt;&lt;p&gt;一些恒等式
&lt;/p&gt;
$$
\sin^2{\theta} + \cos^2{\theta} = 1
$$&lt;p&gt;
&lt;/p&gt;
$$
1 + \tan^2{\theta} = \sec^2{\theta}
$$&lt;p&gt;
&lt;/p&gt;
$$
1 + \cot^2{\theta} = \csc^2{\theta}
$$&lt;p&gt;
&lt;/p&gt;
$$
\sin(\arcsin{x}) = x(x\in[-1,1])
$$&lt;p&gt;
&lt;/p&gt;
$$
\sin(\arccos{x}) = \sqrt{1-x^2}(x\in[-1,1])
$$&lt;p&gt;
&lt;/p&gt;
$$
\cos(\arccos{x}) = x(x\in[-1,1])
$$&lt;p&gt;
&lt;/p&gt;
$$
\cos(\arcsin{x}) = \sqrt{1-x^2}(x\in[-1,1])
$$&lt;h3 id=&#34;双曲正弦余弦函数&#34;&gt;双曲正弦/余弦函数
&lt;/h3&gt;&lt;p&gt;双曲正弦函数
&lt;/p&gt;
$$
\sinh{x} = \frac{e^x-e^{-x}}{2}
$$&lt;p&gt;
反双曲正弦函数
&lt;/p&gt;
$$
	\text{arcsinh}\ {x} = \ln(x+\sqrt{1+x^2})
$$&lt;p&gt;
&lt;/p&gt;
$$
\text{arcsinh}&#39;\ {x} = \frac{1}{\sqrt{1+x^2}}
$$&lt;p&gt;
双曲余弦函数
&lt;/p&gt;
$$
\cosh{x} = \frac{e^x+e^{-x}}{2}
$$&lt;p&gt;
反双曲余弦函数
&lt;/p&gt;
$$
\text{arccosh}\ {x} = \ln(x+\sqrt{x^2-1}),\ x\geq 1\\
$$$$
	\text{arccosh}&#39;\ {x} = \frac{1}{\sqrt{x^2-1}},\ x&gt;1
$$&lt;p&gt;双曲正切函数
&lt;/p&gt;
$$
\tanh{x} = \frac{\sinh{x}}{\cosh{x}}=\frac{e^x-e^{-x}}{e^x+e^{-x}}
$$&lt;p&gt;
反双曲正切函数
&lt;/p&gt;
$$
\text{arctanh}\ {x} = \frac{1}{2}\ln(\frac{1+x}{1-x}),\ x\in(-1,1)
$$$$
	\text{arctanh}&#39;\ {x} = \frac{1}{1-x^2}
$$</description>
        </item>
        <item>
        <title>0713学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0713/</link>
        <pubDate>Sun, 13 Jul 2025 23:27:16 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0713/</guid>
        <description>&lt;p&gt;今天看来是无法解决所有当下的疑问了，故先列出清单：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是用户级线程和内核级线程？&lt;/li&gt;
&lt;li&gt;PCB都包含什么？&lt;/li&gt;
&lt;li&gt;访管中断和自陷指令有和关系？&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0712学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0712/</link>
        <pubDate>Sat, 12 Jul 2025 23:17:40 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0712/</guid>
        <description>&lt;h2 id=&#34;操作系统&#34;&gt;操作系统
&lt;/h2&gt;&lt;h3 id=&#34;系统调用&#34;&gt;系统调用
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;功能
&lt;ul&gt;
&lt;li&gt;设备管理：设备的启动、请求和释放等。&lt;/li&gt;
&lt;li&gt;文件管理：文件的读写、创建和删除等。&lt;/li&gt;
&lt;li&gt;进程管理：进程的创建、撤销、阻塞和唤醒等。&lt;/li&gt;
&lt;li&gt;进程通信：进程之间的消息或信号的传递等。&lt;/li&gt;
&lt;li&gt;内存管理：内存的分配、回收以及获取作业占用内存区大小和起始地址等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理过程
&lt;ol&gt;
&lt;li&gt;用户程序将系统调用号和所需的参数压入堆栈；接着，调用实际的调用指令，然后执行一个陷入指令，将CPU从用户态转为核心态；再由硬件和操作系统内核程序保护被中断进程的现场。将程序计数器PC、程序状态字PSW及通用寄存器内容压入堆栈。&lt;/li&gt;
&lt;li&gt;分析系统调用类型，转入相应的系统调用处理子程序。在系统中配置了一张系统调用入口表，表中的每个表项都对应一个系统调用，根据系统调用号找到该系统调用处理子程序的入口地址。&lt;/li&gt;
&lt;li&gt;在系统调用处理子程序执行结束后，恢复被中断的或设置新进程的CPU现场，然后返回被中断进程或新进程，继续往下执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
