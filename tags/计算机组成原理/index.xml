<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>计算机组成原理 on shyの考研日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</link>
        <description>Recent content in 计算机组成原理 on shyの考研日志</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 09 Sep 2025 10:56:39 +0800</lastBuildDate><atom:link href="https://auroraemiya.github.io/npee_learning_log.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>0909学习日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0909/</link>
        <pubDate>Tue, 09 Sep 2025 10:56:39 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0909/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理-总线&#34;&gt;计算机组成原理-总线
&lt;/h2&gt;&lt;h3 id=&#34;总线概述&#34;&gt;总线概述
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;总线基本概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;总线定义
&lt;ul&gt;
&lt;li&gt;分时和共享是总线的两个特点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总线设备
&lt;ol&gt;
&lt;li&gt;主设备&lt;/li&gt;
&lt;li&gt;从设备&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;总线特性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总线的分类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按功能层次分类
&lt;ol&gt;
&lt;li&gt;片内总线&lt;/li&gt;
&lt;li&gt;系统总线
&lt;ol&gt;
&lt;li&gt;数据总线&lt;/li&gt;
&lt;li&gt;地址总线&lt;/li&gt;
&lt;li&gt;控制总线&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I/O总线&lt;/li&gt;
&lt;li&gt;通信总线&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按时序控制方式分类
&lt;ol&gt;
&lt;li&gt;同步总线&lt;/li&gt;
&lt;li&gt;异步总线&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按数据传输方式分类
&lt;ol&gt;
&lt;li&gt;串行总线&lt;/li&gt;
&lt;li&gt;并行总线&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统总线的结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单总线&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：结构简单，成本低，易于接入新的设备&lt;/li&gt;
&lt;li&gt;缺点：带宽低、负载重，多个部件争用唯一的总线，且不支持开发传送操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双总线结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：将低速IO设备从原单线上分离出来，实现了存储器总线和IO总线分离&lt;/li&gt;
&lt;li&gt;缺点：需要增加通道等硬件设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三总线结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：提高了IO设备的性能，使其更快的响应命令，提高系统吞吐量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：任意时刻只能使用一种总线，系统工作效率降低&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总线的性能指标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;总线时钟周期&lt;/li&gt;
&lt;li&gt;总线时钟频率&lt;/li&gt;
&lt;li&gt;总线传输周期：一次总线操作所需的时间，包括申请阶段、寻址阶段、传输阶段和结束阶段。通常由若干个时钟周期构成。&lt;/li&gt;
&lt;li&gt;总线工作频率&lt;/li&gt;
&lt;li&gt;总线宽度&lt;/li&gt;
&lt;li&gt;总线带宽&lt;/li&gt;
&lt;li&gt;总线复用&lt;/li&gt;
&lt;li&gt;信号线束&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总线最主要的性能指标为总线宽度、总线的工作频率，总线带宽&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总线事物和定时&#34;&gt;总线事物和定时
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;总线事物&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请求阶段。主设备（CPU或DMA）发出总线传输请求，并且获得总线控制权&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;仲裁阶段。主线仲裁机构决定将下一个传输周期的总线使用权授予某个申请者&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寻址阶段。主设备通过总线给出要访问的从设备地址及有关命令，启动从模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传输阶段。主模块和从模块进行数据交换，可单向或双向进行数据传输&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;释放阶段。主模块的有关信息均从系统总线上撤除，让出总线使用权。&lt;/p&gt;
&lt;p&gt;突发（猝发）能够进行连续成组数据的传送。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总线定时&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;同步定时方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：传送速度快，具有较高的传输速率；总线控制逻辑简单&lt;/li&gt;
&lt;li&gt;缺点：主从设备属于强制性同步；不能及时进行数据通信的有效性检验，可靠性差。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异步定时方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：总线周期长度可变，能保证两个工作速度相差很大的部件或设备之间可靠性地进行信息交换，自动适应时间的配合&lt;/li&gt;
&lt;li&gt;缺点：比同步控制方式稍复杂一些，速度比同步较慢&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据”请求“和”回答“信号的撤销是否互锁，异步定时方式又分为7以下三种类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不互锁方式&lt;/li&gt;
&lt;li&gt;半互锁方式&lt;/li&gt;
&lt;li&gt;全互锁方式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;半同步定时方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：控制方式比异步定时简单，各模块在系统时钟的控制下同步工作，可靠性较高&lt;/li&gt;
&lt;li&gt;缺点：系统时钟频率不能要求太高，所以从整体上看，系统工作的速度不是很高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分离式定时方式&lt;/p&gt;
&lt;p&gt;将总线事务分解为请求和应答两个子过程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：在不传送数据时释放总线，使总线可接受其他设备的请求，不存在空闲等待时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：控制复杂，开销也大&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0908学习日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0908/</link>
        <pubDate>Tue, 09 Sep 2025 10:56:33 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0908/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理&#34;&gt;计算机组成原理
&lt;/h2&gt;&lt;h3 id=&#34;指令流水线&#34;&gt;指令流水线
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指令流水线的基本概念&lt;/p&gt;
&lt;p&gt;时间上的并行技术：流水线技术&lt;/p&gt;
&lt;p&gt;空间上的并行技术：超标量处理机&lt;/p&gt;
&lt;p&gt;假设一条指令的执行过程分为如下5个阶段（功能段或流水段）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取指（IF）：从指令存储器或Cache中取指令&lt;/li&gt;
&lt;li&gt;译码/读寄存器（ID）：操作控制器对指令进行译码，同时从寄存器堆中取操作数&lt;/li&gt;
&lt;li&gt;执行/计算地址（EX）：执行运算操作或计算地址&lt;/li&gt;
&lt;li&gt;访存（MEM）：对存储器进行读/写操作&lt;/li&gt;
&lt;li&gt;写回（WB）：将指令执行结果写回寄存器堆&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了利于实现指令流水线，指令集应具有如下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令长度应尽量一致，有利于简化取指令和指令译码操作。&lt;/li&gt;
&lt;li&gt;指令格式应尽量规整，尽量保证源寄存器的位置相同。&lt;/li&gt;
&lt;li&gt;采用LOAD/STORE型指令，其他指令不能访问存储器，这样可把LOAD/SZTORE指令的地址计算和运算指令的执行步骤规整在一个周期中。&lt;/li&gt;
&lt;li&gt;数据和指令在存储器中”按边界对齐“存放。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流水线的基本实现&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;流水线设计的原则
&lt;ol&gt;
&lt;li&gt;指令流水段个数以最复杂指令所用的功能段个数为准&lt;/li&gt;
&lt;li&gt;流水段的长度以最复杂的操作所花的时间为准&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;流水线的逻辑结构&lt;/li&gt;
&lt;li&gt;流水线的时空图表示&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流水线的冒险与处理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;结构冒险&lt;/li&gt;
&lt;li&gt;数据冒险
&lt;ol&gt;
&lt;li&gt;RAW
&lt;ul&gt;
&lt;li&gt;延迟执行相关指令&lt;/li&gt;
&lt;li&gt;采用转发（旁路）技术&lt;/li&gt;
&lt;li&gt;load-use数据冒险处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WAR&lt;/li&gt;
&lt;li&gt;WAW&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;控制冒险&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流水线的性能指标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;流水线的吞吐率（n是任务数，$T_k$是处理完n个任务所用的总时间，k为流水线的段数）
&lt;/p&gt;
$$
      TP = \frac{n}{T_k}
      $$&lt;p&gt;
$\Delta t$为时钟周期。在输入流水线中的任务连续的理想情况下，一条$k$段流水线能在$k+n-1$
&lt;/p&gt;
$$
      TP = \lim\limits_{n\to \infty} \frac{n}{(k+n-1)\Delta t} = \frac{1}{\Delta t}
      $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流水线的加速比
&lt;/p&gt;
$$
      S = \frac{T_0}{T_k}
      $$&lt;p&gt;
一条k段流水线完成n个任务所需的时间为$T_k=(k+n-1)\Delta t$。顺序执行n个任务时,所需的总时间为 $T_0=kn\Delta t$
&lt;/p&gt;
$$
      S = \frac{kn\Delta t}{(k+n-1)\Delta t}
      $$$$
      S_{\lim\limits_{n\to \infty}} = k
      $$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高级流水线技术&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;超标量流水线技术（多发射技术）&lt;/li&gt;
&lt;li&gt;超长指令字技术&lt;/li&gt;
&lt;li&gt;超流水线技术&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;多处理器的基本概念&#34;&gt;多处理器的基本概念
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;SISD，SIMD，MIMD的基本概念
&lt;ol&gt;
&lt;li&gt;单指令流单数据流（SISD）结构&lt;/li&gt;
&lt;li&gt;单指令流多数据流（SIMD）结构&lt;/li&gt;
&lt;li&gt;多指令流单数据流（MISD）结构（不存在）&lt;/li&gt;
&lt;li&gt;多指令流多数据流（MIMD）结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;硬件多线程的基本概念
&lt;ol&gt;
&lt;li&gt;细粒度多线程&lt;/li&gt;
&lt;li&gt;粗粒度多线程&lt;/li&gt;
&lt;li&gt;同时多线程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;多核处理器的基本概念&lt;/li&gt;
&lt;li&gt;共享内存多处理器的基本概念
&lt;ul&gt;
&lt;li&gt;统一存储访问（UMA）多处理器&lt;/li&gt;
&lt;li&gt;非统一存储访问（NUMA）多处理器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0907学习日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0907/</link>
        <pubDate>Sun, 07 Sep 2025 23:32:48 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0907/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理-中央处理器&#34;&gt;计算机组成原理-中央处理器
&lt;/h2&gt;&lt;h3 id=&#34;cpu的功能和基本结构&#34;&gt;CPU的功能和基本结构
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;CPU的功能
&lt;ol&gt;
&lt;li&gt;指令控制：取指令、分析指令和执行指令&lt;/li&gt;
&lt;li&gt;操作控制&lt;/li&gt;
&lt;li&gt;时间控制&lt;/li&gt;
&lt;li&gt;数据加工&lt;/li&gt;
&lt;li&gt;中断处理&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;CPU的基本结构
&lt;ol&gt;
&lt;li&gt;运算器
&lt;ul&gt;
&lt;li&gt;ALU&lt;/li&gt;
&lt;li&gt;暂存寄存器&lt;/li&gt;
&lt;li&gt;累加寄存器ACC&lt;/li&gt;
&lt;li&gt;通用寄存器GPRs&lt;/li&gt;
&lt;li&gt;程序状态字寄存器PSW&lt;/li&gt;
&lt;li&gt;移位寄存器&lt;/li&gt;
&lt;li&gt;计数器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制器
&lt;ul&gt;
&lt;li&gt;PC&lt;/li&gt;
&lt;li&gt;指令寄存器IR&lt;/li&gt;
&lt;li&gt;指令译码器ID&lt;/li&gt;
&lt;li&gt;存储器地址寄存器MAR&lt;/li&gt;
&lt;li&gt;存储器数据寄存器MDR&lt;/li&gt;
&lt;li&gt;时序电路&lt;/li&gt;
&lt;li&gt;微操作信号发生器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;CPU的寄存器
&lt;ol&gt;
&lt;li&gt;运算器的寄存器
&lt;ol&gt;
&lt;li&gt;通用寄存器组GPRs&lt;/li&gt;
&lt;li&gt;累加从寄存器ACC&lt;/li&gt;
&lt;li&gt;移位寄存器SR&lt;/li&gt;
&lt;li&gt;暂存寄存器&lt;/li&gt;
&lt;li&gt;程序状态字寄存器PSW&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;控制器中的寄存器
&lt;ol&gt;
&lt;li&gt;程序计数器PC&lt;/li&gt;
&lt;li&gt;指令寄存器IR&lt;/li&gt;
&lt;li&gt;存储器地址寄存器MAR&lt;/li&gt;
&lt;li&gt;存储器数据寄存器MDR&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;指令执行过程&#34;&gt;指令执行过程
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指令周期&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定长的机器周期&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;取值周期&lt;/th&gt;
          &lt;th&gt;间址周期（取有效地址）&lt;/th&gt;
          &lt;th&gt;执行周期（执行指令）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不定长的机器周期&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;取值周期&lt;/th&gt;
          &lt;th&gt;执行周期&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令周期的数据流&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;取值周期&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PC - MAR - 地址总线 - 存储器&lt;/li&gt;
&lt;li&gt;CU 发出读命令 - 控制总线 - 存储器&lt;/li&gt;
&lt;li&gt;主存 - 数据总线 - MDR - IR&lt;/li&gt;
&lt;li&gt;CU 发出控制信号 - PC内容加1&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;间址周期&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ad(IR)或MDR - MAR -  地址总线 - 存储器&lt;/li&gt;
&lt;li&gt;CU发出读命令 - 控制总线 - 存储器&lt;/li&gt;
&lt;li&gt;主存 - 数据总线 - MDR (EA)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行周期&lt;/p&gt;
&lt;p&gt;取操作数，根据IR中的指令字的操作码通过ALU操作产生执行结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中断周期&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CU 控制将SP-1(stack pointer)，SP - MAR - 地址总线-存储器&lt;/li&gt;
&lt;li&gt;CU 发出写命令 - 控制总线 - 存储器&lt;/li&gt;
&lt;li&gt;PC - MDR - 数据总线 - 主存 （程序断电存入存储器）&lt;/li&gt;
&lt;li&gt;CU （中断服务程序的入口地址）- PC&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令执行方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单周期处理器&lt;/p&gt;
&lt;p&gt;所有指令相同执行时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多周期处理器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流水线处理器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数据通路的功能和基本结构&#34;&gt;数据通路的功能和基本结构
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据通路的功能&lt;/li&gt;
&lt;li&gt;数据通路的组成
&lt;ol&gt;
&lt;li&gt;组合逻辑元件（操作元件）&lt;/li&gt;
&lt;li&gt;时序逻辑元件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据通路的基本结构
&lt;ol&gt;
&lt;li&gt;CPU内部单总线方式&lt;/li&gt;
&lt;li&gt;CPU内部多总线方式&lt;/li&gt;
&lt;li&gt;专用数据通路方式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;控制器的功能和工作原理&#34;&gt;控制器的功能和工作原理
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;控制器的结构和功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬布线控制器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微程序控制器&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;微程序控制的基本概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;微命令与微操作&lt;/li&gt;
&lt;li&gt;微指令与微周期&lt;/li&gt;
&lt;li&gt;主存储器与控制存储器&lt;/li&gt;
&lt;li&gt;程序与微程序&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微程序控制器的组成和工作过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;微程序控制器的组成和工作过程&lt;/li&gt;
&lt;li&gt;微程序控制器的工作过程&lt;/li&gt;
&lt;li&gt;微程序和机器指令&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微指令的编码方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接编码（直接控制）方式&lt;/li&gt;
&lt;li&gt;字段直接编码方式&lt;/li&gt;
&lt;li&gt;字段间接编码方式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微指令的地址形成方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;微指令的后继地址字段（下地址字段）&lt;/li&gt;
&lt;li&gt;根据机器指令的操作码形成。&lt;/li&gt;
&lt;li&gt;增量计数器法&lt;/li&gt;
&lt;li&gt;根据各种标志决定下一条微指令分支转移的地址&lt;/li&gt;
&lt;li&gt;友硬件直接产生微程序入口地址。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微指令的格式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;水平型微指令&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;A1&lt;/th&gt;
          &lt;th&gt;A2&lt;/th&gt;
          &lt;th&gt;&amp;hellip;&lt;/th&gt;
          &lt;th&gt;An-1&lt;/th&gt;
          &lt;th&gt;An&lt;/th&gt;
          &lt;th&gt;判断测试字段&lt;/th&gt;
          &lt;th&gt;后继地址字段&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;操作控制&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;顺序控制&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;垂直型微指令&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;$\mu$OP&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Rd&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Rs&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;微操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;目的地址&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;源地址&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬布线和微程序控制器的特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;硬布线控制器的特点&lt;/li&gt;
&lt;li&gt;微程序控制器的特点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;异常和中断机制&#34;&gt;异常和中断机制
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;异常和中断的基本概念
&lt;ol&gt;
&lt;li&gt;异常：由CPU内部产生的意外事件。a.k.a内中断&lt;/li&gt;
&lt;li&gt;中断：由来自CPU外部的设备向CPU发出的中断请求。a.k.a外中断。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;异常和中断的分类
&lt;ol&gt;
&lt;li&gt;异常的分类
&lt;ol&gt;
&lt;li&gt;故障Fault&lt;/li&gt;
&lt;li&gt;自陷Trap&lt;/li&gt;
&lt;li&gt;终止Abort&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;中断的分类
&lt;ol&gt;
&lt;li&gt;可屏蔽中断&lt;/li&gt;
&lt;li&gt;不可屏蔽中断&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;异常和中断响应过程
&lt;ol&gt;
&lt;li&gt;关中断&lt;/li&gt;
&lt;li&gt;保存断点和程序状态&lt;/li&gt;
&lt;li&gt;识别异常和中断并转到相应的处理程序
&lt;ol&gt;
&lt;li&gt;软件识别方式：CPU设置一个异常状态寄存器&lt;/li&gt;
&lt;li&gt;硬件识别a.k.a向量中断&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0906学习日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0906/</link>
        <pubDate>Sun, 07 Sep 2025 23:32:42 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0906/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理-死去的risc-v突然攻击我&#34;&gt;计算机组成原理-死去的RISC-V突然攻击我
&lt;/h2&gt;&lt;h3 id=&#34;程序的机器级代码表示&#34;&gt;程序的机器级代码表示
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;常用汇编指令介绍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;相关寄存器&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;16bit&lt;/th&gt;
          &lt;th&gt;32bit&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;AX&lt;/td&gt;
          &lt;td&gt;EAX&lt;/td&gt;
          &lt;td&gt;累加器（Accumulator）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;BX&lt;/td&gt;
          &lt;td&gt;EBX&lt;/td&gt;
          &lt;td&gt;基地址寄存器(Base Register)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;CX&lt;/td&gt;
          &lt;td&gt;ECX&lt;/td&gt;
          &lt;td&gt;计数寄存器(Count Register)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;DX&lt;/td&gt;
          &lt;td&gt;EDX&lt;/td&gt;
          &lt;td&gt;数据寄存器(Data Register)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;ESI&lt;/td&gt;
          &lt;td&gt;变址寄存器(Index Register)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;EDI&lt;/td&gt;
          &lt;td&gt;变址寄存器(Index Register)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;EBP&lt;/td&gt;
          &lt;td&gt;堆栈基指针(Base Pointer)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;ESP&lt;/td&gt;
          &lt;td&gt;堆栈顶指针(Stack Pointer)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;汇编指令格式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;AT&amp;amp;T 格式简介&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主要用于 &lt;strong&gt;GNU Assembler (GAS)&lt;/strong&gt;，即 &lt;code&gt;gcc&lt;/code&gt; 默认输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法较“繁琐”，但严格、明确，容易让编译器处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点：寄存器有 &lt;code&gt;%&lt;/code&gt; 前缀，立即数 &lt;code&gt;$&lt;/code&gt; 前缀，操作数顺序是 &lt;code&gt;源, 目的&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;movl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$5&lt;/span&gt;, %eax      &lt;span style=&#34;color:#75715e&#34;&gt;# 把立即数 5 移动到 eax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addl&lt;/span&gt; %eax, %ebx    &lt;span style=&#34;color:#75715e&#34;&gt;# ebx = ebx + eax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;movl&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;(%ebp), %ecx &lt;span style=&#34;color:#75715e&#34;&gt;# 从 [ebp+8] 取数到 ecx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intel 格式简介&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常见于 &lt;strong&gt;MASM / NASM / Windows 平台&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更接近高级语言风格，简洁直观，广泛用于手写汇编和逆向分析。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点：操作数顺序 &lt;code&gt;目的, 源&lt;/code&gt;，寄存器无 &lt;code&gt;%&lt;/code&gt;，立即数直接写，内存寻址用 &lt;code&gt;[]&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;; 把立即数 5 移动到 eax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;; ebx = ebx + eax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]    &lt;span style=&#34;color:#75715e&#34;&gt;; 从 [ebp+8] 取数到 ecx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对比表：AT&amp;amp;T vs Intel 汇编格式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特点&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;AT&amp;amp;T 格式&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Intel 格式&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;操作数顺序&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;源, 目的&lt;/td&gt;
          &lt;td&gt;目的, 源&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;寄存器&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;%eax&lt;/code&gt;、&lt;code&gt;%ebx&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;eax&lt;/code&gt;、&lt;code&gt;ebx&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;立即数&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;$5&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;内存寻址&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;disp(base, index, scale)&lt;/code&gt; → &lt;code&gt;8(%ebp, %ecx, 4)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;[base + index*scale + disp]&lt;/code&gt; → &lt;code&gt;[ebp + ecx*4 + 8]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;操作数大小&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;指令后缀：&lt;code&gt;b&lt;/code&gt;=8位, &lt;code&gt;w&lt;/code&gt;=16位, &lt;code&gt;l&lt;/code&gt;=32位, &lt;code&gt;q&lt;/code&gt;=64位&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;byte ptr&lt;/code&gt;, &lt;code&gt;word ptr&lt;/code&gt;, &lt;code&gt;dword ptr&lt;/code&gt;, &lt;code&gt;qword ptr&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;符号/变量&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;movl $var, %eax&lt;/code&gt; (取地址)  &lt;code&gt;movl var, %eax&lt;/code&gt; (取值)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;mov eax, offset var&lt;/code&gt; (取地址)  &lt;code&gt;mov eax, [var]&lt;/code&gt; (取值)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;汇编器&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;GNU Assembler (&lt;code&gt;gas&lt;/code&gt;)&lt;/td&gt;
          &lt;td&gt;MASM, NASM, FASM 等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;常见平台&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Linux/Unix 系统&lt;/td&gt;
          &lt;td&gt;Windows、逆向工程&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;reg&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;mem&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;con&amp;gt;,&amp;lt;con32&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;数据传送指令
&lt;ol&gt;
&lt;li&gt;mov&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;pop&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;算术和逻辑运算指令
&lt;ol&gt;
&lt;li&gt;add/sub&lt;/li&gt;
&lt;li&gt;inc/dec&lt;/li&gt;
&lt;li&gt;imul&lt;/li&gt;
&lt;li&gt;idiv&lt;/li&gt;
&lt;li&gt;and/or/xor&lt;/li&gt;
&lt;li&gt;not&lt;/li&gt;
&lt;li&gt;neg&lt;/li&gt;
&lt;li&gt;shl/shr&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;控制流指令
&lt;ol&gt;
&lt;li&gt;jmp&lt;/li&gt;
&lt;li&gt;jcondition: je,jz,jne,jg,jge,jl,jle&lt;/li&gt;
&lt;li&gt;cmp/test&lt;/li&gt;
&lt;li&gt;call/ret&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择语句的机器级表示&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudocode&#34; data-lang=&#34;pseudocode&#34;&gt;if(test_expr)
	then_statement
else
	else_statement
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudocode&#34; data-lang=&#34;pseudocode&#34;&gt;t=test_expr
if(!t)
	goto false;
then_statement
goto done;
false:
else_statement
done;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环语句的机器级表示&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;do-while&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudocode&#34; data-lang=&#34;pseudocode&#34;&gt;do 
	body_statement
	while(test_expr);
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudocode&#34; data-lang=&#34;pseudocode&#34;&gt;loop:
body_statement
t=test_expr;
if(t)
	goto loop;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;while&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudocode&#34; data-lang=&#34;pseudocode&#34;&gt;while(test_expr)
	body_statement
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudocode&#34; data-lang=&#34;pseudocode&#34;&gt;t=test_expr;
if(!t)
	goto done;
loop:
body_statement;
t=test_expr;
if(t)
	goto loop;
done:
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudocode&#34; data-lang=&#34;pseudocode&#34;&gt;for(init_expr;test_expr;update_expr)
	body_statement
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudocode&#34; data-lang=&#34;pseudocode&#34;&gt;init_expr;
t=test_expr;
if(!t)
	goto done;
loop:
body_statement
update_expr;
t=test_expr;
if(t)
	goto loop;
done:
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过程调用的机器级表示&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;cisc和risc的基本概念&#34;&gt;CISC和RISC的基本概念
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;复杂指令系统计算机(CISC)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特点：指令集复杂，每条指令可以完成较复杂的操作，指令长度不固定。&lt;/li&gt;
&lt;li&gt;设计理念：&lt;strong&gt;软件简单化，把更多功能交给硬件来完成&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;常见架构：x86、VAX、68000。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;精简指令系统计算机(RISC)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特点：指令集简单，每条指令长度固定，执行时间大多相同。&lt;/li&gt;
&lt;li&gt;设计理念：&lt;strong&gt;硬件简单化，指令执行快，依靠编译器优化来实现复杂功能&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;常见架构：ARM、MIPS、RISC-V、SPARC。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CISC和RISC的比较&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特点&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;RISC&lt;/strong&gt;（精简指令集）&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;CISC&lt;/strong&gt;（复杂指令集）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;指令数量&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;少，指令集精简&lt;/td&gt;
          &lt;td&gt;多，指令功能复杂&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;指令长度&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;固定（常见 32 位）&lt;/td&gt;
          &lt;td&gt;不固定（8～120 字节不等）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;指令执行时间&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;大多数指令 1 个时钟周期&lt;/td&gt;
          &lt;td&gt;指令执行时间差别大&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;寻址方式&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;少（常 3～5 种）&lt;/td&gt;
          &lt;td&gt;多（十几种甚至几十种）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;硬件复杂度&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;控制器一般为硬布线（简单）&lt;/td&gt;
          &lt;td&gt;控制器常为微程序（复杂）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;编译器依赖性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;高，复杂操作要由编译器分解&lt;/td&gt;
          &lt;td&gt;低，硬件可直接完成复杂操作&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;性能优化方式&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;通过流水线、寄存器优化&lt;/td&gt;
          &lt;td&gt;通过复杂指令减少代码长度&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;代表架构&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;ARM、MIPS、RISC-V&lt;/td&gt;
          &lt;td&gt;x86、Intel 8086、VAX&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;代码密度&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;代码长（指令多）&lt;/td&gt;
          &lt;td&gt;代码短（指令少，但复杂）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0904学习日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0904/</link>
        <pubDate>Fri, 05 Sep 2025 23:42:41 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0904/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理&#34;&gt;计算机组成原理
&lt;/h2&gt;&lt;h3 id=&#34;指令系统&#34;&gt;指令系统
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指令集体系结构（ISA）&lt;/p&gt;
&lt;p&gt;ISA规定的内容主要包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指令格式，指令寻址方式，操作类型，以及每种操作对应的操作数的相应规定&lt;/li&gt;
&lt;li&gt;操作数的类型，操作数寻址方式，以及是按大段方式还是小端方式&lt;/li&gt;
&lt;li&gt;程序可访问的寄存器编号、个数和位数，存储空间的大小和编址方式&lt;/li&gt;
&lt;li&gt;指令执行过程的控制方式等，包括程序计数器、条件码定义等&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令的基本格式&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作码字段&lt;/th&gt;
          &lt;th&gt;地址码字段&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;定长指令字结构，变长指令字结构。主存一般是按字节编址的，所以指令字长通常为字节的整数倍。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;零地址指令&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;OP&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一地址指令&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;OP&lt;/th&gt;
          &lt;th&gt;$A_1$&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二地址指令&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;OP&lt;/th&gt;
          &lt;th&gt;$A_1$&lt;/th&gt;
          &lt;th&gt;$A_2$&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三地址指令&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;OP&lt;/th&gt;
          &lt;th&gt;$A_1$&lt;/th&gt;
          &lt;th&gt;$A_2$&lt;/th&gt;
          &lt;th&gt;$A_3$（结果）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四地址指令&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;OP&lt;/th&gt;
          &lt;th&gt;$A_1$&lt;/th&gt;
          &lt;th&gt;$A_2$&lt;/th&gt;
          &lt;th&gt;$A_3$（结果）&lt;/th&gt;
          &lt;th&gt;$A_4$（下址）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定长操作码指令格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展操作码指令格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令的操作类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据传送MOV，LOAD，STORE，PUSH，POP&lt;/li&gt;
&lt;li&gt;算数和逻辑运算ADD，SUB，MUL，DIV，INC，DEC，AND，OR，NOT，XOR&lt;/li&gt;
&lt;li&gt;移位操作&lt;/li&gt;
&lt;li&gt;转移操作JMP，BRANCH，CALL，RET，TRAP&lt;/li&gt;
&lt;li&gt;输入输出操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;指令的寻址方式&#34;&gt;指令的寻址方式
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指令寻址和数据寻址&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指令寻址&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;顺序寻址PC+1&lt;/li&gt;
&lt;li&gt;跳跃寻址&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据寻址&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作码&lt;/th&gt;
          &lt;th&gt;寻址特征&lt;/th&gt;
          &lt;th&gt;形式地址A&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见的数据寻址方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;隐含寻址&lt;/li&gt;
&lt;li&gt;立即（数）寻址&lt;/li&gt;
&lt;li&gt;直接寻址&lt;/li&gt;
&lt;li&gt;间接寻址&lt;/li&gt;
&lt;li&gt;寄存器寻址EA=$R_i$&lt;/li&gt;
&lt;li&gt;寄存器间接寻址&lt;/li&gt;
&lt;li&gt;相对寻址&lt;/li&gt;
&lt;li&gt;基址寻址&lt;/li&gt;
&lt;li&gt;变址寻址&lt;/li&gt;
&lt;li&gt;堆栈寻址&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;寻址方式&lt;/th&gt;
          &lt;th&gt;有效地址&lt;/th&gt;
          &lt;th&gt;访存次数&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;立即寻址&lt;/td&gt;
          &lt;td&gt;A即是操作数&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;直接寻址&lt;/td&gt;
          &lt;td&gt;EA=A&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;一次性间接寻址&lt;/td&gt;
          &lt;td&gt;EA=(A)&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;寄存器寻址&lt;/td&gt;
          &lt;td&gt;EA=$R_i$&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;寄存器间接一次寻址&lt;/td&gt;
          &lt;td&gt;EA=($R_i$)&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;相对寻址&lt;/td&gt;
          &lt;td&gt;EA=(PC)+A&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;基址寻址&lt;/td&gt;
          &lt;td&gt;EA=(BR)+A&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;变址寻址&lt;/td&gt;
          &lt;td&gt;EA=(IX)+A&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0903学习日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0903/</link>
        <pubDate>Fri, 05 Sep 2025 23:00:46 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0903/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理&#34;&gt;计算机组成原理
&lt;/h2&gt;&lt;h3 id=&#34;虚拟存储器&#34;&gt;虚拟存储器
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;基本概念&lt;/li&gt;
&lt;li&gt;页式虚拟存储器
&lt;ol&gt;
&lt;li&gt;页表&lt;/li&gt;
&lt;li&gt;地址转换&lt;/li&gt;
&lt;li&gt;快表(TLB translation lookaside buffer)&lt;/li&gt;
&lt;li&gt;具有TLB和Cache的多级存储系统&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;段式虚拟存储器&lt;/li&gt;
&lt;li&gt;段页式虚拟存储器&lt;/li&gt;
&lt;li&gt;虚拟存储器与Cache的比较
&lt;ol&gt;
&lt;li&gt;相同之处
&lt;ul&gt;
&lt;li&gt;最终目标都是为了提高系统性能，两者都有容量、速度、价格的梯度&lt;/li&gt;
&lt;li&gt;都把数据划分为小信息块，并作为基本的交换单位，虚存系统的信息块更大&lt;/li&gt;
&lt;li&gt;都有地址映射、替换算法、更新策略等问题&lt;/li&gt;
&lt;li&gt;都依据局部性原理应用快速缓存的思想，将活跃的数据放在相对高速的部件中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不同之处
&lt;ul&gt;
&lt;li&gt;Cache主要解决系统速度，而虚拟存储器却是为了解决主存容量&lt;/li&gt;
&lt;li&gt;Cache全由硬件实现，是硬件存储器，对所有程序员透明；而虚拟存储器由OS和硬件共同实现，是逻辑上的存储器，对系统程序员不透明，但对应用程序员透明&lt;/li&gt;
&lt;li&gt;对于不命中性能影响， 因为CPU的速度约为Cache的10倍，主存的速度为硬件的100倍以上，因此虚拟存储器系统不命中时对系统性能影响更大&lt;/li&gt;
&lt;li&gt;CPU与Cache和主存都建立了直接访问通道，而辅存与CPU没有直接通路。也就是说在Cache不命中时能和CPU直接通信，同时将数据调入Cache；而虚拟存储器系统不命中时，只能先由硬盘调入主存，而不能直接和CPU通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0902学习日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0902/</link>
        <pubDate>Wed, 03 Sep 2025 22:37:10 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0902/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理&#34;&gt;计算机组成原理
&lt;/h2&gt;&lt;h3 id=&#34;主存储器与cpu的连接&#34;&gt;主存储器与CPU的连接
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;连接原理：
&lt;ul&gt;
&lt;li&gt;主存储器通过数据总线、地址总线和控制总线与CPU连接&lt;/li&gt;
&lt;li&gt;数据总线的位数与工作频率的乘积正比于数据传输速率&lt;/li&gt;
&lt;li&gt;地址总线的位数决定了可寻址的最大内存空间&lt;/li&gt;
&lt;li&gt;控制总线(读/写)指出总线周期的类型和本次输入/输出操作完成的时刻&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主存容量的扩展
&lt;ul&gt;
&lt;li&gt;位扩展法&lt;/li&gt;
&lt;li&gt;字扩展法&lt;/li&gt;
&lt;li&gt;位字同时扩展法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存储芯片的地址分配和片选
&lt;ul&gt;
&lt;li&gt;线选法&lt;/li&gt;
&lt;li&gt;译码片选法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存储器与CPU的连接
&lt;ul&gt;
&lt;li&gt;合理选择存储芯片&lt;/li&gt;
&lt;li&gt;地址线的连接(cpu的地址线通常比芯片的地址线多，地位连接，高位片选)&lt;/li&gt;
&lt;li&gt;数据线的连接&lt;/li&gt;
&lt;li&gt;读写命令线的连接&lt;/li&gt;
&lt;li&gt;片选线的连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;外部存储器&#34;&gt;外部存储器
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;磁盘存储器&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁盘驱动器&lt;/li&gt;
&lt;li&gt;磁盘控制器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储区域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁头数&lt;/li&gt;
&lt;li&gt;柱面数&lt;/li&gt;
&lt;li&gt;扇区数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录密度&lt;/li&gt;
&lt;li&gt;磁盘的容量 = 记录面数 * 柱面数* 每道扇区数 * 每个扇区的容量&lt;/li&gt;
&lt;li&gt;存取时间&lt;/li&gt;
&lt;li&gt;数据传输速率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁盘地址&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;柱面号（磁道号）&lt;/th&gt;
          &lt;th&gt;盘面号（磁头）&lt;/th&gt;
          &lt;th&gt;扇区号&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁盘的工作过程&lt;/p&gt;
&lt;p&gt;寻址、读盘、写盘。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;取控制字&lt;/li&gt;
&lt;li&gt;执行控制字&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁盘阵列（RAID）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RAID0：无冗余和无校验的磁盘阵列&lt;/li&gt;
&lt;li&gt;RAID1：镜像磁盘阵列&lt;/li&gt;
&lt;li&gt;RAID2：采用纠错的海明码的磁盘阵列&lt;/li&gt;
&lt;li&gt;RAID3：位交叉奇偶校验的磁盘阵列&lt;/li&gt;
&lt;li&gt;RAID4：块交叉奇偶校验的磁盘阵列&lt;/li&gt;
&lt;li&gt;RAID5：无独立校验的奇偶校验磁盘阵列&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;固态硬盘（SSD）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;劣势：随机写很慢，擦除块较慢&lt;/li&gt;
&lt;li&gt;优势：
&lt;ol&gt;
&lt;li&gt;半导体存储器，没有移动部件，随机访问速度比磁盘块很多，无噪音和震动；&lt;/li&gt;
&lt;li&gt;能耗低，抗震性好，安全性高&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;磨损均衡
&lt;ol&gt;
&lt;li&gt;动态磨损均衡&lt;/li&gt;
&lt;li&gt;静态磨损均衡（操作系统重合知识点）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;高速缓冲存储器cache&#34;&gt;高速缓冲存储器Cache
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;程序访问的局部性原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache的基本工作原理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当CPU发出读请求时：若命中，则将访存地址转换成Cache地址。直接对Cache进行读操作；否则，需要访问主存，并把此字所在的块一次性的从主存调入Cache。若满，则根据某种替换算法，用这个块替换。整个过程由硬件实现。&lt;/li&gt;
&lt;li&gt;当CPU发出写请求时：若命中，有可能会遇到Cache与主存中的内容不一致的问题。需要按照一定的写策略进行处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache的命中率计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache和主存的映射方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直接映射&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;标记&lt;/th&gt;
          &lt;th&gt;Cache行号&lt;/th&gt;
          &lt;th&gt;块内地址&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全相联映射&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;标记&lt;/th&gt;
          &lt;th&gt;块内地址&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组相联映射&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;标记&lt;/th&gt;
          &lt;th&gt;组号&lt;/th&gt;
          &lt;th&gt;块内地址&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache中主存块的替换算法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;随机算法&lt;/li&gt;
&lt;li&gt;FIFO算法&lt;/li&gt;
&lt;li&gt;LRU算法&lt;/li&gt;
&lt;li&gt;最不经常使用算法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache的一致性问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;全写法（直写法、write-through）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写缓冲&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回写法（wirte-back）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脏位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写分配法(write-allocate)（写不命中）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非写分配法(not-write-allocate)（写不命中）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​&lt;/p&gt;
</description>
        </item>
        <item>
        <title>0901学习日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0901/</link>
        <pubDate>Wed, 03 Sep 2025 22:21:06 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0901/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理-存储系统&#34;&gt;计算机组成原理-存储系统
&lt;/h2&gt;&lt;h3 id=&#34;存储器的分类&#34;&gt;存储器的分类
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;按作用（层次）分类
&lt;ol&gt;
&lt;li&gt;主存储器&lt;/li&gt;
&lt;li&gt;辅助存储器&lt;/li&gt;
&lt;li&gt;高速缓冲存储器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按存储介质分类
&lt;ol&gt;
&lt;li&gt;随机存储器RAM&lt;/li&gt;
&lt;li&gt;只读存储器ROM&lt;/li&gt;
&lt;li&gt;串行访问存储器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按信息的可保存性分类
&lt;ol&gt;
&lt;li&gt;易失性存储器&lt;/li&gt;
&lt;li&gt;非易失性存储器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;存储器的性能指标&#34;&gt;存储器的性能指标
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;存储容量&lt;/li&gt;
&lt;li&gt;单位成本&lt;/li&gt;
&lt;li&gt;存储速度&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;多级层次的存储系统&#34;&gt;多级层次的存储系统
&lt;/h3&gt;&lt;p&gt;主要思想：上一层的存储器作为低一层存储器的高速缓存&lt;/p&gt;
&lt;h3 id=&#34;sram芯片和dram芯片&#34;&gt;SRAM芯片和DRAM芯片
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SRAM芯片的工作原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DRAM芯片的工作原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DRAM芯片的读写周期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SRAM和DRAM的比较&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储芯片的内部结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;只读存储器&#34;&gt;只读存储器
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;只读存储器的特点&lt;/li&gt;
&lt;li&gt;ROM的类型
&lt;ol&gt;
&lt;li&gt;掩模式只读存储器MROM&lt;/li&gt;
&lt;li&gt;一次可编程只读存储器PROM&lt;/li&gt;
&lt;li&gt;可擦除可编程只读存储器EPROM&lt;/li&gt;
&lt;li&gt;Flash存储器&lt;/li&gt;
&lt;li&gt;固态硬盘&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;主存储器的基本组成&#34;&gt;主存储器的基本组成
&lt;/h3&gt;&lt;h3 id=&#34;多模块存储器&#34;&gt;多模块存储器
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;单体多字存储器&lt;/li&gt;
&lt;li&gt;多体并行存储器
&lt;ol&gt;
&lt;li&gt;高位交叉编址&lt;/li&gt;
&lt;li&gt;低位交叉编址&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;马克思主义原理&#34;&gt;马克思主义原理
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;考点一：什么是马克思主义？&lt;/li&gt;
&lt;li&gt;考点二：马克思注意产生的社会根源、阶级基础和思想渊源&lt;/li&gt;
&lt;li&gt;考点三：马克思主义的发展&lt;/li&gt;
&lt;li&gt;考点四：马克思主义的中国化时代化&lt;/li&gt;
&lt;li&gt;考点五：习近平新时代中国特色社会主义思想的世界观和方法论&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0827.1学习日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0827.1/</link>
        <pubDate>Wed, 27 Aug 2025 19:12:07 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0827.1/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理&#34;&gt;计算机组成原理
&lt;/h2&gt;&lt;h3 id=&#34;数据的表示和运算&#34;&gt;数据的表示和运算
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进位计数制及其相互转换&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进位计数法&lt;/li&gt;
&lt;li&gt;不同进制之间的相互转换（十进制小数转换为二进制小数）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定点数的编码表示&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;真值与机器数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;机器数的定点表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定点小数&lt;/li&gt;
&lt;li&gt;定点整数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原码&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最高位为符号位，对于一个n+1位的原码数，其表示范围为.
&lt;/p&gt;
$$
         -(2^n-1)\leq x \leq 2^n-1
         $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单直观&lt;/li&gt;
&lt;li&gt;乘除实现简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0表示不唯一&lt;/li&gt;
&lt;li&gt;加减法复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;补码&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义（n位）
&lt;/p&gt;
$$
         [x]_{\text{补}}= (2^n + x )\mod2^n
         $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负数补码的方法：最高位为1，各位取反，末位加1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变形补码：双符号位&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移码&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整数的表示&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无符号整数&lt;/li&gt;
&lt;li&gt;有符号整数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C语言中的整数类型及类型转换&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;有符号无符号转换&lt;/p&gt;
&lt;p&gt;机器数不变，解释方式发生改变&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同字长&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;0扩展&lt;/li&gt;
&lt;li&gt;符号扩展&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运算方法和运算电路&#34;&gt;运算方法和运算电路
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本运算部件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带标志加法器&lt;/li&gt;
&lt;li&gt;算数逻辑单元(ALU )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定点数的位移运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑移位&lt;/li&gt;
&lt;li&gt;算术移位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定点数的加减运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;补码的加减运算&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;逢二进一&lt;/li&gt;
&lt;li&gt;加法，补码直接相加；减法，被减数与-减数的补码相加。&lt;/li&gt;
&lt;li&gt;符号位一起参与运算&lt;/li&gt;
&lt;li&gt;最终结果高位丢弃&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;溢出判别方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一位符号位&lt;/p&gt;
&lt;p&gt;操作数符号相同且与结果不同，即溢出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双符号位&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;00：正数，无溢出&lt;/li&gt;
&lt;li&gt;01：正数，溢出&lt;/li&gt;
&lt;li&gt;11：负数，无溢出&lt;/li&gt;
&lt;li&gt;10：负数，溢出&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用一位符号位根据数值位的进位情况判断溢出&lt;/p&gt;
&lt;p&gt;符号位的进位与最高数位的进位相同，则无溢出，否则溢出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加减运算电路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CF&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OF&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ZF&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SF&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定点数的乘除运算&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定点乘法运算
&lt;ul&gt;
&lt;li&gt;基本原理&lt;/li&gt;
&lt;li&gt;乘法运算电路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;除法运算
&lt;ul&gt;
&lt;li&gt;基本原理&lt;/li&gt;
&lt;li&gt;除法运算电路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0818学习笔记</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0818/</link>
        <pubDate>Mon, 18 Aug 2025 14:04:16 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0818/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理&#34;&gt;计算机组成原理
&lt;/h2&gt;&lt;h3 id=&#34;朝花夕拾&#34;&gt;朝花夕拾
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;机器字长、指令字长、存储字长：
&lt;ul&gt;
&lt;li&gt;机器字长等于CPU内部的运算器位数和通用寄存器宽度。&lt;/li&gt;
&lt;li&gt;一个存储单元中的位数称为存储字长。&lt;/li&gt;
&lt;li&gt;指令字长取决于指令的功能和格式，可以单字长、半字长或双字长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;即使是相同的高级语言程序在不同的计算机上进行编译生成的机器指令条数也有可能不同。&lt;/li&gt;
&lt;li&gt;IR,MAR,MDR是CPU内部工作状态寄存器，对程序员透明（不可见）。&lt;/li&gt;
&lt;li&gt;时钟频率不会影响CPI。&lt;/li&gt;
&lt;li&gt;字长也是评价计算机系统性能的指标。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>0813学习日志</title>
        <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0813/</link>
        <pubDate>Wed, 13 Aug 2025 09:45:22 +0800</pubDate>
        
        <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0813/</guid>
        <description>&lt;h2 id=&#34;计算机组成原理&#34;&gt;计算机组成原理
&lt;/h2&gt;&lt;h3 id=&#34;计算机系统概述&#34;&gt;计算机系统概述
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;冯诺依曼计算机的特点
&lt;ol&gt;
&lt;li&gt;采用“存储程序”的工作方式&lt;/li&gt;
&lt;li&gt;计算机硬件系统由运算器、存储器、控制器、输入设备和输出设备五大设备类型&lt;/li&gt;
&lt;li&gt;指令和数据以同等地位存储在存储器中，形式上没有任何区别，但计算机应能区分它们&lt;/li&gt;
&lt;li&gt;指令和数据均用二进制代码表示&lt;/li&gt;
&lt;li&gt;指令由操作码和地址码组成，操作码指出操作的类型，地址码指出操作数的地址&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;计算机的功能部件
&lt;ol&gt;
&lt;li&gt;输入设备&lt;/li&gt;
&lt;li&gt;输出设备&lt;/li&gt;
&lt;li&gt;存储器&lt;/li&gt;
&lt;li&gt;运算器&lt;/li&gt;
&lt;li&gt;控制器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;计算机软件
&lt;ol&gt;
&lt;li&gt;系统软件和应用软件&lt;/li&gt;
&lt;li&gt;三个级别的语言&lt;/li&gt;
&lt;li&gt;软件和硬件的逻辑功能等价性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;计算机系统的层次结构
&lt;ol&gt;
&lt;li&gt;微程序机器层&lt;/li&gt;
&lt;li&gt;传统机器语言层&lt;/li&gt;
&lt;li&gt;操作系统层&lt;/li&gt;
&lt;li&gt;汇编语言层&lt;/li&gt;
&lt;li&gt;高级语言层&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;计算机系统的工作原理
&lt;ol&gt;
&lt;li&gt;“存储程序”工作方式&lt;/li&gt;
&lt;li&gt;从源文件到可执行文件*
&lt;ol&gt;
&lt;li&gt;预处理阶段(pre process)&lt;/li&gt;
&lt;li&gt;编译阶段(compile)&lt;/li&gt;
&lt;li&gt;汇编阶段(assemble)&lt;/li&gt;
&lt;li&gt;链接阶段(link)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;指令执行过程的描述
&lt;ol&gt;
&lt;li&gt;取指令&lt;/li&gt;
&lt;li&gt;分析指令&lt;/li&gt;
&lt;li&gt;执行指令&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;计算机的性能指标&#34;&gt;计算机的性能指标
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;计算机的主要性能指标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;机器字长&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据通路带宽&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主存容量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运算速度&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;吞吐量和响应时间&lt;/li&gt;
&lt;li&gt;主频和CPU时钟周期&lt;/li&gt;
&lt;li&gt;CPI(Cycle per Instruction)&lt;/li&gt;
&lt;li&gt;IPS(Instruction per Second)&lt;/li&gt;
&lt;li&gt;CPU执行时间 = CPU时钟周期数/主频 = （指令条数/CPI）/主频&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;CPU的性能取决于三个要素：&lt;strong&gt;主频、CPI和指令条数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;MIPS(Million Instruction per Second) = 指令条数/(执行时间*$10^6$)&lt;/li&gt;
&lt;li&gt;FLOPS(Floating-point Operations Per Second)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基准程序(benchmark)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
