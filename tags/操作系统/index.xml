<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>操作系统 on shyの考研日志</title>
    <link>https://auroraemiya.github.io/npee_learning_log.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 操作系统 on shyの考研日志</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 26 Jul 2025 11:19:57 +0800</lastBuildDate>
    <atom:link href="https://auroraemiya.github.io/npee_learning_log.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>0726学习笔记</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0726/</link>
      <pubDate>Sat, 26 Jul 2025 11:19:57 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0726/</guid>
      <description>&lt;h2 id=&#34;操作系统-一些易错知识点&#34;&gt;操作系统-一些易错知识点&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在计算平均访存时间时要注意快表TLB和页表的访问是&lt;strong&gt;串行&lt;/strong&gt;还是并行的，也要注意页表是&lt;strong&gt;单级&lt;/strong&gt;还是多级的&lt;/li&gt;&#xA;&lt;li&gt;虚拟存储器的&lt;strong&gt;最大容量&lt;/strong&gt;只和计算机的地址结构决定，&lt;strong&gt;实际容量&lt;/strong&gt;和内存和外存有关&lt;/li&gt;&#xA;&lt;li&gt;工作集不是驻留集的子集，只是数量要小于（不大于）驻留集的大小&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;一些你需要搞明白的概念：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;链接，包括静态和动态&lt;/p&gt;&#xA;&lt;p&gt;链接是将不同编译单元及其依赖库整合到一个统一逻辑地址空间的过程。根据发生时间不同，链接分为：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;静态链接&lt;/strong&gt;：在编译阶段将所有代码打包进可执行文件中；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;动态链接&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;加载时链接（Load-Time Linking）&lt;/strong&gt;：程序加载时操作系统自动加载依赖库；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;运行时链接（Run-Time Linking）&lt;/strong&gt;：程序运行过程中手动加载库，例如通过 &lt;code&gt;dlopen()&lt;/code&gt; 等函数调用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;类别&lt;/th&gt;&#xA;          &lt;th&gt;链接时间&lt;/th&gt;&#xA;          &lt;th&gt;控制方式&lt;/th&gt;&#xA;          &lt;th&gt;示例函数&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;静态链接&lt;/td&gt;&#xA;          &lt;td&gt;编译/链接阶段&lt;/td&gt;&#xA;          &lt;td&gt;编译器自动处理&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;动态链接（加载时）&lt;/td&gt;&#xA;          &lt;td&gt;程序加载阶段&lt;/td&gt;&#xA;          &lt;td&gt;操作系统自动处理&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;动态链接（运行时）&lt;/td&gt;&#xA;          &lt;td&gt;程序运行阶段&lt;/td&gt;&#xA;          &lt;td&gt;程序员手动调用&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;dlopen&lt;/code&gt;, &lt;code&gt;dlsym&lt;/code&gt; 等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;$&amp;gt;dive into the procedure of linking of a C code program(Gemini 2.5 pro)&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-final-step-unraveling-the-linking-process-of-a-c-program&#34;&gt;The Final Step: Unraveling the Linking Process of a C Program&lt;/h3&gt;&#xA;&lt;p&gt;The journey from human-readable C code to an executable program culminates in a crucial, often-overlooked stage: linking. This final step in the compilation process is where all the disparate pieces of your program are brought together to create a single, functional executable file. The linker, a key component of the C toolchain, orchestrates this assembly, resolving references between different parts of your code and incorporating necessary library functions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>0722学习日志</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0722/</link>
      <pubDate>Tue, 22 Jul 2025 23:31:50 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0722/</guid>
      <description>&lt;h2 id=&#34;操作系统--la-pa-ca&#34;&gt;操作系统- (LA-PA-CA)&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;带快表的两级系统的地址翻译过程&#xA;&lt;ol&gt;&#xA;&lt;li&gt;从逻辑地址映射到物理地址（虚拟存储器）&lt;/li&gt;&#xA;&lt;li&gt;从物理地址映射到Cache地址（主存-Cache系统）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;文件和文件系统&#xA;&lt;ol&gt;&#xA;&lt;li&gt;构成文件的基本单位&lt;/li&gt;&#xA;&lt;li&gt;文件的定义&lt;/li&gt;&#xA;&lt;li&gt;文件属性&lt;/li&gt;&#xA;&lt;li&gt;文件的基本操作&lt;/li&gt;&#xA;&lt;li&gt;文件的打开和关闭的操作&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;文件的逻辑结构&lt;/li&gt;&#xA;&lt;li&gt;目录管理&#xA;&lt;ol&gt;&#xA;&lt;li&gt;目录的概念&lt;/li&gt;&#xA;&lt;li&gt;文件控制块和索引节点&lt;/li&gt;&#xA;&lt;li&gt;目录结构&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;英语-vocabularybuilder&#34;&gt;英语-VocabularyBuilder&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;CRIM,comes from the Latin words for &amp;ldquo;fault or crime&amp;rdquo; or &amp;ldquo;accusation.&amp;rdquo;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;criminology&lt;/li&gt;&#xA;&lt;li&gt;decriminalize&lt;/li&gt;&#xA;&lt;li&gt;incriminate&lt;/li&gt;&#xA;&lt;li&gt;recrimination&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;PROB,comes from the Latin words for  &amp;ldquo;prove or proof &amp;ldquo;and &amp;ldquo;honesy or integrity.&amp;rdquo;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;approbation&lt;/li&gt;&#xA;&lt;li&gt;probate&lt;/li&gt;&#xA;&lt;li&gt;probity&lt;/li&gt;&#xA;&lt;li&gt;reprobate&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;GRAV, comes from the Latin word meaning &amp;ldquo;heavy ,weighty ,serious&amp;rdquo;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;grave&lt;/li&gt;&#xA;&lt;li&gt;gravitas&lt;/li&gt;&#xA;&lt;li&gt;gravitate&lt;/li&gt;&#xA;&lt;li&gt;aggravate&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;LEV,comes from the Latin adjective $levis$,meaning &amp;ldquo;light&amp;rdquo;,and the verb $levare$,meaning &amp;ldquo;to raise or lighten.&amp;rdquo;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;alleviate&lt;/li&gt;&#xA;&lt;li&gt;elevation&lt;/li&gt;&#xA;&lt;li&gt;contilever&lt;/li&gt;&#xA;&lt;li&gt;levity&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;数学-行列式&#34;&gt;数学-行列式&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;行列式的本质定义&lt;/p&gt;</description>
    </item>
    <item>
      <title>0721学习日志</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0721/</link>
      <pubDate>Mon, 21 Jul 2025 17:53:02 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0721/</guid>
      <description>&lt;h2 id=&#34;英语-vocabulary-builder&#34;&gt;英语-vocabulary builder&lt;/h2&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;The Merriam-Webster Vocabulary Builder&lt;/code&gt;作为词根法扩充词汇量的工具书(由网友canon提供)&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;BENE , latin for &lt;code&gt;well&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;benediction&lt;/li&gt;&#xA;&lt;li&gt;benefactor&lt;/li&gt;&#xA;&lt;li&gt;benefaciary&lt;/li&gt;&#xA;&lt;li&gt;benevolence&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;AM, comes form the latin &lt;code&gt;admare&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;amicable&lt;/li&gt;&#xA;&lt;li&gt;enamored&lt;/li&gt;&#xA;&lt;li&gt;amorous&lt;/li&gt;&#xA;&lt;li&gt;paramour&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;BELL,comes from the latin word meaning &lt;code&gt;war&lt;/code&gt;.Bellona was the little-known goddess of war .&#xA;&lt;ul&gt;&#xA;&lt;li&gt;antebellum&lt;/li&gt;&#xA;&lt;li&gt;belligerence&lt;/li&gt;&#xA;&lt;li&gt;bellicose&lt;/li&gt;&#xA;&lt;li&gt;rebellion&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;PAC,is related to the Latin words for &amp;ldquo;agree&amp;rdquo; and &amp;ldquo;peace&amp;rdquo;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pacify&lt;/li&gt;&#xA;&lt;li&gt;pacifist&lt;/li&gt;&#xA;&lt;li&gt;pact&lt;/li&gt;&#xA;&lt;li&gt;pace&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;操作系统-page--segment&#34;&gt;操作系统-page &amp;amp; segment&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;基本分页内存&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;page&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;page frame&lt;/li&gt;&#xA;&lt;li&gt;page table&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;页号&lt;/th&gt;&#xA;          &lt;th&gt;页内偏移量&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;虚拟地址 = 页号 + 页内偏移&lt;/p&gt;</description>
    </item>
    <item>
      <title>0719学习日志</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0719/</link>
      <pubDate>Sat, 19 Jul 2025 22:41:19 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0719/</guid>
      <description>&lt;h2 id=&#34;数学-是不动点的味道&#34;&gt;数学-是不动点的味道&lt;/h2&gt;&#xA;&lt;h3 id=&#34;数列的极限&#34;&gt;数列的极限&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;概念&lt;/li&gt;&#xA;&lt;li&gt;数列极限的定义&lt;/li&gt;&#xA;&lt;li&gt;数列收敛的性质&#xA;&lt;ul&gt;&#xA;&lt;li&gt;唯一性&lt;/li&gt;&#xA;&lt;li&gt;有界性&lt;/li&gt;&#xA;&lt;li&gt;保号性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;海涅定理（归结原则）&lt;/li&gt;&#xA;&lt;li&gt;夹逼准则&lt;/li&gt;&#xA;&lt;li&gt;单调有界准则&lt;/li&gt;&#xA;&lt;li&gt;${x_n}$收敛于$a$的速度问题&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;数据结构-前序中序后序blablabla&#34;&gt;数据结构-前序中序后序blablabla&lt;/h2&gt;&#xA;&lt;h3 id=&#34;树的性质&#34;&gt;树的性质&lt;/h3&gt;&#xA;&lt;p&gt;let $T_m$ denote a tree with degree $m$.&lt;/p&gt;&#xA;&lt;p&gt;let $D(n)$ denote the out degree of the node $x$ in the tree $T_m$.&lt;/p&gt;&#xA;&lt;p&gt;let $n_i$ denote the number of notes with degree $i$.&lt;/p&gt;&#xA;&lt;p&gt;let $H$ denote the depth/height of the tree $T_m$.&lt;/p&gt;&#xA;&lt;p&gt;let $N$ denote the total number of nodes in tree.$N=\sum\limits_{i=0}^mn_i$.&lt;/p&gt;&#xA;&lt;p&gt;let $N_i$ denote the number of nodes at layer $i\in \mathcal{N^*}$&lt;/p&gt;</description>
    </item>
    <item>
      <title>0715学习日志</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0715/</link>
      <pubDate>Tue, 15 Jul 2025 21:43:17 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0715/</guid>
      <description>&lt;h2 id=&#34;操作系统-jyy的map永远的噩梦&#34;&gt;操作系统-jyy的map永远的噩梦&lt;/h2&gt;&#xA;&lt;h3 id=&#34;死锁&#34;&gt;死锁&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;死锁的必要条件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;互斥条件&lt;/li&gt;&#xA;&lt;li&gt;请求和保持条件&lt;/li&gt;&#xA;&lt;li&gt;不可剥夺条件&lt;/li&gt;&#xA;&lt;li&gt;循环等待条件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;预防死锁的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;破坏互斥：非但不能破坏还要保护&lt;/li&gt;&#xA;&lt;li&gt;破坏不可剥夺条件&lt;/li&gt;&#xA;&lt;li&gt;破坏请求和保持条件&lt;/li&gt;&#xA;&lt;li&gt;破坏循环等待条件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;死锁避免&#xA;&lt;ol&gt;&#xA;&lt;li&gt;安全状态&lt;/li&gt;&#xA;&lt;li&gt;银行家算法&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;死锁检测和解除&#xA;&lt;ul&gt;&#xA;&lt;li&gt;资源分配图&lt;/li&gt;&#xA;&lt;li&gt;死锁定理&lt;/li&gt;&#xA;&lt;li&gt;死锁的解除&#xA;&lt;ul&gt;&#xA;&lt;li&gt;剥夺资源&lt;/li&gt;&#xA;&lt;li&gt;撤销进程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;内存管理&#34;&gt;内存管理&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;基本概念&#xA;&lt;ol&gt;&#xA;&lt;li&gt;逻辑地址&lt;/li&gt;&#xA;&lt;li&gt;物理地址&lt;/li&gt;&#xA;&lt;li&gt;外部碎片&lt;/li&gt;&#xA;&lt;li&gt;内部碎片&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;内存连续分配管理方式&#xA;&lt;ol&gt;&#xA;&lt;li&gt;单一连续分配&lt;/li&gt;&#xA;&lt;li&gt;固定分区分配&lt;/li&gt;&#xA;&lt;li&gt;动态分区分配&#xA;&lt;ol&gt;&#xA;&lt;li&gt;首次适应FF&lt;/li&gt;&#xA;&lt;li&gt;循环首次适应NF&lt;/li&gt;&#xA;&lt;li&gt;最佳适应BF&lt;/li&gt;&#xA;&lt;li&gt;最坏适应WF&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;课程编号016-018&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;数学-什么超实数&#34;&gt;数学-什么？！超实数？&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;函数极限的概念与性质&lt;/li&gt;&#xA;&lt;li&gt;超实数&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;课程编号第一讲&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>0714学习日志</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0714/</link>
      <pubDate>Mon, 14 Jul 2025 21:15:02 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0714/</guid>
      <description>&lt;h2 id=&#34;操作系统-这什么查一下这什么查一下&#34;&gt;操作系统-这什么查一下这什么查一下&lt;/h2&gt;&#xA;&lt;h3 id=&#34;经典同步问题&#34;&gt;经典同步问题&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;生产者消费者问题&lt;/li&gt;&#xA;&lt;li&gt;哲学家进餐问题&lt;/li&gt;&#xA;&lt;li&gt;读者-写者问题&lt;/li&gt;&#xA;&lt;li&gt;理发师问题&lt;/li&gt;&#xA;&lt;li&gt;抽烟者问题&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;处理机调度&#34;&gt;处理机调度&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;处理及调度的层次&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;高级调度（作业调度、长程调度）&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;作业选择&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从**后备队列（外存中等待的作业）**中选择作业&lt;/li&gt;&#xA;&lt;li&gt;判断系统资源（内存、CPU、I/O）是否充足&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;资源分配&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为选中的作业分配内存、I/O、文件等资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;进程创建&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将作业转化为一个或多个&lt;strong&gt;进程&lt;/strong&gt;，放入就绪队列&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;中级调度（内存调度、中程调度）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;选择部分进程挂起（移出内存到外存）&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;选择挂起的进程恢复（从外存调回内存）&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;低级调度（进程调度、线程调度、短程调度）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从&lt;strong&gt;就绪队列&lt;/strong&gt;中选择一个进程&lt;/li&gt;&#xA;&lt;li&gt;把 CPU 分配给选中的进程&lt;/li&gt;&#xA;&lt;li&gt;保存和恢复进程的上下文（&lt;strong&gt;进程切换 Context Switch&lt;/strong&gt;）&lt;/li&gt;&#xA;&lt;li&gt;控制 CPU 的执行顺序&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;处理机的调度方式&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;非抢占式&lt;/li&gt;&#xA;&lt;li&gt;抢占式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;选择调度算法的若干准则&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CPU利用率&lt;/p&gt;&#xA;$$&#xA;     \frac{\text{worktime of CPU}}{\text{total time}}&#xA;     $$&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;系统吞吐量&lt;/p&gt;&#xA;$$&#xA;     \frac{\text{number of tasks}}{\text{total time}}&#xA;     $$&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;周转时间(Turnaround Time)&lt;/p&gt;&#xA;$$&#xA;     \text{Completion Time - Arrival Time}&#xA;     $$&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;平均周转时间&lt;/p&gt;&#xA;$$&#xA;     \frac{\sum\limits_{N}\text{Turnaround Time of all processes}}{N}&#xA;     $$&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;带权周转时间&lt;/p&gt;&#xA;$$&#xA;     \frac{\text{Turnaround Time}}{\text{Service Time}}&#xA;     $$&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;平均带权周转时间&lt;/p&gt;</description>
    </item>
    <item>
      <title>0713学习日志</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0713/</link>
      <pubDate>Sun, 13 Jul 2025 23:27:16 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0713/</guid>
      <description>&lt;h2 id=&#34;数据结构-喜欢在头指针存数据的扣1&#34;&gt;数据结构-喜欢在头指针存数据的扣1&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;线性表的链式存储&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;单链表&lt;/li&gt;&#xA;&lt;li&gt;静态链表&lt;/li&gt;&#xA;&lt;li&gt;其他链表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单向循环链表&lt;/li&gt;&#xA;&lt;li&gt;双向链表&lt;/li&gt;&#xA;&lt;li&gt;双向循环链表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;课程代码010-013&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;操作系统-谦让是美德&#34;&gt;操作系统-谦让是美德&lt;/h2&gt;&#xA;&lt;h3 id=&#34;进程与线程&#34;&gt;进程与线程&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;PCB&lt;/li&gt;&#xA;&lt;li&gt;进程的特点：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;动态性&lt;/li&gt;&#xA;&lt;li&gt;并发性&lt;/li&gt;&#xA;&lt;li&gt;独立性&lt;/li&gt;&#xA;&lt;li&gt;异步性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;进程的基本状态及管理切换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;运行&lt;/li&gt;&#xA;&lt;li&gt;阻塞&lt;/li&gt;&#xA;&lt;li&gt;就绪&lt;/li&gt;&#xA;&lt;li&gt;创建&lt;/li&gt;&#xA;&lt;li&gt;终止&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;线程的特性&lt;/li&gt;&#xA;&lt;li&gt;线程的状态&lt;/li&gt;&#xA;&lt;li&gt;线程与进程的联系和不同&lt;/li&gt;&#xA;&lt;li&gt;用户级线程与内核级线程的映射关系&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;互斥与同步&#34;&gt;互斥与同步&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;临界区实现互斥的原则&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;空闲让进&lt;/li&gt;&#xA;&lt;li&gt;忙则等待&lt;/li&gt;&#xA;&lt;li&gt;有限等待&lt;/li&gt;&#xA;&lt;li&gt;让权等待（非必须）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;临界区实现互斥的基本方法&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;软件实现方法&#xA;&lt;ol&gt;&#xA;&lt;li&gt;单标志法&lt;/li&gt;&#xA;&lt;li&gt;双标志法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;先检查法&lt;/li&gt;&#xA;&lt;li&gt;后检查法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Peterson算法&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;硬件实现方法&#xA;&lt;ol&gt;&#xA;&lt;li&gt;中断屏蔽&lt;/li&gt;&#xA;&lt;li&gt;TestAndSet指令&lt;/li&gt;&#xA;&lt;li&gt;Swap指令&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;互斥锁（mutex lock）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;LockOne类&lt;/li&gt;&#xA;&lt;li&gt;LockTwo类&lt;/li&gt;&#xA;&lt;li&gt;Peterson锁&lt;/li&gt;&#xA;&lt;li&gt;Barkley锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;信号量&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;整型信号量&lt;/li&gt;&#xA;&lt;li&gt;记录型信号量&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;管程&#34;&gt;管程&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;管程的定义&lt;/li&gt;&#xA;&lt;li&gt;管程的组成&lt;/li&gt;&#xA;&lt;li&gt;管程的特性&lt;/li&gt;&#xA;&lt;li&gt;管程与进程的异同&lt;/li&gt;&#xA;&lt;li&gt;条件变量&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;进程通信&#34;&gt;进程通信&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;管道通信&lt;/li&gt;&#xA;&lt;li&gt;消息传递系统&lt;/li&gt;&#xA;&lt;li&gt;共享存储器系统&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;课程编号005-011&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>0713学习笔记</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0713/</link>
      <pubDate>Sun, 13 Jul 2025 23:27:16 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0713/</guid>
      <description>&lt;p&gt;今天看来是无法解决所有当下的疑问了，故先列出清单：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;什么是用户级线程和内核级线程？&lt;/li&gt;&#xA;&lt;li&gt;PCB都包含什么？&lt;/li&gt;&#xA;&lt;li&gt;访管中断和自陷指令有和关系？&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>0712学习笔记</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0712/</link>
      <pubDate>Sat, 12 Jul 2025 23:17:40 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0712/</guid>
      <description>&lt;h2 id=&#34;操作系统&#34;&gt;操作系统&lt;/h2&gt;&#xA;&lt;h3 id=&#34;系统调用&#34;&gt;系统调用&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设备管理：设备的启动、请求和释放等。&lt;/li&gt;&#xA;&lt;li&gt;文件管理：文件的读写、创建和删除等。&lt;/li&gt;&#xA;&lt;li&gt;进程管理：进程的创建、撤销、阻塞和唤醒等。&lt;/li&gt;&#xA;&lt;li&gt;进程通信：进程之间的消息或信号的传递等。&lt;/li&gt;&#xA;&lt;li&gt;内存管理：内存的分配、回收以及获取作业占用内存区大小和起始地址等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;处理过程&#xA;&lt;ol&gt;&#xA;&lt;li&gt;用户程序将系统调用号和所需的参数压入堆栈；接着，调用实际的调用指令，然后执行一个陷入指令，将CPU从用户态转为核心态；再由硬件和操作系统内核程序保护被中断进程的现场。将程序计数器PC、程序状态字PSW及通用寄存器内容压入堆栈。&lt;/li&gt;&#xA;&lt;li&gt;分析系统调用类型，转入相应的系统调用处理子程序。在系统中配置了一张系统调用入口表，表中的每个表项都对应一个系统调用，根据系统调用号找到该系统调用处理子程序的入口地址。&lt;/li&gt;&#xA;&lt;li&gt;在系统调用处理子程序执行结束后，恢复被中断的或设置新进程的CPU现场，然后返回被中断进程或新进程，继续往下执行。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>0712学习日志</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0712/</link>
      <pubDate>Sat, 12 Jul 2025 22:05:39 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0712/</guid>
      <description>&lt;h2 id=&#34;操作系统-int-0x80&#34;&gt;操作系统-int 0x80&lt;/h2&gt;&#xA;&lt;p&gt;操作系统的运行环境&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;内核程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;特权指令&lt;/li&gt;&#xA;&lt;li&gt;核心态，管态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;应用程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;非特权指令&lt;/li&gt;&#xA;&lt;li&gt;用户态，目态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;操作系统的内核&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;时钟管理&lt;/li&gt;&#xA;&lt;li&gt;中断机制&#xA;&lt;ol&gt;&#xA;&lt;li&gt;内部异常&#xA;&lt;ol&gt;&#xA;&lt;li&gt;故障（Fault）（软件中断）&lt;/li&gt;&#xA;&lt;li&gt;自陷（Trap）（软件中断）&lt;/li&gt;&#xA;&lt;li&gt;终止（Abort）（硬件中断）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;外部中断（硬件）&#xA;&lt;ol&gt;&#xA;&lt;li&gt;可屏蔽中断 INTR&lt;/li&gt;&#xA;&lt;li&gt;不可屏蔽中断 NMI&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;课程编号 ：003-004&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;英语-英语构词法&#34;&gt;英语-英语构词法&lt;/h2&gt;&#xA;&lt;p&gt;前缀包含两种作用：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;方向&lt;/li&gt;&#xA;&lt;li&gt;性质&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;后缀一般表示词性，例外：able,&amp;hellip;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>0711学习日志</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0711/</link>
      <pubDate>Fri, 11 Jul 2025 20:29:14 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/posts/0711/</guid>
      <description>&lt;h2 id=&#34;数据结构-太好了是死记硬背&#34;&gt;数据结构-太好了是死记硬背&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据的逻辑和物理结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;QQ20250711-202720.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;算法的时间空间复杂度&lt;/li&gt;&#xA;&lt;li&gt;线性表的顺序表以及相关算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;课程编号001-009&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;操作系统-想念jyy的第n天&#34;&gt;操作系统-想念jyy的第n天&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统概述&#xA;&lt;ul&gt;&#xA;&lt;li&gt;并发&lt;/li&gt;&#xA;&lt;li&gt;共享&lt;/li&gt;&#xA;&lt;li&gt;虚拟&lt;/li&gt;&#xA;&lt;li&gt;异步&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;操作系统的发展历程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;批处理器&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单道&lt;/li&gt;&#xA;&lt;li&gt;多道&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分时操作系统&lt;/li&gt;&#xA;&lt;li&gt;实时操作系统&lt;/li&gt;&#xA;&lt;li&gt;网络操作系统&lt;/li&gt;&#xA;&lt;li&gt;分布式操作系统&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;课程编号001-002&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
