<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虚拟存储系统 on shyの考研日志</title>
    <link>https://auroraemiya.github.io/npee_learning_log.github.io/tags/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 虚拟存储系统 on shyの考研日志</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 26 Jul 2025 11:19:57 +0800</lastBuildDate>
    <atom:link href="https://auroraemiya.github.io/npee_learning_log.github.io/tags/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>0726学习笔记</title>
      <link>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0726/</link>
      <pubDate>Sat, 26 Jul 2025 11:19:57 +0800</pubDate>
      <guid>https://auroraemiya.github.io/npee_learning_log.github.io/memo/0726/</guid>
      <description>&lt;h2 id=&#34;操作系统-一些易错知识点&#34;&gt;操作系统-一些易错知识点&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在计算平均访存时间时要注意快表TLB和页表的访问是&lt;strong&gt;串行&lt;/strong&gt;还是并行的，也要注意页表是&lt;strong&gt;单级&lt;/strong&gt;还是多级的&lt;/li&gt;&#xA;&lt;li&gt;虚拟存储器的&lt;strong&gt;最大容量&lt;/strong&gt;只和计算机的地址结构决定，&lt;strong&gt;实际容量&lt;/strong&gt;和内存和外存有关&lt;/li&gt;&#xA;&lt;li&gt;工作集不是驻留集的子集，只是数量要小于（不大于）驻留集的大小&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;一些你需要搞明白的概念：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;链接，包括静态和动态&lt;/p&gt;&#xA;&lt;p&gt;链接是将不同编译单元及其依赖库整合到一个统一逻辑地址空间的过程。根据发生时间不同，链接分为：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;静态链接&lt;/strong&gt;：在编译阶段将所有代码打包进可执行文件中；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;动态链接&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;加载时链接（Load-Time Linking）&lt;/strong&gt;：程序加载时操作系统自动加载依赖库；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;运行时链接（Run-Time Linking）&lt;/strong&gt;：程序运行过程中手动加载库，例如通过 &lt;code&gt;dlopen()&lt;/code&gt; 等函数调用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;类别&lt;/th&gt;&#xA;          &lt;th&gt;链接时间&lt;/th&gt;&#xA;          &lt;th&gt;控制方式&lt;/th&gt;&#xA;          &lt;th&gt;示例函数&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;静态链接&lt;/td&gt;&#xA;          &lt;td&gt;编译/链接阶段&lt;/td&gt;&#xA;          &lt;td&gt;编译器自动处理&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;动态链接（加载时）&lt;/td&gt;&#xA;          &lt;td&gt;程序加载阶段&lt;/td&gt;&#xA;          &lt;td&gt;操作系统自动处理&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;动态链接（运行时）&lt;/td&gt;&#xA;          &lt;td&gt;程序运行阶段&lt;/td&gt;&#xA;          &lt;td&gt;程序员手动调用&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;dlopen&lt;/code&gt;, &lt;code&gt;dlsym&lt;/code&gt; 等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;$&amp;gt;dive into the procedure of linking of a C code program(Gemini 2.5 pro)&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-final-step-unraveling-the-linking-process-of-a-c-program&#34;&gt;The Final Step: Unraveling the Linking Process of a C Program&lt;/h3&gt;&#xA;&lt;p&gt;The journey from human-readable C code to an executable program culminates in a crucial, often-overlooked stage: linking. This final step in the compilation process is where all the disparate pieces of your program are brought together to create a single, functional executable file. The linker, a key component of the C toolchain, orchestrates this assembly, resolving references between different parts of your code and incorporating necessary library functions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
